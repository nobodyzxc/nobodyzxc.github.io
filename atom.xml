<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>UNCALCULABLE LIFE</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://nobodyzxc.github.io/"/>
  <updated>2020-08-16T12:10:57.035Z</updated>
  <id>http://nobodyzxc.github.io/</id>
  
  <author>
    <name>lambda.catノ</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>玉山 NLP 應用挑戰賽</title>
    <link href="http://nobodyzxc.github.io/2020/08/15/aml/"/>
    <id>http://nobodyzxc.github.io/2020/08/15/aml/</id>
    <published>2020-08-15T13:22:07.000Z</published>
    <updated>2020-08-16T12:10:57.035Z</updated>
    
    <content type="html"><![CDATA[<center>暑假花了一點時間和同學做起來的 project，來場經驗分享吧！</center><a id="more"></a><p>學期末在 FB 上看到有人在人工智慧社團分享了這個比賽，感覺這個議題滿有趣的，剛好大學有修過一門 IR (Information Retrieval, 資訊檢索) 的課，他算是自然語言處理 (NLP) 的應用，所以也算對 NLP 有一點點基本的認識，手上有那時期末 project 做出來的 crawler 和 IR Model，我便拉著同學們一起入坑了。</p><p>所有的 code 都已經放在 <a href="https://github.com/BlackBoxOperator/GotchaTheNames" target="_blank" rel="noopener">GitHub</a> 上了，有興趣可以參考，<br>不過因為訓練資料是主辦單位提供，故不能釋出。<br>這部份可能要讀者自行爬取並標記。</p><p>接著就來介紹一下這個比賽吧！</p><h2 id="競賽說明-About-Competition"><a href="#競賽說明-About-Competition" class="headerlink" title="競賽說明 About Competition"></a>競賽說明 About Competition</h2><blockquote><p>以下說明來自 <a href="https://tbrain.trendmicro.com.tw/Competitions/Details/11" target="_blank" rel="noopener">玉山官網</a> 。</p></blockquote><p>Gotcha！人人都可以是反洗錢大師！</p><p>洗錢是指將犯罪不法所得，以各種手段掩飾、隱匿而使犯罪所得在形式上合法化的行為。近年來因國際洗錢與資助恐怖活動事件頻傳，國內吸金、電信詐騙案件也層出不窮，使得政府與各產業皆致力於洗錢防制 (AML) 工作。</p><p>一般來說，顧客與金融機構往來時，銀行需即時確認顧客身份，透過自動化系統比對出顧客是否列於 AML 焦點人物名單中。若能透過 AI 的協助定期更新 AML 焦點人物名單，並搭配自動化比對，將可大幅降低銀行執行AML作業的人力與時間成本。</p><p>本次競賽將提供參賽者公開新聞資料連結與相對應的焦點人物名單，希望大家集思廣益，透過NLP演算法，精準找出 AML 相關新聞焦點人物，不僅能協助優化 AML 焦點人物名單的更新作業，更有機會獲得高額獎金！</p><div class="table-container"><table><thead><tr><th>項目</th><th>日期</th></tr></thead><tbody><tr><td>報名</td><td>06/01/2020 - 06/30/2020</td></tr><tr><td>測試賽</td><td>07/22/2020</td></tr><tr><td>正式賽</td><td>07/27/2020 - 07/30/2020 <br> 08/03/2020 - 08/06/2020</td></tr><tr><td>公布名次</td><td>08/12/2020</td></tr><tr><td>頒獎典禮</td><td>08/22/2020</td></tr></tbody></table></div><p>簡單來說，這個比賽就是要判斷一篇文章是不是 AML 相關的新聞，<br>如果是的話，就要把裡面的焦點人物（通常是有犯罪事實的人物）抓出來，生成一個名單。</p><p>由於是學期末看到的比賽，比賽已經開始快一個月了，又因為學期末課業繁忙，估計學期結束才能開始。算一算 7/6 才可以開始做，距離測試賽估計只有兩個禮拜，之後離正式賽也只有一個禮拜可以調整模型。不過加上先前的經驗，我想大概夠了，一方面也不想佔用太多時間在比賽上，也就抱著玩玩的心態來嘗試一下、衝刺看看。</p><h2 id="爬蟲-Crawling"><a href="#爬蟲-Crawling" class="headerlink" title="爬蟲 Crawling"></a>爬蟲 Crawling</h2><p>有了先前的基礎，基本上只花了一個晚上就把資料都爬回來了。<br>爬蟲是相對容易，但是需要重複性勞動的工作，以下介紹我是怎麼爬新聞的。</p><h3 id="Basic-crawling"><a href="#Basic-crawling" class="headerlink" title="Basic crawling"></a>Basic crawling</h3><p>新聞網站大部份是動態網頁，通常是由伺服器端從資料庫撈內文出來套在模板上，<br>然後回傳給 user，所以只要是同個網站的新聞，他們大多會遵照一定的排版。</p><h4 id="pandas-amp-the-domains"><a href="#pandas-amp-the-domains" class="headerlink" title="pandas &amp; the domains"></a>pandas &amp; the domains</h4><p>第一步就先來看看有哪些網站的排版要抓，<br>我們先把主辦單位提供給我們的資料透過 pandas 讀進來，接著把所有 domain 讀出來。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint</span><br><span class="line">csv = pd.read_csv(<span class="string">'tbrain_train_final_0610.csv'</span>)</span><br><span class="line">webs = set(re.findall(<span class="string">r'(https?://)?([^/]+)'</span>, l)[<span class="number">0</span>][<span class="number">1</span>] <span class="keyword">for</span> l <span class="keyword">in</span> csv[<span class="string">'hyperlink'</span>])</span><br><span class="line">pprint(webs)</span><br></pre></td></tr></table></figure><p>可以得到這 39 個 domain：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'ccc.technews.tw'</span>,</span><br><span class="line"> <span class="string">'domestic.judicial.gov.tw'</span>,</span><br><span class="line"> <span class="string">'ec.ltn.com.tw'</span>,</span><br><span class="line"> <span class="string">'ent.ltn.com.tw'</span>,</span><br><span class="line"> <span class="string">'estate.ltn.com.tw'</span>,</span><br><span class="line"> <span class="string">'finance.technews.tw'</span>,</span><br><span class="line"> <span class="string">'hk.on.cc'</span>,</span><br><span class="line"> <span class="string">'house.ettoday.net'</span>,</span><br><span class="line"> <span class="string">'m.ctee.com.tw'</span>,</span><br><span class="line"> <span class="string">'m.ltn.com.tw'</span>,</span><br><span class="line"> <span class="string">'money.udn.com'</span>,</span><br><span class="line"> <span class="string">'mops.twse.com.tw'</span>,</span><br><span class="line"> <span class="string">'news.cnyes.com'</span>,</span><br><span class="line"> <span class="string">'news.ebc.net.tw'</span>,</span><br><span class="line"> <span class="string">'news.ltn.com.tw'</span>,</span><br><span class="line"> <span class="string">'news.mingpao.com'</span>,</span><br><span class="line"> <span class="string">'news.tvbs.com.tw'</span>,</span><br><span class="line"> <span class="string">'ol.mingpao.com'</span>,</span><br><span class="line"> <span class="string">'sina.com.hk'</span>,</span><br><span class="line"> <span class="string">'technews.tw'</span>,</span><br><span class="line"> <span class="string">'tw.news.yahoo.com'</span>,</span><br><span class="line"> <span class="string">'udn.com'</span>,</span><br><span class="line"> <span class="string">'www.bnext.com.tw'</span>,</span><br><span class="line"> <span class="string">'www.businesstoday.com.tw'</span>,</span><br><span class="line"> <span class="string">'www.chinatimes.com'</span>,</span><br><span class="line"> <span class="string">'www.cna.com.tw'</span>,</span><br><span class="line"> <span class="string">'www.coolloud.org.tw'</span>,</span><br><span class="line"> <span class="string">'www.cw.com.tw'</span>,</span><br><span class="line"> <span class="string">'www.ettoday.net'</span>,</span><br><span class="line"> <span class="string">'www.fsc.gov.tw'</span>,</span><br><span class="line"> <span class="string">'www.hbrtaiwan.com'</span>,</span><br><span class="line"> <span class="string">'www.hk01.com'</span>,</span><br><span class="line"> <span class="string">'www.managertoday.com.tw'</span>,</span><br><span class="line"> <span class="string">'www.mirrormedia.mg'</span>,</span><br><span class="line"> <span class="string">'www.nextmag.com.tw'</span>,</span><br><span class="line"> <span class="string">'www.nownews.com'</span>,</span><br><span class="line"> <span class="string">'www.setn.com'</span>,</span><br><span class="line"> <span class="string">'www.storm.mg'</span>,</span><br><span class="line"> <span class="string">'www.wealth.com.tw'</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="beautiful-soup-4-amp-the-selector"><a href="#beautiful-soup-4-amp-the-selector" class="headerlink" title="beautiful soup 4 &amp; the selector"></a>beautiful soup 4 &amp; the selector</h4><p>有了 domain 之後就是重複性的工作了。<br>從各個 domain 中各挑一篇新聞出來查看他的內文位置，然後寫好 selector 用 bs4 抓出來。</p><p>舉個例子：<a href="http://finance.technews.tw/2019/09/06/palo-alto-networks-intends-to-acquire-zingbox/" target="_blank" rel="noopener">http://finance.technews.tw/2019/09/06/palo-alto-networks-intends-to-acquire-zingbox/</a></p><p>按下 f12 後可以看到，此網頁的 article tag 可以涵蓋所有內文，<br>之後我再把他 p tag 的內容抓出來就好。</p><p><img src="https://i.imgur.com/2Jibg8j.png" alt></p><p>把 39 個 domain 抓出來大概長這樣：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">fetch_table = &#123;</span><br><span class="line">        <span class="comment"># previous</span></span><br><span class="line">        <span class="string">'www.chinatimes.com'</span>:          [<span class="string">'div'</span>, &#123;<span class="string">'class'</span>: <span class="string">'article-body'</span>&#125;],</span><br><span class="line">        <span class="string">'news.tvbs.com.tw'</span>:            [<span class="string">'div'</span>, &#123;<span class="string">'id'</span>:<span class="string">'news_detail_div'</span>&#125;],</span><br><span class="line">        <span class="string">'home.appledaily.com.tw'</span>:      [<span class="string">'div'</span>, &#123;<span class="string">'class'</span>: <span class="string">'ncbox_cont'</span>&#125;],</span><br><span class="line"></span><br><span class="line">        <span class="comment"># current</span></span><br><span class="line">        <span class="string">'news.cnyes.com'</span>:              [<span class="string">'div'</span>, &#123;<span class="string">'itemprop'</span>: <span class="string">'articleBody'</span>&#125;],</span><br><span class="line">        <span class="string">'www.mirrormedia.mg'</span>:          [<span class="string">'article'</span>, &#123;&#125;],</span><br><span class="line">        <span class="string">'domestic.judicial.gov.tw'</span>:    [<span class="string">'pre'</span>, &#123;&#125;],</span><br><span class="line">        <span class="string">'www.coolloud.org.tw'</span>:         [<span class="string">'div'</span>, &#123;<span class="string">'class'</span>:<span class="string">'field-items'</span>&#125;],</span><br><span class="line">        <span class="string">'m.ctee.com.tw'</span>:               [<span class="string">'div'</span>, &#123;<span class="string">'class'</span>: <span class="string">'entry-main'</span>&#125;],</span><br><span class="line">        <span class="string">'mops.twse.com.tw'</span>:            [<span class="string">'div'</span>, &#123;<span class="string">'id'</span>: <span class="string">'zoom'</span>&#125;],</span><br><span class="line">        <span class="string">'www.hk01.com'</span>:                [<span class="string">'article'</span>, &#123;&#125;],</span><br><span class="line">        <span class="string">'www.wealth.com.tw'</span>:           [<span class="string">'div'</span>, &#123;<span class="string">'class'</span>: <span class="string">'entry-main'</span>&#125;],</span><br><span class="line">        <span class="string">'news.ebc.net.tw'</span>:             [<span class="string">'div'</span>, &#123;<span class="string">'class'</span>: <span class="string">'fncnews-content'</span>&#125;],</span><br><span class="line">        <span class="string">'news.mingpao.com'</span>:            [<span class="string">'article'</span>, &#123;&#125;],</span><br><span class="line">        <span class="string">'www.bnext.com.tw'</span>:            [<span class="string">'div'</span>, &#123;<span class="string">'class'</span>: <span class="string">'content'</span>&#125;],</span><br><span class="line">        <span class="string">'news.ltn.com.tw'</span>:             [<span class="string">'div'</span>, &#123;<span class="string">'itemprop'</span>: <span class="string">'articleBody'</span>&#125;],</span><br><span class="line">        <span class="string">'finance.technews.tw'</span>:         [<span class="string">'article'</span>, &#123;&#125;],</span><br><span class="line">        <span class="string">'www.fsc.gov.tw'</span>:              [<span class="string">'div'</span>, &#123;<span class="string">'id'</span>: <span class="string">'maincontent'</span>&#125;],</span><br><span class="line">        <span class="string">'www.cw.com.tw'</span>:               [<span class="string">'article'</span>, &#123;&#125;],</span><br><span class="line">        <span class="string">'www.businesstoday.com.tw'</span>:    [<span class="string">'div'</span>, &#123;<span class="string">'class'</span>: <span class="string">'article'</span>&#125;],</span><br><span class="line">        <span class="string">'sina.com.hk'</span>:                 [<span class="string">'section'</span>, &#123;<span class="string">'id'</span>: <span class="string">'content'</span>&#125;],</span><br><span class="line">        <span class="string">'www.ettoday.net'</span>:             [<span class="string">'article'</span>, &#123;&#125;],</span><br><span class="line">        <span class="string">'hk.on.cc'</span>:                    [<span class="string">'div'</span>, &#123;<span class="string">'class'</span>: <span class="string">'breakingNewsContent'</span>&#125;],</span><br><span class="line">        <span class="string">'technews.tw'</span>:                 [<span class="string">'div'</span>, &#123;<span class="string">'class'</span>: <span class="string">'content'</span>&#125;],</span><br><span class="line">        <span class="string">'money.udn.com'</span>:               [<span class="string">'div'</span>, &#123;<span class="string">'id'</span>: <span class="string">'article_body'</span>&#125;],</span><br><span class="line">        <span class="string">'udn.com'</span>:</span><br><span class="line">        [<span class="string">'div'</span>,                        &#123;<span class="string">'class'</span>: <span class="string">'article-content__paragraph'</span>&#125;],</span><br><span class="line">        <span class="string">'tw.news.yahoo.com'</span>:           [<span class="string">'article'</span>, &#123;&#125;],</span><br><span class="line">        <span class="string">'www.setn.com'</span>:                [<span class="string">'article'</span>, &#123;&#125;],</span><br><span class="line">        <span class="string">'www.managertoday.com.tw'</span>:     [<span class="string">'body'</span>, &#123;&#125;],</span><br><span class="line">        <span class="string">'www.cna.com.tw'</span>:              [<span class="string">'article'</span>, &#123;&#125;],</span><br><span class="line">        <span class="string">'estate.ltn.com.tw'</span>:           [<span class="string">'div'</span>, &#123;<span class="string">'itemprop'</span>: <span class="string">'articleBody'</span>&#125;],</span><br><span class="line">        <span class="string">'m.ltn.com.tw'</span>:                [<span class="string">'div'</span>, &#123;<span class="string">'itemprop'</span>: <span class="string">'articleBody'</span>&#125;],</span><br><span class="line">        <span class="string">'ccc.technews.tw'</span>:             [<span class="string">'article'</span>, &#123;&#125;],</span><br><span class="line">        <span class="string">'www.hbrtaiwan.com'</span>:           [<span class="string">'div'</span>, &#123;<span class="string">'class'</span>: <span class="string">'article'</span>&#125;],</span><br><span class="line">        <span class="string">'ec.ltn.com.tw'</span>:               [<span class="string">'p'</span>, &#123;&#125;],</span><br><span class="line">        <span class="string">'www.nownews.com'</span>:             [<span class="string">'div'</span>, &#123;<span class="string">'class'</span>: <span class="string">'newsContainer'</span>&#125;],</span><br><span class="line">        <span class="string">'ol.mingpao.com'</span>:              [<span class="string">'div'</span>, &#123;<span class="string">'class'</span>: <span class="string">'article_wrap'</span>&#125;],</span><br><span class="line">        <span class="string">'tw.nextmgz.com'</span>:              [<span class="string">'article'</span>, &#123;&#125;],</span><br><span class="line">        <span class="string">'www.nextmag.com.tw'</span>:          [<span class="string">'article'</span>, &#123;&#125;],</span><br><span class="line">        <span class="string">'ent.ltn.com.tw'</span>:              [<span class="string">'div'</span>, &#123;<span class="string">'class'</span>: <span class="string">'text'</span>&#125;],</span><br><span class="line">        <span class="string">'www.storm.mg'</span>:                [<span class="string">'article'</span>, &#123;&#125;],</span><br><span class="line">        <span class="string">'house.ettoday.net'</span>:           [<span class="string">'article'</span>, &#123;&#125;],</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_article_args_by</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> domain <span class="keyword">in</span> fetch_table:</span><br><span class="line">        <span class="keyword">if</span> domain <span class="keyword">in</span> url:</span><br><span class="line">            tag, attr = fetch_table[domain]</span><br><span class="line">            <span class="keyword">return</span> &#123; <span class="string">'name'</span>: tag, <span class="string">'attrs'</span>: attr &#125;</span><br><span class="line">    print(<span class="string">"cannot find domain pattern in"</span>, url)</span><br></pre></td></tr></table></figure></p><p>以下使用 bs4 搭配上面我們抓到的資料，進行單篇資料爬取（要將上面的 code 加到下面的 code）</p><p>其實在實際狀況有滿多特殊例外需要處理，比如網站沒有回應，需要重新 get，<br>或者一些 general case (比如只取 p tag) 不適用，就要另外再撰寫規則。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests <span class="keyword">as</span> rq</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">add = <span class="keyword">lambda</span> a, b: a + b</span><br><span class="line">resc = <span class="keyword">lambda</span> s: s.replace(<span class="string">"\r"</span>, <span class="string">''</span>).replace(<span class="string">""</span>, <span class="string">""</span>).replace(<span class="string">"\n"</span>, <span class="string">""</span>)</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://finance.technews.tw/2019/12/22/tkec-road-to-reform/'</span></span><br><span class="line">html = rq.get(url, timeout = <span class="number">10</span>).text</span><br><span class="line">soup = BeautifulSoup(html, <span class="string">"html.parser"</span>)</span><br><span class="line">articles = soup.findAll(**find_article_args_by(url))</span><br><span class="line">paragraphs = reduce(add, [a.findChildren(<span class="string">"p"</span>) <span class="keyword">for</span> a <span class="keyword">in</span> articles])</span><br><span class="line">paragraphs += reduce(add, [a.find_all(<span class="string">r'^h[1-6]$'</span>) <span class="keyword">for</span> a <span class="keyword">in</span> articles])</span><br><span class="line">content = resc(<span class="string">' '</span>.join([s <span class="keyword">for</span> s <span class="keyword">in</span> [p.get_text().strip() <span class="keyword">for</span> p <span class="keyword">in</span> paragraphs]]))</span><br><span class="line">print(content)</span><br></pre></td></tr></table></figure><p>抓到的文章為：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">台灣 3C 通路龍頭燦坤，一個月之內，董事長、總經理、財務長、發言人接連離職，由老臣陳彥君迅速接任董座，他能否勵精圖治，成功改革老燦坤？  對所有零售通路、電商業而言，11 月是最忙碌的 1 個月，業者</span><br><span class="line">無不打起精神為雙 11 備戰。但是，面對實體、虛擬通路競爭對手兩路夾殺的 3C 通路龍頭燦坤實業，似乎花更多力氣在打一場「內戰」。 先是上任不到 8 個月的總經理李佳峰在 11 月 18 日清晨「因個人規畫」辭</span><br><span class="line">職，今年 5 月甫上任的發言人蔡依玲也同時離開；12 月 12 日，上任一年多的董事長何宗原，以及 2018 年底上任的財務長徐霄菀雙雙離職。一個月之間，上至董事長、下至發言人全面大搬風，燦坤一次折損 4 位專業經理人。 何宗原曾任台灣嬌生業務總監、中國嬌生消費品產品副總裁，2018 年在燦坤創辦人吳燦坤的妻子蔡淑惠引薦下，以專業經理人身分接下燦坤董事長。 何宗原延攬了曾在台灣萊雅、台灣寶僑家品財務部門任職的徐霄菀，以及小米前台灣總經理李佳峰進入燦坤。今年 9 月，燦坤轉投資事業金鑛咖啡、燦星旅遊因虧損擴大裁員，燦坤以何宗原、李佳峰兩人名義共同發布內部信，要「以二次創業的心態共同迎接挑戰」穩定軍心，兩人甚至在 9 月舉辦活動親自向品牌商介紹燦坤的轉型計畫，但隨著兩人先後離職，內部改革似乎戛然而止。 4 位專業經理人接連離去，所為哪樁？也許，財報透露了些許端倪。 燦坤今年前 3 季穩住 3C 通路</span><br><span class="line">龍頭地位，但營收、獲利皆較 2018 年同期衰退，尤其稅後淨利更較 2018 年同期大減 27%；反觀 3C 通路老二全國電子，今年前 3 季營收卻逆勢成長 5%。因此，市場傳言何宗原離去的主因恐與「業績無起色」有關</span><br><span class="line">。 不過，市場也有另外一派說法指出，何的離去可能與李佳峰有關；業界人士指出，李佳峰進入燦坤後的改革計畫獲得董事會授權，但在財務執行方面，卻未取得何宗原、徐霄菀支持，導致無資金奧援的李佳峰選擇掛冠求去，董事會頗為不滿。 但也有接近燦坤的人士指出，身兼燦坤、燦星網通及燦星旅遊董事長的何宗原，花了相當多心力在轉投資金鑛咖啡、燦坤集團旗下負責研發智慧家電的燦坤先端智能，似乎「很少時間花在燦坤」。 根據閩燦坤財報，先端智能 2018 年虧損達 1,216 萬人民幣，而金鑛咖啡將轉型成咖啡豆原物料供應商；燦星旅遊也持續關閉實體店面，顯然都是需要費心的事業體，這些都成了何宗原請辭導火線。 接近燦坤的人士也對記者表示，「燦星旅遊的問題尤其嚴重」，以線上旅遊產品起家，轉往實體店舖經營的燦星旅遊，自 2015 年起總共虧損 3.73 億元；從 2018 年何接任董事長以後，帳上現金從 2018 年第三季的 3.43 億</span><br><span class="line">元到今年第三季只剩下 1 億元。 旅遊業者指出，燦星雖然試圖反攻實體店，但最後功敗垂成，其他旅行社逐漸走向精緻化路線經營時，燦星沒有追上這股潮流，該業者表示：「業界對他們的觀感，就是成本壓得非常</span><br><span class="line">低，品質也不好。」 只是，就在眾人還未反應過來時，12 月 13 日，燦坤火速召開董事會，選出老臣陳彥君新任燦坤董事長。 陳彥君十多年前就在燦坤任職，曾任發言人、財務長、風控長及財務總經理，雖曾短暫到特力和樂擔任副董事長，最後又回到燦坤體系，擔任燦星網通、燦星旅遊董事長，頗受吳燦坤夫婦信任。 （作者：王子承；全文未完，完整內容請見《今周刊》） 科技新知，時時更新 30 天內走了 4 個高階經理人，燦坤改革之路恐遇逆風？ 高層求去，財報透端倪？ 延伸閱讀：</span><br></pre></td></tr></table></figure></p><h3 id="Advenced-crawling"><a href="#Advenced-crawling" class="headerlink" title="Advenced crawling"></a>Advenced crawling</h3><h4 id="wayback-machine-amp-the-missing-pages-404"><a href="#wayback-machine-amp-the-missing-pages-404" class="headerlink" title="wayback machine &amp; the missing pages (404)"></a>wayback machine &amp; the missing pages (404)</h4><p>對於一些 404 的網頁，我們可以想辦法把他找回來，<br>比方說 wayback machine 就是一個不錯的選擇。</p><p>我是用別人寫好的這個 <a href="https://github.com/jsvine/waybackpack" target="_blank" rel="noopener">waybackpack</a>，也是 python 寫的小工具，<br>他只依賴 requests 這個額外的套件。</p><p>裝起來也很簡單：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install waybackpack</span><br></pre></td></tr></table></figure><p>使用範例就大概是這樣：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">waybackpack -d wayback https://udn.com/news/story/7321/3845624</span><br></pre></td></tr></table></figure></p><p><code>-d</code> 是資料夾，他會自動創一個你指定名字的資料夾，然後把資料存進去。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">waybackpack -d wayback https://udn.com/news/story/7321/3845624</span><br><span class="line">waybackpack -d wayback https://udn.com/news/story/7321/3833161</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ tree -ifF wayback | grep -v &apos;/$&apos;</span><br><span class="line"></span><br><span class="line">wayback</span><br><span class="line">wayback/20190524225425/udn.com/news/story/7321/3833161</span><br><span class="line">wayback/20190608120835/udn.com/news/story/7321/3845624</span><br><span class="line">wayback/20190609133509/udn.com/news/story/7321/3845624</span><br><span class="line">wayback/20190827225620/udn.com/news/story/7321/3845624</span><br><span class="line"></span><br><span class="line">20 directories, 4 files</span><br></pre></td></tr></table></figure><p>之後就是開個檔，然後一樣餵給剛剛寫的 crawler 即可。<br>（把 <code>requests.get(url)</code> 改成 <code>open(path)</code>，然後 <code>.text</code> 改 <code>.read()</code>）</p><p>如果連 wayback machine 都沒有，那就手動丟搜尋引擎吧！<br>或許有人轉載，還留著一些資料。</p><h4 id="requests-html-amp-the-dynamic-pages-ajax"><a href="#requests-html-amp-the-dynamic-pages-ajax" class="headerlink" title="requests-html &amp; the dynamic pages (ajax)"></a>requests-html &amp; the dynamic pages (ajax)</h4><p>此次比賽給的網頁似乎沒有此種頁面，但這邊還是提一下。</p><p>有時候動態生成不是由伺服端做，而是在客戶端使用 ajax 請求內文，然後套進框架。<br>這時候就要使用瀏覽器 js 引擎去渲染，而在 python 就必須使用額外的工具來做。</p><p>例如自由時報娛樂版是採動態生成內文，<br>這部份可以使用 <a href="https://github.com/oldani/requests-html" target="_blank" rel="noopener">requests-html</a> 這個 library。</p><p>只用方法不難，只要照著他的 <code>README.md</code> 就可以了，在此就不贅述了。</p><h2 id="模型雛型-Naive-Model"><a href="#模型雛型-Naive-Model" class="headerlink" title="模型雛型 Naive Model"></a>模型雛型 Naive Model</h2><p>根據要求，我們不難設想到這個模型大概可以分成兩個部份。</p><ol><li>classifier 用來辨別是否為 AML 新聞。</li><li>extractor 用來提取目標人名。</li></ol><p>以下就來介紹一下我們一開始是怎麼實作這兩個工具的。</p><h3 id="Document-Classification"><a href="#Document-Classification" class="headerlink" title="Document Classification"></a>Document Classification</h3><p>要把文件分兩類，首先就必須想到何謂分類。<br>一般來說，分到同一類的東西，他們彼此的相似度會比較高，<br>所以應用這個概念，我們只要能算出文章的相似度就可以達到分類的目標。</p><p>那該怎麼判斷兩篇文章的相似度呢？</p><p>我們先來探討一下詞和文章的關係。</p><p>那考慮把所有新聞出現過的詞想做一個集合，或者把他想成一個向量的形式。</p><p>比如這裡有三句話，我們把他當成三篇文章，為一個 corpus，並且已經做好斷詞。</p><ol><li>太平洋/有/颱風/生成/，/請/民眾/關注/天氣/，/嚴防/大雨/。</li><li>天氣/預報/：/氣流/影響/，/天氣/仍舊/不穩/，/留意/瞬間/大雨/。</li><li>台灣/座落/於/西/太平洋/。</li></ol><p>斷詞在實作上我們是使用 <a href="https://github.com/fxsjy/jieba" target="_blank" rel="noopener">jieba</a> 的 <code>search_mode</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line">text = <span class="string">'台灣座落於西太平洋。'</span></span><br><span class="line"></span><br><span class="line">print(jieba.lcut_for_search(text))       <span class="comment"># 搜尋引擎模式</span></span><br><span class="line"><span class="comment"># ['台灣', '座落', '於', '太平', '太平洋', '西太平洋', '。']</span></span><br><span class="line"></span><br><span class="line">print(jieba.lcut(text, cut_all = <span class="literal">True</span>))  <span class="comment"># 全模式</span></span><br><span class="line"><span class="comment"># ['台', '灣', '座落', '於', '西太平洋', '太平', '太平洋', '', '']</span></span><br><span class="line"></span><br><span class="line">print(jieba.lcut(text, cut_all = <span class="literal">False</span>)) <span class="comment"># 精確模式（如沒指定 cut_all 則為默認）</span></span><br><span class="line"><span class="comment"># ['台灣', '座落', '於', '西太平洋', '。']</span></span><br></pre></td></tr></table></figure><p>把停用詞 (stopword) 等一些常用的詞去掉，例如 <code>請</code>，<code>於</code>, <code>仍舊</code>, <code>瞬間</code> 一類的詞，所有詞可以表示成一個 vector。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[太平洋, 颱風, 生成, 民眾, 關注, 天氣, 嚴防, 大雨, 預報, 氣流, 影響, 不穩, 留意, 台灣, 座落]</span><br></pre></td></tr></table></figure><p>去掉停用詞的新文章為：</p><ol><li>太平洋/颱風/生成/民眾/關注/天氣/嚴防/大雨</li><li>天氣/預報/氣流/影響/天氣/不穩/留意/大雨</li><li>台灣/座落/太平洋</li></ol><p>不難想到，一個詞如果在一篇文章中出現多次，那這個詞和這篇文章的關聯度就會越高，這個就是 TF (term frequency) 的概念，一般可以計算為 <code>該詞出現在該文章的次數 / 該篇文章的詞數</code>。該文章的詞數為正規化的用途，避免文章過長導致某詞的頻率過高。一篇文章的 TF vector 可以當成一種特徵值。以下為三篇文章的 TF vector。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[太平洋, 颱風, 生成, 民眾, 關注, 天氣, 嚴防, 大雨, 預報, 氣流, 影響, 不穩, 留意, 台灣, 座落]</span><br><span class="line">[  <span class="number">1</span>/<span class="number">8</span>, <span class="number">1</span>/<span class="number">8</span>,  <span class="number">1</span>/<span class="number">8</span>, <span class="number">1</span>/<span class="number">8</span>, <span class="number">1</span>/<span class="number">8</span>,  <span class="number">1</span>/<span class="number">8</span>, <span class="number">1</span>/<span class="number">8</span>, <span class="number">1</span>/<span class="number">8</span>,    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,    <span class="number">0</span>]</span><br><span class="line">[    <span class="number">0</span>,   <span class="number">0</span>,    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">2</span>/<span class="number">8</span>,   <span class="number">0</span>, <span class="number">1</span>/<span class="number">8</span>,  <span class="number">1</span>/<span class="number">8</span>, <span class="number">1</span>/<span class="number">8</span>, <span class="number">1</span>/<span class="number">8</span>,  <span class="number">1</span>/<span class="number">8</span>, <span class="number">1</span>/<span class="number">8</span>,   <span class="number">0</span>,    <span class="number">0</span>]</span><br><span class="line">[  <span class="number">1</span>/<span class="number">3</span>,   <span class="number">0</span>,    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,    <span class="number">0</span>,   <span class="number">0</span>, <span class="number">1</span>/<span class="number">3</span>,  <span class="number">1</span>/<span class="number">3</span>]</span><br></pre></td></tr></table></figure><p>用 TF 的直覺大概就是如果兩篇文章擁有相同的詞越多，那相似度可能就越高。</p><p>我們可以用 cosine similarity 來計算三篇文章的相似度：</p><script type="math/tex; mode=display">\cos (t,e)= {t e \over \|t\| \| e\|} = \frac{ \sum_{i=1}^{n}{t_i e_i} }{ \sqrt{\sum_{i=1}^{n}{(t_i)^2} } \sqrt{\sum_{i=1}^{n}{(e_i)^2} } }</script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics.pairwise <span class="keyword">import</span> cosine_similarity</span><br><span class="line">vecA = [<span class="number">1</span>/<span class="number">8</span>, <span class="number">1</span>/<span class="number">8</span>, <span class="number">1</span>/<span class="number">8</span>, <span class="number">1</span>/<span class="number">8</span>, <span class="number">1</span>/<span class="number">8</span>, <span class="number">1</span>/<span class="number">8</span>, <span class="number">1</span>/<span class="number">8</span>, <span class="number">1</span>/<span class="number">8</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>]</span><br><span class="line">vecB = [  <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">2</span>/<span class="number">8</span>,   <span class="number">0</span>, <span class="number">1</span>/<span class="number">8</span>, <span class="number">1</span>/<span class="number">8</span>, <span class="number">1</span>/<span class="number">8</span>, <span class="number">1</span>/<span class="number">8</span>, <span class="number">1</span>/<span class="number">8</span>, <span class="number">1</span>/<span class="number">8</span>,   <span class="number">0</span>,   <span class="number">0</span>]</span><br><span class="line">vecC = [<span class="number">1</span>/<span class="number">3</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">1</span>/<span class="number">3</span>, <span class="number">1</span>/<span class="number">3</span>]</span><br><span class="line">print(cosine_similarity([vecA, vecB, vecC], [vecA, vecB, vecC]))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># a          b          c</span></span><br><span class="line">[[<span class="number">1.</span>         <span class="number">0.3354102</span>  <span class="number">0.20412415</span>]  <span class="comment"># a</span></span><br><span class="line"> [<span class="number">0.3354102</span>  <span class="number">1.</span>         <span class="number">0.</span>        ]  <span class="comment"># b</span></span><br><span class="line"> [<span class="number">0.20412415</span> <span class="number">0.</span>         <span class="number">1.</span>        ]] <span class="comment"># c</span></span><br></pre></td></tr></table></figure><p>而更進一步考慮，一個詞他在只出現在某幾篇新聞中（比如 “洗錢”）和一個詞幾乎每篇都有（比如 “記者”），那前者的重要性和獨特性應該會比後者高。這就是 IDF（inverse document frequency，逆向文件頻率）的概念，一般計算為 <code>log(所有的文章數目 / 出現該詞的文章數 + 1)</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">log(<span class="number">3</span> / (<span class="number">2</span>)) = <span class="number">0.4</span> <span class="comment"># 這邊因為 corpus 小，而且詞都有出現，所以就不做 + 1 避免分母為零</span></span><br><span class="line">log(<span class="number">3</span> / (<span class="number">1</span>)) = <span class="number">1.1</span></span><br><span class="line">[太平洋, 颱風, 生成, 民眾, 關注, 天氣, 嚴防, 大雨, 預報, 氣流, 影響, 不穩, 留意, 台灣, 座落]</span><br><span class="line">[  <span class="number">0.4</span>, <span class="number">1.1</span>,  <span class="number">1.1</span>, <span class="number">1.1</span>, <span class="number">1.1</span>,  <span class="number">0.4</span>, <span class="number">1.1</span>, <span class="number">0.4</span>,  <span class="number">1.1</span>, <span class="number">1.1</span>, <span class="number">1.1</span>,  <span class="number">1.1</span>, <span class="number">1.1</span>, <span class="number">1.1</span>,  <span class="number">1.1</span>]</span><br></pre></td></tr></table></figure><p>IDF 可以表達出一個詞的特徵值，我們把他與 TF 相乘，便可得到更有意義的特徵值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[太平洋, 颱風, 生成, 民眾, 關注, 天氣, 嚴防, 大雨, 預報, 氣流, 影響, 不穩, 留意, 台灣, 座落]</span><br><span class="line">[ <span class="number">0.05</span>, <span class="number">0.21</span>,<span class="number">0.21</span>,<span class="number">0.21</span>,<span class="number">0.21</span>, <span class="number">0.05</span>,<span class="number">0.21</span>, <span class="number">0.05</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,  <span class="number">0.0</span>]</span><br><span class="line">[  <span class="number">0.0</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,  <span class="number">0.1</span>, <span class="number">0.0</span>, <span class="number">0.05</span>,<span class="number">0.21</span>,<span class="number">0.21</span>, <span class="number">0.21</span>,<span class="number">0.21</span>,<span class="number">0.21</span>, <span class="number">0.0</span>,  <span class="number">0.0</span>]</span><br><span class="line">[ <span class="number">0.13</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,<span class="number">0.55</span>, <span class="number">0.55</span>]</span><br></pre></td></tr></table></figure><p>我們一樣計算 cosine similarity 可得：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># a          b          c</span></span><br><span class="line">[[<span class="number">1.</span>         <span class="number">0.03368042</span> <span class="number">0.01800272</span>]  <span class="comment"># a</span></span><br><span class="line"> [<span class="number">0.03368042</span> <span class="number">1.</span>         <span class="number">0.</span>        ]  <span class="comment"># b</span></span><br><span class="line"> [<span class="number">0.01800272</span> <span class="number">0.</span>         <span class="number">1.</span>        ]] <span class="comment"># c</span></span><br></pre></td></tr></table></figure><h4 id="BM25-w2v-IR-model-as-classifier"><a href="#BM25-w2v-IR-model-as-classifier" class="headerlink" title="BM25 + w2v + IR model as classifier"></a>BM25 + w2v + IR model as classifier</h4><p>IR model 大概就是以上面提到提到的概念，做出的一個搜尋引擎。<br>給定一段文字，他能幫你按照關聯度排序，把關聯度高的文章排到前面。</p><p>而我們之前所作的 model 使用的特徵值是 <a href="https://kknews.cc/zh-tw/news/z2gkr4g.html" target="_blank" rel="noopener">bm25</a>，加上 <a href="https://kknews.cc/zh-tw/code/nkjvlm2.html" target="_blank" rel="noopener">word2vector</a> (word2vector 是一種 word embedding 的實作，透過 unsupervised learning 產出，透過類神經網路，藉由鄰近詞算出一個詞的特徵值），最後再做個 Relevance Feedback (精準點來說，是 <a href="https://zh.wikipedia.org/wiki/%E5%85%B3%E8%81%94%E5%8F%8D%E9%A6%88" target="_blank" rel="noopener">盲式反饋</a> ) 來完成 IR 任務。</p><p>那如何用這個 model 當作 classifier 呢？<br>可以把主辦單位給的三百多篇 AML 新聞接起來，直接和要預測的文章算相似度，<br>這邊可能就要抓一個相似度的 threshold 來判斷是或不是。</p><p>或者我們採取了一個比較簡單的作法，直接利用 IR model，取前三百篇，看這三百篇裡面，主辦單位標記的 AML 文章 recall 是多少。一樣也要取個 threshold。這邊我們大概就用三百篇和其他非 AML 相關新聞的 recall 下去抓，其實已經有不錯的分類能力了，不過還是有些新聞，例如大樂透開獎會歸進 AML 新聞。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[ x   0 / 300 = 0.000000 score =   0.00 ] Query29: 【2019理財大事5】跌破...</span><br><span class="line">[ x  11 / 300 = 0.036667 score =   5.58 ] Query30: 公開資訊觀測站...</span><br><span class="line">[ v 223 / 300 = 0.743333 score = 195.94 ] Query31: 涉貪圖利 東檢聲押前台...</span><br><span class="line">[ x   0 / 300 = 0.000000 score =   0.00 ] Query32: 昂山素姬明出席國際法 ...</span><br><span class="line">[ x   0 / 300 = 0.000000 score =   0.00 ] Query33: 繼思想改造集中營之後 ...</span><br><span class="line">[ x   0 / 300 = 0.000000 score =   0.00 ] Query34: 山頂纜車機件故障暫停 ...</span><br><span class="line">[ v 251 / 300 = 0.836667 score = 215.47 ] Query35: 直銷妹誆「1年帶你住帝...</span><br><span class="line">[ v 262 / 300 = 0.873333 score = 224.46 ] Query36: 潤寅詐貸案延燒 上市公...</span><br><span class="line">[ v 206 / 300 = 0.686667 score = 179.18 ] Query37: 花蓮縣3議員涉收賄 貪 ...</span><br><span class="line">[ x   0 / 300 = 0.000000 score =   0.00 ] Query38: 週三晚起東北季風增強 ...</span><br><span class="line">[ x   0 / 300 = 0.000000 score =   0.00 ] Query39: 「灰天鵝」拉警報 | An...</span><br><span class="line">[ x   1 / 300 = 0.003333 score =   0.61 ] Query40: 柯媽爆料：柯文哲絕對 ...</span><br><span class="line">[ x   0 / 300 = 0.000000 score =   0.00 ] Query41: 媒體：特朗普涉嫌威脅 ...</span><br><span class="line">[ x   0 / 300 = 0.000000 score =   0.00 ] Query42: 國銀海外投資豐收 8月O...</span><br></pre></td></tr></table></figure><h3 id="Named-Entity-Recognition"><a href="#Named-Entity-Recognition" class="headerlink" title="Named Entity Recognition"></a>Named Entity Recognition</h3><p>人名提取是本次比賽的重點。<br>在 NLP 中 Named Entity Recognition 可以識別出特殊的名詞，例如人物、組織和地點等。</p><h4 id="NN-model-ckip-rule-based-as-extractor-NER"><a href="#NN-model-ckip-rule-based-as-extractor-NER" class="headerlink" title="NN model (ckip) + rule based as extractor (NER)"></a>NN model (ckip) + rule based as extractor (NER)</h4><p>而在去年九月，中研院的 ckip 開源了一套新的斷詞系統 <a href="https://github.com/ckiplab/ckiptagger" target="_blank" rel="noopener">ckiptagger</a>，與舊的不同處在於這一套是用深度學習的方法，利用 BiLSTM 訓練出來的模型。他一樣利用 pre-training 的 word embedding，然後搭配 BiLSTM 訓練出一套斷詞系統。而後透過斷詞出來的結果再加上詞向量訓練出詞性標注。</p><p>而最後最重要的 NER 也是由 BiLSTM 訓練而成，需要拿前面的詞向量 + 斷詞結果 + 詞性標注當作輸入。有了這一整套系統，我們就有基本的中文 NER 可以用了。這套斷詞系統相當精確，也有許多類別，地點、組織等都會標記出來，我們只要取用人物的部份即可。</p><p>不過人物的部份，他會連一些簡稱（張嫌、陳婦）都標記出來，<br>所以我們這邊會做一個簡單的 filter 去過濾這些結果。</p><p>ckiptagger 的版本需求：</p><ul><li>python&gt;=3.6</li><li>tensorflow&gt;=1.13.1,<2 tensorflow-gpu>=1.13.1,&lt;2 (one of them)</2></li><li>gdown (optional, for downloading model files from google drive)</li></ul><p>記得要先載他 train 好的 model 才可以使用，<br>你可以用上面的 gdown 或者直接從載點下載，詳情請參照 <a href="https://github.com/ckiplab/ckiptagger" target="_blank" rel="noopener">ckiptagger</a>。</p><p>我們這邊使用的配置如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ckiptagger==<span class="number">0.1</span><span class="number">.1</span></span><br><span class="line">tensorflow-gpu==<span class="number">1.15</span></span><br></pre></td></tr></table></figure></p><p>一個簡單的範例片段：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ckiptagger <span class="keyword">import</span> WS, POS, NER</span><br><span class="line">ckipt_data = <span class="string">'ckip'</span> <span class="comment"># ckip pre-training path</span></span><br><span class="line">doc = <span class="string">'重判12年又加保3億，法官怕中電前董周麗真逃亡。'</span></span><br><span class="line">ws = WS(ckipt_data)</span><br><span class="line">pos = POS(ckipt_data)</span><br><span class="line">ner = NER(ckipt_data)</span><br><span class="line">word_s = ws([doc],</span><br><span class="line">            sentence_segmentation=<span class="literal">True</span>,</span><br><span class="line">            segment_delimiter_set=&#123;</span><br><span class="line">                <span class="string">'?'</span>, <span class="string">'？'</span>, <span class="string">'!'</span>, <span class="string">'！'</span>, <span class="string">'。'</span>,</span><br><span class="line">                <span class="string">','</span>,<span class="string">'，'</span>, <span class="string">';'</span>, <span class="string">':'</span>, <span class="string">'、'</span>&#125;)</span><br><span class="line">word_p = pos(word_s)</span><br><span class="line">word_n = ner(word_s, word_p)</span><br><span class="line">namelist = set([e[<span class="number">3</span>] <span class="keyword">for</span> e <span class="keyword">in</span> word_n[<span class="number">0</span>] <span class="keyword">if</span> e[<span class="number">2</span>] == <span class="string">'PERSON'</span>])</span><br><span class="line"></span><br><span class="line">print(namelist) <span class="comment"># &#123;'周麗真'&#125;</span></span><br></pre></td></tr></table></figure></p><p>至此，一個不太精確的標記系統已經完成了，<br>此比賽模型也已經有了一個雛型。<br>接下來就講講如何把他接上 API，提供服務給外界使用。</p><h2 id="服務建置-Service"><a href="#服務建置-Service" class="headerlink" title="服務建置 Service"></a>服務建置 Service</h2><p>主辦單位提供了 Azure 雲端給我們使用，<br>主要有用的東西除了一個 Ubuntu 可以使用外，還有 K80 的 GPU 及一個 IP。</p><p>不過原則上還是自己配的環境好用些。</p><h3 id="flask"><a href="#flask" class="headerlink" title="flask"></a>flask</h3><p>主辦單位提供了一個簡易的 flask 模板給我們使用。<br>裡面有強調一點，回傳的 encoding 必須為 UTF-8，<br>只要在 <code>app.run</code> 前更改一下 flask 的 config 即可：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.config[<span class="string">'JSON_AS_ASCII'</span>] = <span class="literal">False</span></span><br></pre></td></tr></table></figure></p><p>API call 分作兩個部份 health check 和 inference，<br>health check 主要在確認 service availability，而 inference 主要是負責答案的判定。</p><p>health check:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/healthcheck', methods=['POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">healthcheck</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">""" API for health check """</span></span><br><span class="line">    data = request.get_json(force=<span class="literal">True</span>)</span><br><span class="line">    print(data)</span><br><span class="line">    t = datetime.datetime.now()</span><br><span class="line">    ts = str(int(t.utcnow().timestamp()))</span><br><span class="line">    server_uuid = generate_server_uuid(CAPTAIN_EMAIL+ts)</span><br><span class="line">    server_timestamp = t.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>)</span><br><span class="line">    <span class="keyword">return</span> jsonify(&#123;</span><br><span class="line">       <span class="string">'esun_uuid'</span>: data[<span class="string">'esun_uuid'</span>],</span><br><span class="line">       <span class="string">'server_uuid'</span>: server_uuid,</span><br><span class="line">       <span class="string">'captain_email'</span>: CAPTAIN_EMAIL,</span><br><span class="line">       <span class="string">'server_timestamp'</span>: server_timestamp</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure></p><p>inference:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">answer_cache = &#123;&#125;</span><br><span class="line"><span class="meta">@app.route('/inference', methods=['POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inference</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">""" API that return your model predictions when E.SUN calls this API """</span></span><br><span class="line">    data = request.get_json(force=<span class="literal">True</span>)</span><br><span class="line">    esun_timestamp = data[<span class="string">'esun_timestamp'</span>] <span class="comment">#自行取用</span></span><br><span class="line">    server_timestamp = datetime.datetime.now().strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>)</span><br><span class="line"></span><br><span class="line">    ts = str(int(datetime.datetime.now().utcnow().timestamp()))</span><br><span class="line">    server_uuid = generate_server_uuid(CAPTAIN_EMAIL+ts)</span><br><span class="line"></span><br><span class="line">    answer_template = <span class="keyword">lambda</span> ans: jsonify(&#123;</span><br><span class="line">            <span class="string">'esun_timestamp'</span>: data[<span class="string">'esun_timestamp'</span>],</span><br><span class="line">            <span class="string">'server_uuid'</span>: server_uuid,</span><br><span class="line">            <span class="string">'answer'</span>: ans,</span><br><span class="line">            <span class="string">'server_timestamp'</span>: server_timestamp,</span><br><span class="line">            <span class="string">'esun_uuid'</span>: data[<span class="string">'esun_uuid'</span>]</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> data[<span class="string">'esun_uuid'</span>] <span class="keyword">in</span> cache_answer:</span><br><span class="line">        <span class="keyword">if</span> cache_answer[data[<span class="string">'esun_uuid'</span>]] != <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> answer_template(cache_answer[data[<span class="string">'esun_uuid'</span>]])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">while</span> cache_answer[data[<span class="string">'esun_uuid'</span>]] == <span class="literal">None</span>:</span><br><span class="line">                sleep(<span class="number">4</span>)</span><br><span class="line">            <span class="keyword">return</span> answer_template(cache_answer[data[<span class="string">'esun_uuid'</span>]])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        cache_answer[data[<span class="string">'esun_uuid'</span>]] = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            log(data[<span class="string">'news'</span>])</span><br><span class="line">            answer = predict(data[<span class="string">'news'</span>])</span><br><span class="line">            log(answer)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            log(<span class="string">'model error'</span>)</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'Model error.'</span>)</span><br><span class="line"></span><br><span class="line">        cache_answer[data[<span class="string">'esun_uuid'</span>]] = answer</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> answer_template(answer)</span><br></pre></td></tr></table></figure></p><p>從上面的 code 可以發現，我們在 inference 做了 cache，<br>原因是一個 inference 時間上限為五秒，逾時就會重新發 request 過來，次數上限為三次。</p><p>為了避免逾時而重複 inference，所以我們做了 cache。<br>不過 inference 通常滿快的，一兩秒內就可以算完了。</p><h3 id="static-IP"><a href="#static-IP" class="headerlink" title="static IP"></a>static IP</h3><p>Azure 對外不開放 80 和 443 以外的 port，所以原則上把服務開在其中一個 port 即可。</p><p>那如果手上有比較好的顯卡，覺得 K80 跑得太慢，但該電腦又沒有固定 IP 的話怎麼辦呢？</p><p>這時可以使用 ssh port forwarding 的功能，forwarding 分作兩種，正向代理和反向代理。正向代理是將伺服器端的 port forward 到我們的電腦上，所以我們可以把伺服器端的服務拿到我們客戶端的 port 來用。反過來想，今天我們是要把我們客戶端提供的服務放到伺服器上，所以用的是反向代理，假設我們把 flask 開在 8080 port 上，那只要 forward 到伺服器的 80 port 上，那外面的人只要用 http protocol 瀏覽伺服器的 IP 位置即可。</p><p>值得注意的一點是，<code>/etc/ssh/sshd_config</code> 裡面的 <code>AllowTcpForwarding</code> 必須是 <code>yes</code>，才可以 forward。<br>剛改完記得要重啟 ssh server。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart sshd.service</span><br></pre></td></tr></table></figure><p>然後因為 ssh 容易掉，我這邊使用 autossh 讓他自動重連就穩多了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">autossh -M 20000 -i ~/.ssh/id_rsa -NfR  :8080:localhost:8080 user@azure</span><br><span class="line"># foward local 8080 to remote 8080</span><br></pre></td></tr></table></figure><p>可以看到，我將本機端的 8080 port forward 到遠端的 8080 port，<br>因為遠端的 80 port 需要 root 權限，但有時 ssh 會關掉 root 遠端登入（只允許 console）。<br>所以這邊可以透過 <a href="https://github.com/vinodpandey/python-port-forward" target="_blank" rel="noopener">python-port-forward</a>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo python2.7 port-forward.py 80:localhost:8080</span><br></pre></td></tr></table></figure><p>將 8080 port 再 forward 到 80 port，我們就可以使用 azure 的 IP 了。</p><p>原則上有靜態 IP，有 ssh 的 server 都可以使用 forwading，<br>像這次比賽基本上都是由家中 NAS 提供服務。</p><h3 id="slack"><a href="#slack" class="headerlink" title="slack"></a>slack</h3><p>前置作業都完成後，只要把 web hook 掛給官方提供的 slack bot 即可。之後比賽他就會去戳你給的 IP address 了。</p><p><img src="https://i.imgur.com/0cjPF0C.png" alt></p><p>到這邊，已經可以開始拿做好的東西打一場比賽了。<br>接下來讓我們繼續把 model 調得更好！</p><h2 id="基本模型-Basic-Model"><a href="#基本模型-Basic-Model" class="headerlink" title="基本模型 Basic Model"></a>基本模型 Basic Model</h2><h3 id="Logistic-Regression-SVM-and-XGBoost"><a href="#Logistic-Regression-SVM-and-XGBoost" class="headerlink" title="Logistic Regression, SVM and XGBoost"></a>Logistic Regression, SVM and XGBoost</h3><p>前面提到的 classifier 作法相對簡單，而準確度有待加強。<br>直接拿所有 AML 文章相似度排名取 threshold 分類還是太粗糙。</p><p>這裡我們使用 sklearn 裡面一些比較正式一點的分類器，<br>用剛剛做出來的 bm25 + w2v feature 表示一篇文章拿來做分類。<br>詳細教學可以參考 <a href="https://zhuanlan.zhihu.com/p/50657430" target="_blank" rel="noopener">這篇文章</a>。</p><p>我們嘗試了三種分類器：LogisticRegression（羅吉斯回歸），SVC （SVM 分類器）還有 XGBoost。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">clf = LogisticRegression(C=<span class="number">1.0</span>,solver=<span class="string">'lbfgs'</span>,multi_class=<span class="string">'multinomial'</span>)</span><br><span class="line">clf.fit(xtrain_tfv, ytrain)</span><br><span class="line">predictions = clf.predict_proba(xvalid_tfv)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">clf = SVC(C=<span class="number">1.0</span>, probability=<span class="literal">True</span>) <span class="comment"># since we need probabilities</span></span><br><span class="line">clf.fit(xtrain_svd_scl, ytrain)</span><br><span class="line">predictions = clf.predict_proba(xvalid_svd_scl)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">clf = xgb.XGBClassifier(max_depth=<span class="number">7</span>, n_estimators=<span class="number">200</span>, colsample_bytree=<span class="number">0.8</span>,</span><br><span class="line">                        subsample=<span class="number">0.8</span>, nthread=<span class="number">10</span>, learning_rate=<span class="number">0.1</span>)</span><br><span class="line">clf.fit(xtrain_tfv.tocsc(), ytrain)</span><br><span class="line">predictions = clf.predict_proba(xvalid_tfv.tocsc())</span><br></pre></td></tr></table></figure><p>這裡 classifier 的準確率來到了 88% 到 90% ，而大樂透類的新聞也被準確歸類了。</p><h4 id="BM25-XGBoost-as-classifier"><a href="#BM25-XGBoost-as-classifier" class="headerlink" title="BM25 + XGBoost as classifier"></a>BM25 + XGBoost as classifier</h4><p>經由測試，XGBoost 的效果是最好的，於是我們就把 classifier 換成 XGBoost。</p><h4 id="NN-model-ckip-XGBoost-rule-based-as-extractor-NER"><a href="#NN-model-ckip-XGBoost-rule-based-as-extractor-NER" class="headerlink" title="NN model (ckip) + XGBoost + rule based as extractor (NER)"></a>NN model (ckip) + XGBoost + rule based as extractor (NER)</h4><p>另外，因為比賽要求是要有 AML 犯罪相關事實的嫌疑人，所以原先採取的把所有人名都噴出來的作法或許可以再細緻化。這裡我們將一個人名前後五個 token 的 BM25 分數加起來丟給 XGBoost 去分類，接著再丟給一開始的 rule based 來優話我們的目標人名提取器。</p><h3 id="Neural-Network"><a href="#Neural-Network" class="headerlink" title="Neural Network"></a>Neural Network</h3><p>在資訊檢索的課程中，教授有提到 BERT 這個神器，但我們在之前的 project 並沒有嘗試。<br>相較於 IR Task 那種大量文本的處理，BERT 比較適合小文本的任務，<br>這次的比賽就是一個非常好的發揮空間，所以我們在此次比賽也開始了對 BERT 的初次嘗試。</p><p>因為先前傳統機器學習方法如 BM25, TF 之類的是用 one-hot encoding 的方法，存在特徵稀疏的問題，word embedding 相應而生。他將一個詞映射到一個低維稠密的語義空間，使相似詞可以共享上下文資訊，提升泛化能力。深度學習在近幾年來快速發展，像是前面提到的 word2vector 還有後面開源的 ckip 斷詞工具都有利用到 word embedding。這類工具主要架構大多是用 unsupervised learning 訓練每一個詞的 word embedding，這其實就是在做一個特徵提取的動作，<br>接著再確定想要的任務，例如 ckip 的斷詞或是詞性標記、NER 等，使用先前訓練出來的 embedding 作為表達式，再做一次 supervised learning 讓他更加確定需要的上下文關係，來建立最終的 Model。</p><p>根據這種模式，近幾年來發展出了像是 ELMo、OpenAI 的 GPT、Google 的 BERT 及一堆他的變形、其他像是 CMU 的 XLNet 等。訓練 word embedding 從一開始的 RNN 到 LSTM 最後到 Attention，更多原理細節可以參考 <a href="https://www.jishuwen.com/d/2M6u/zh-tw" target="_blank" rel="noopener">這一篇介紹</a>。</p><p>我們在測試賽之前嘗試使用 BERT 建立一個新的 classifier，準確度有大幅的提昇。</p><h4 id="NN-model-BERT-as-classifier"><a href="#NN-model-BERT-as-classifier" class="headerlink" title="NN model (BERT) as classifier"></a>NN model (BERT) as classifier</h4><p>BERT 的使用也相當容易，python 有一個集 NLP 大成的套件庫叫做 <code>transformers</code>，<br>裡面不僅有 BERT， 也有 XLNet 等 model 。</p><p>要下載 BERT 的 pre-training 相當容易，只要把填好 pre-training 的名稱，<br>他跑下去發現沒有的話，就會自己去載了。</p><p>至於有哪些 pre-training，除了上網 Google 外，基本上可以來 <a href="https://huggingface.co/models" target="_blank" rel="noopener">hugface 的網站</a> 上面找，<br>因為此次是中文的比賽，所以我們使用了最基本款 <code>bert-base-chinese</code> 即可。</p><p>基本上 BERT 的使用細節都可以透過這篇 <a href="https://leemeng.tw/attack_on_bert_transfer_learning_in_nlp.html" target="_blank" rel="noopener">教學文</a> 學到，裡面也有範例程式碼，學習起來算是相當的容易。</p><p>BERT 提供了四大下游任務（就是四個 supervised 的 NN Model），我們可以根據我們的需求，<br>選用適合的任務模型來使用。關於更詳細的四大任務介紹可以參考這篇 <a href="https://zhuanlan.zhihu.com/p/102208639" target="_blank" rel="noopener">知乎專欄</a></p><ul><li>BertForSequenceClassification：下圖的 (a) 和 (b)，只差在一個 <code>[SEP]</code>，可以用作分類。</li><li>BertForMultipleChoice：根據問題，可以從多個選項中選擇一個最佳的答案。</li><li>BertForQuestionAnswering：下圖 (c)，用作閱讀理解，可以根據問題標出文章中的答案。</li><li>BertForTokenClassification：下圖 (d)，可以為每個 token 做分類，適用於 NER 任務等標記。</li></ul><p><img src="https://pic2.zhimg.com/80/v2-c101ddc3b2f4dbd3dc20999f900c71ba_720w.jpg" alt="BERT 四大任務"></p><p>根據需求，我們使用了 BertForSequenceClassification 做了對單個篇新聞的分類（AML &amp; non-AML），但受限於 BERT 512 的 token size 限制，我們取了文章最後的 510 個 token 丟進 model 。</p><p>在 validation data 上的分類準確度從剛才的 90% 直接來到了 99% 。</p><p>一個比較基本可以用的 AML 犯罪名單提取系統已經差不多了。<br>時間也來到了測試賽。</p><blockquote><p>測試賽開始：<br>測試賽僅僅提供測試 server 的穩定度，<br>並沒有提供題目正確答案和分數。</p></blockquote><h2 id="進階模型-Advenced-Model"><a href="#進階模型-Advenced-Model" class="headerlink" title="進階模型 Advenced Model"></a>進階模型 Advenced Model</h2><p>藉由 BERT，我們的 Model 來到了一個嶄新的境界，<br>想必剛剛各位也有留意到，BERT 也有提供 NER 的任務訓練，<br>而 ckip 的 NER 是用在廣泛用途的，那何不用 BERT 自己也 train 一個呢？</p><h3 id="Make-our-NER"><a href="#Make-our-NER" class="headerlink" title="Make our NER"></a>Make our NER</h3><p>根據主辦單位的標記資料，每一篇 AML 文章都有對應的人名集合。</p><p>要把資料輸進 BERT 做 NER 還需要把每個 token 做標記。<br>這邊我們根據 <a href="https://en.wikipedia.org/wiki/Inside%E2%80%93outside%E2%80%93beginning_(tagging" target="_blank" rel="noopener">IOB format</a>)，只要把目標人名用 <code>B-PER</code>, <code>I-PER</code> 標起來即可。</p><p>首先我們先用 BERT 載入 <code>bert-base-chinese</code>，使用他的 tokenizer 為每篇 AML 新聞做 tokenization。</p><p>接著根據幫匹配的人名標上標記，其餘的標上 <code>O</code> 即可。</p><p>只要寫個小小的 script 轉換完資料，<br>接著使用 BertForTokenClassification 就可以開始愉快的 train NER 囉！</p><h4 id="NN-model-BERT-as-extractor-NER"><a href="#NN-model-BERT-as-extractor-NER" class="headerlink" title="NN model (BERT) as extractor (NER)"></a>NN model (BERT) as extractor (NER)</h4><p>蠻出乎意料之外的一點是，可能是僅僅標記 AML 目標人物的關係，<br>NER 出來的結果似乎就有了簡單的分類能力，可以避開一些非 AML 相關的人名。<br>所以我們使用 BERT NER 抓出來的結果就不丟進 XGBoost 做分類過濾了。</p><p>到這裡，基本的模型已經構建完畢，這就是我們進行正式賽的 Model。</p><blockquote><p>正式賽分作兩週，共八天。<br>正式賽第一周開始：<br>我們在這週的排名第一天在第四，<br>之後又掉到了五和六。</p></blockquote><h3 id="Extend-The-DataSet"><a href="#Extend-The-DataSet" class="headerlink" title="Extend The DataSet"></a>Extend The DataSet</h3><h4 id="Reuse-The-IR-Model"><a href="#Reuse-The-IR-Model" class="headerlink" title="Reuse The IR Model"></a>Reuse The IR Model</h4><p>第一周結束的假日，我們用之前的 IR model 將主辦單位標記的三百多篇 AML 新聞當作 query，檢索回相關新聞，並標記了一千五百篇 AML 相關新聞加入 corpus。</p><blockquote><p>正式賽第二周開始：<br>我們成功爬回了四而隔天又掉回了五，<br>加入一千五百篇的資料似乎有一點提昇。<br>不過 model 似乎還要再加強一下，<br>所以我們決定嘗試其他的 Model。</p></blockquote><h3 id="Try-other-NN-Model"><a href="#Try-other-NN-Model" class="headerlink" title="Try other NN Model"></a>Try other NN Model</h3><p>我們又嘗試了其他 Model，像是 XLNet, RoBERTa, Albert 等，<br>不過效果似乎並沒有很大的提昇，不知道是不是用法錯誤（比如 XLNet 的 Mask 是 <code>&lt;sep&gt;</code> 而不是 <code>[SEP]</code>），<br>只有 RoBERTa 在 classifier 的表現上的結果有好一些。</p><h4 id="NN-model-RoBERTa-as-classifier"><a href="#NN-model-RoBERTa-as-classifier" class="headerlink" title="NN model (RoBERTa) as classifier"></a>NN model (RoBERTa) as classifier</h4><p>最後，經由測試，我們將前幾天的 query 當作 validation set，<br>RoBERTa 的準確度從 96% 上到 97%，RoBERTa 的 classifier 似乎有變好，<br>於是我們將 classifier 換成 RoBERTa。</p><blockquote><p>由於主辦單位不小心把第七天的 query 送成前一天的，故第七天沒有列入計算。<br>可能是 RoBERTa 的表現加上 1500 的標記資料生效了，最後一天我們的成績跑進了第三名。<br>至此，整個賽程結束。<br>因為我本身的研究領域不是 NLP，加上時間因素，能有這樣的成績已經是相當幸運了。<br>三個禮拜衝刺也到了一段落了 :)</p></blockquote><h2 id="其他-Others"><a href="#其他-Others" class="headerlink" title="其他 Others"></a>其他 Others</h2><p>除了先前的嘗試，其實我們也有想到一些增強 model 的方法，<br>不過礙於時間關係，我們沒來得及做這些嘗試。</p><h3 id="evoluationary-computation"><a href="#evoluationary-computation" class="headerlink" title="evoluationary computation"></a>evoluationary computation</h3><p>我們在嘗試前面的 Model 時，有嘗試用演化計算來調整參數。<br>不過後來 Model 都轉移到 NN 上，我們在傳統機器學習方法上就沒再做更多嘗試了。<br>其實演化計算的應用很廣，或許可以應用在現在 Model 的參數微調上。</p><h3 id="other-models"><a href="#other-models" class="headerlink" title="other models"></a>other models</h3><p>其實我們覺得我們 XLNet 以及其他 model 的使用可能不是很正確，所以效果才沒有上來。<br>礙於時間因素及現有其他 model 的網路資源較為缺乏，我們沒來得及做更多嘗試。</p><p>或許存在著更棒的 model 也說不定。</p><h3 id="improve-the-pre-training-model"><a href="#improve-the-pre-training-model" class="headerlink" title="improve the pre-training model"></a>improve the pre-training model</h3><p>拿將新聞 corpus 繼續做 pre-training 的 unsupervised learning，<br>應該可以加強 pre-training domain specific 的能力，效果也可能因此提昇。</p><h3 id="expand-the-data"><a href="#expand-the-data" class="headerlink" title="expand the data"></a>expand the data</h3><p>NER 的部份，也可以將一千五百篇的人名做標記，如此 NER 的效果可能會提昇一些。</p><h3 id="data-augmentation"><a href="#data-augmentation" class="headerlink" title="data augmentation"></a>data augmentation</h3><p>跟圖片一樣，NLP 的分類也可以使用 augmentation，<br>這似乎也是一個研究的方向：<a href="https://github.com/zhanlaoban/EDA_NLP_for_Chinese" target="_blank" rel="noopener">一個中文數據增強的實現</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;
暑假花了一點時間和同學做起來的 project，來場經驗分享吧！
&lt;/center&gt;
    
    </summary>
    
      <category term="Note" scheme="http://nobodyzxc.github.io/categories/Note/"/>
    
    
  </entry>
  
  <entry>
    <title>散人</title>
    <link href="http://nobodyzxc.github.io/2020/07/28/nobody/"/>
    <id>http://nobodyzxc.github.io/2020/07/28/nobody/</id>
    <published>2020-07-27T16:49:13.000Z</published>
    <updated>2020-08-16T12:11:40.365Z</updated>
    
    <content type="html"><![CDATA[<center>一年了，這邊也該動動筆了。<br>那就紀錄一下發生了什麼事情吧。</center><a id="more"></a><p>該從哪裡追敘呢？<br>那就從大學畢業說起吧。</p><h2 id="May-amp-June-2019"><a href="#May-amp-June-2019" class="headerlink" title="May &amp; June, 2019"></a>May &amp; June, 2019</h2><p>完成最後一學期的課，也拉了兩個好朋友參加了畢業典禮。</p><p>我的室友兼學伴（笑）也幫我拍了許多畢業照。</p><p>最後一學期的課大概是四年來修得最爽的了吧，修了 CG, CV, DL，<br>雖然 CV 修得不甚扎實，CG 也修得水水的，<br>但三門課的 final 都用 DL 的 colorization 做掉，<br>感覺滿有成就感的。雖然只是把別人的 U-net 載下來加上 ResNet 而已。<br>但整個配環境和怒 Train 的過程也是相當寶貴的經驗。</p><p>為了這三門課的 final，還配了一台新的桌機，<br>i7 + 16G RAM + 1T SSD，配了張二手的 1080Ti，花了老爸四萬多（GPU 佔了一半錢</p><p>（這個記在帳上…）</p><p>也算是為了升研究所一次總升級吧，畢竟比起其他同學，<br>我是一台 ASUS 筆電撐四年，也算是沒有特別花到什麼錢了。</p><p>GPU 的錢就用 AI 比賽慢慢賺回來吧（？）</p><p>記得開始怒 Train 沒多久，Tom 擔任助教的課（hhh 教授的演算法）邀請了網路黑貓來演講，我沒事的話，習慣性會去旁聽那門課，於是就這樣和黑貓大有了一面之緣。演講結束後，我還在跟同學討論說 GPU 會不會燒掉時，黑貓大聽到後還向我掛了保證儘管用 XD，因為 GPU 會自己調節降溫。</p><p>WSM 應該是我所有課程裡面收穫最多的，果然 mftsai 老師的課就是讚，兩門基礎程式設計課也是難忘。</p><p>他的課有趣，作業也很有得發揮，考試準備起來也頗有成就感，最後就是他分數也很敢給。</p><p>我大學生涯裡的唯一一次滿分就是他給的，其他兩門還有九十七及九十九，<br>不過比起分數，更重要的是 Vim, Linux 宗教，也是他傳給我的，受益無盡。</p><p>教授可以算是在工具使用上的貴人吧，如果我有一絲一毫的 geek 氣質都得拜他所賜。<br>不知道他最後有沒有曉得，每個禮拜陪我來旁聽的同學其實是我爸呢 XD</p><p>WSM 的 final 也是最後神翻轉，第一個報告的（分數最低的那組），最後竟然會變成最高分的 XD</p><p>最後還有兩位我很感謝的教授，這三位教授應該能算是我在大學時期的三個貴人。<br>（其實還有個隱藏版的 ccc 教授、資管系的 yuf 教授、台大電機的江教授，可惜我跟他們修的課少，<br>那裡學到的東西也相對不多，我的研究能力也不夠強，沒辦法做出什麼東西）</p><p>ck 教授帶我看到了更廣大的世界，接觸了函數式的美，給了我難得的課程助教機會，還有一些區塊鏈相關的知識。從大一就有緣份去旁聽他的課，到後來受了他很多照顧，身為導師，他也給我相當多的關心。也因為他，我才有了機會去認識資管系那邊的教授。不過沒能做出什麼東西，我還是有點遺憾的。</p><p>mtchi 教授是我兩位好友的專題老師，因為我和其他兩個同學常常一起出現的緣故，他還邀請我去他們的導生聚，還笑著說我還真像他的導生。對於我而言，受益最多的課應該就是他的 system programming 吧，算是和我的領域相關，而其實也是他的遊戲課也把我們三個朋友聯繫在一起，也才有後來的 CG Lab 三劍客。</p><p>最後與同學的回憶，大概就是那個飯局吧。大一一進去就認識的 Allen，接著和 Tom 三個人成為飯友。接著認識 mingc、meijin，大神帶了我們兩個去比賽，那是我第一次開了眼界，也是第一次見到了所謂高手境界。之後拉入 jeffu, 我們六個人組了兩隊，看大神如何以一己之力和名校選手抗衡 XD 。最後認識了轉入的 binjin，他、meijin 和我成為了 CG Lab 的的三劍客。六個和我大學生活密切相關的同學，和我爸，我們一起吃了飯，為這段四年的緣份點上了一個不錯的段落。</p><p>喔對了，可能是卷哥提早畢業，然後卷二也沒修啥課，最後一學期的成績就這樣不小心被我拿了第一 XD</p><h2 id="July-amp-August"><a href="#July-amp-August" class="headerlink" title="July &amp; August"></a>July &amp; August</h2><p>離開了原本的學校，宿舍南遷，我在新宿舍待了兩個禮拜才去 Lab。這兩個禮拜在整理新的資料，主要是要延續 WSM 的 final，一個 NLP 的 IR 比賽，是關於新聞立場的檢索比賽。兩個禮拜的瘋狂下資料後，我來到了 plaslab，認識了新夥伴 rnic，以及 plas 其他的成員。沒待多久，我就前往台北參與開源人的盛事，COSCUP，rnic 還是 rust 議程的其中一位講者 XD。結束兩天的朝聖後，我就接著為期兩個禮拜的 flolac 了，聽了 yuf 教授和江教授的課，還認識了一位學弟 Nemo（也是大神一個 XD）。</p><p>回到學校後，開始去認識新環境的人們。和之前相比，這裡的高中同學多了許多，剛好四個和我同校，而三個在隔壁。發現其實大家大部分到最後都走到了資訊這一塊。隔壁動機系的同學之後要做 CV，資工系的要 DL，而化學系則是繼續他的研究（我有問是哪方面的，不過到現在也是忘了 55），同校的電機系同學是原生種，直接讀五年碩，目前也是做 DL model 的優化，而同為資工系的同學進的實驗室在做演算法，以後應該也是會做有關 DL 的方向。我們在 KFC 吃過了一餐，不過之後好像也沒什麼在聯絡了（</p><p>也遇到了一個國中小同學，目前是在做圖學相關的方向，不過可能是興趣的方向不同，之後上課也沒啥遇過了。</p><h2 id="September-to-January"><a href="#September-to-January" class="headerlink" title="September to January"></a>September to January</h2><p>學期初，跟著 rnic 一起修課，感覺課都滿硬的，修了計架、數值軟體、平行運算和正規語言。</p><p>計架和正規語言算是比較理論的課，而平行和數值算是比較實作的課程。</p><p>計架算是計組的延伸，除了回顧一些先前的知識，也介紹了滿多其他的東西。期末 paper reading 的部份，滿多組別都在介紹 FPGA 那些 AI 晶片，我們讀到的是一篇關於 Data Flow 的優化方式，也蠻有趣的。</p><p>正規語言在大學也有修過，不過這門課多了滿多證明的，修完了感覺自己還是不太會寫，正規還是很不扎實 XD。</p><p>數值軟體讓我真正接觸到了 python binding 的寫法還有一些會影響 performance 的小細節。我們使用 pybind11 來幫助 python 調用 cpp11 的 code。最後期末 project 我選了 SVM 當主題，不過沒時間也寫不出來，也就把這門課 drop 掉了（（</p><p>我在平行程式學了許多平行化的方法，像是大學已經接觸過的 threading，還有 OpenMP、OpenMPI、OpenCL 還有 CUDA。不過沒有接觸到 SIMD 感覺有點可惜。最後我們期末寫了關於 huffman encoding 和 decoding 的平行化。隔壁組則是寫了太鼓達人的 RL 平行化 XD</p><p>不過平行的遺憾很巧合地被補起來了。十月份的時候，剛好看到黑貓大大在元智大學有一場 Halide 的分享，那門課先教了我們 ARM 上 SIMD 的寫法，然後用自己的手機上運行 gemm。之後教了 Halide，發現他 SIMD, threading，tiling 什麼的全部幫我們做掉了，TVM 據說也是受 Halide 啟發而發展出來的，一套 Halide 打天下，感覺也是相當有趣的研究方向。最後在 lab 實作和回答問題，我和 rnic 還得到了兩塊板子，黑貓大大人實在太好了 XDD</p><p>兩週後，在學校餐廳還和他巧遇了，留下了一張合影 :)</p><p>TBC</p><h2 id="February-to-August"><a href="#February-to-August" class="headerlink" title="February to August"></a>February to August</h2><p>遇到高中同寢的學長。</p><p>資訊檢索比賽落幕。</p><p>TBC</p>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;
一年了，這邊也該動動筆了。&lt;br&gt;
那就紀錄一下發生了什麼事情吧。
&lt;/center&gt;
    
    </summary>
    
      <category term="Memoir" scheme="http://nobodyzxc.github.io/categories/Memoir/"/>
    
    
  </entry>
  
  <entry>
    <title>COSCUP&#39;19</title>
    <link href="http://nobodyzxc.github.io/2019/08/14/coscup19/"/>
    <id>http://nobodyzxc.github.io/2019/08/14/coscup19/</id>
    <published>2019-08-13T22:12:46.000Z</published>
    <updated>2020-08-16T12:11:10.358Z</updated>
    
    <content type="html"><![CDATA[<center>先來排個議程，或許可以把心得/筆記直接寫在本文。<br>排的結果依舊是...</center><a id="more"></a><h1 id="起手吐槽"><a href="#起手吐槽" class="headerlink" title="起手吐槽"></a>起手吐槽</h1><p>依舊是滿滿 PL 加一點 Block Chain… 說好的 AI 呢？</p><h1 id="COSCUP-DAY1"><a href="#COSCUP-DAY1" class="headerlink" title="COSCUP DAY1"></a>COSCUP DAY1</h1><h2 id="入場-開幕-amp-LINE-Open-Up"><a href="#入場-開幕-amp-LINE-Open-Up" class="headerlink" title="入場 開幕 &amp; LINE Open Up"></a>入場 開幕 &amp; LINE Open Up</h2><p>IB101 08:30 - 9:50 漢語</p><p>200 speaker, 2k participants.</p><p>Haskell Line API 等你開源 //<br>我發現 Hackage 上已經有了（</p><ul><li><a href="https://github.com/line/line-simple-beacon" target="_blank" rel="noopener">line-simple-beacon</a></li><li><a href="https://github.com/line/line-liff-starter" target="_blank" rel="noopener">line-liff-starter</a></li><li><a href="https://github.com/line/line-things-starter" target="_blank" rel="noopener">line-things-starter</a>, about IoT</li><li><a href="https://github.com/line/armeria" target="_blank" rel="noopener">line Armeria</a>, help you to build line service quickly</li></ul><h2 id="給-Web-工程師的-Rust-上手指南"><a href="#給-Web-工程師的-Rust-上手指南" class="headerlink" title="給 Web 工程師的 Rust 上手指南"></a>給 Web 工程師的 Rust 上手指南</h2><p>IB301 10:00 - 10:20 漢語</p><p>Rust 吉祥物 — 螃蟹。<br>picked up by Mozilla.<br>想填補系統級編程空白而發展 Rust — fast, safe, concurrent。</p><p>facebook libra - about currency, safty, transaction, wrote in Rust.</p><blockquote><p>議員(Denver Riggleman): <a href="https://www.zhihu.com/question/330065739/answer/753859054" target="_blank" rel="noopener">Why Rust?</a></p></blockquote><ul><li><p>Yew framewrok (rs -&gt; web asm)</p></li><li><p>iter callback like Ruby</p></li><li><p>type signature like Python</p></li><li><p>mcaro 寫 HTML — <code>html!{...}</code></p></li><li>side effect function with <code>!</code></li><li>last expression in function as return value, like Ruby</li></ul><h2 id="認識零知識證明"><a href="#認識零知識證明" class="headerlink" title="認識零知識證明"></a>認識零知識證明</h2><p>IB502 10:30 - 10:55 漢語</p><p>What is ZKPs 以阿里巴巴為例。</p><p>zk-SNARK</p><ul><li>zk - zero-knowledge</li><li>S - Succinct</li><li>N - Non-Interactive (consider network traffic)</li><li>AR - Arguments (should be large to prevet bf attack)</li><li>K - Knowledge</li></ul><p>Alice has P(x)<br>Bob has secret point s<br>Alice cal P(s) for Bob</p><p>The S:</p><p>Homomorphic Hidings</p><ul><li>for most x, E(x) is hard to find x</li><li>different outputs for differnent inputs</li><li>E(x + y) can be computed for E(x) and E(y)</li></ul><p>if x + y = 7<br>A publishes E(x), E(y)<br>B computes E(x + y) by E(x) and E(y)<br>B computes if E(x + y) == E(7)</p><p>KCA 規範對方的行為</p><ul><li>alpha-pair<br>A have (a, b), (a, alpha * a)<br>B have (a’, b’) =&gt; (gama * a’, gama * b’ = gama * alpha * a = alpha * a’)</li></ul><p><a href="https://medium.com/taipei-ethereum-meetup/%E6%B7%B1%E5%85%A5%E7%9E%AD%E8%A7%A3-zk-snarks-7a0187f399f1" target="_blank" rel="noopener">補充</a></p><p>QAD 問題轉換及簡化</p><p>The N:</p><p>CRS - public place for A to place things</p><ul><li>SNARKs<ul><li>pros: proof size, verification time</li></ul></li><li>STARKs<ul><li>pros: proof time</li><li>cons: proof size</li></ul></li><li>Bulletproofs（門羅幣使用）<ul><li>cons: proof time, verification time</li></ul></li></ul><h2 id="EWASM-VM-次世代的-Ethereum-Virtual-Machine"><a href="#EWASM-VM-次世代的-Ethereum-Virtual-Machine" class="headerlink" title="EWASM VM - 次世代的 Ethereum Virtual Machine"></a>EWASM VM - 次世代的 Ethereum Virtual Machine</h2><p>IB502 11:30 - 11:55 漢語</p><p>EVM recap</p><ul><li>stack-based</li><li>256 bit stack items</li><li>high level instructions<ul><li>SSTORE, SLOAD</li><li>SHA3</li><li>CALL, CREATE contract</li></ul></li><li>too far away from actual machine architecture</li><li>less language support (Vyper, Solidity)</li></ul><p>How about wasm (web assembly)?</p><ul><li>has locals(~= reg or mem)</li><li>only access top 3 items v.s. EVM’s 16 (property here!!)</li><li>support 32/64 bits</li><li>No high level instructions</li></ul><p>ewasm</p><ul><li>ewasm is subset of wasm</li><li>not support floating point number</li><li><strong>LIMITED</strong> imports and exports (wasm section)</li><li>inject byecode metering and has runtime metering</li></ul><p>Ethereum Environment Interface</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ewasm module &lt;= EEI =&gt; blockchain</span><br></pre></td></tr></table></figure><p>call some function by outer runtime environment</p><p>ewasm 透過 EEI 將一些 operation 交給外部的人</p><p>system contract</p><ul><li>compiled into <strong>wasm bytecode</strong></li><li>examples<ul><li>Byzantium precompiles<ul><li>sha256, rpiemd160</li></ul></li><li>Sentinel (verification and metering)</li></ul></li></ul><p>Sentinel contract</p><p>ewasm bytecode  =&gt; Sentinel =&gt; deployed on chain</p><ul><li>before contract deployment</li><li>reject non-ewasm bytecode (e.g. floating point)</li><li>insert metering statements</li></ul><p>EVM-C</p><p>開一個 EVM spec, 不同的 ethereum client 實作共用一個 Wasm VM</p><p>C =&gt; C langauge API</p><p>wasm engine</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">       ewasm bytecode</span><br><span class="line">             |</span><br><span class="line">             v</span><br><span class="line">          (parse)</span><br><span class="line">             |</span><br><span class="line">             v</span><br><span class="line">       ewasm module</span><br><span class="line">             |</span><br><span class="line">             v</span><br><span class="line">        (validate)</span><br><span class="line">             |</span><br><span class="line">             v</span><br><span class="line">   validated ewasm module</span><br><span class="line">             |</span><br><span class="line">             v</span><br><span class="line">(instantiate) e.g. aloc mem</span><br><span class="line">             |</span><br><span class="line">             v</span><br><span class="line">          deploy</span><br></pre></td></tr></table></figure><p>EVM issue</p><ul><li>storage model</li><li><p>ewasm = EVM 1.0 mirrored in wasm</p><ul><li>storage model is not compatible with rent</li></ul></li><li><p>performance</p></li><li><p>ewasm(64) BN128mul not better than EVMone(256) becuase bit operation</p><ul><li>solution: precompile</li></ul></li><li><p>price metering</p></li><li>basic block count</li><li>super block</li><li>upper bound</li></ul><p>speaker is from <a href="buidl.secondstate.io">buidl.secondstate.io</a></p><h2 id="關於生命週期的一點事兒-miss"><a href="#關於生命週期的一點事兒-miss" class="headerlink" title="關於生命週期的一點事兒 (miss)"></a>關於生命週期的一點事兒 (miss)</h2><p>IB301 11:30 - 11:50 漢語</p><h2 id="Serverless-Web-Service-in-Rust-miss"><a href="#Serverless-Web-Service-in-Rust-miss" class="headerlink" title="Serverless Web Service in Rust (miss)"></a>Serverless Web Service in Rust (miss)</h2><p>IB301 11:50 - 12:30 漢語</p><h2 id="『基礎建設』-建置-Tor-的匿名-onion-網站，並使用-Kubernetes-架構-miss"><a href="#『基礎建設』-建置-Tor-的匿名-onion-網站，並使用-Kubernetes-架構-miss" class="headerlink" title="『基礎建設』 建置 Tor 的匿名 .onion 網站，並使用 Kubernetes 架構 (miss)"></a>『基礎建設』 建置 Tor 的匿名 .onion 網站，並使用 Kubernetes 架構 (miss)</h2><p>E2-102 12:05 - 12:35 漢語</p><h2 id="Functional-Declarative-and-Modular-System-Environment-with-Nix-and-NixOS"><a href="#Functional-Declarative-and-Modular-System-Environment-with-Nix-and-NixOS" class="headerlink" title="Functional, Declarative and Modular System Environment with Nix and NixOS"></a>Functional, Declarative and Modular System Environment <br>with Nix and NixOS</h2><p>IB503 13:20 - 13:50 漢語</p><p>GNU related Project <a href="https://en.wikipedia.org/wiki/GNU_Guix" target="_blank" rel="noopener">GNU Guix</a></p><p>九月份 functional thursday 會有 Nix 相關主題。</p><p>speaker(@zetavg) touched the nixos from 35th chaos communication congress</p><p><a href="https://bit.ly/nix-2019" target="_blank" rel="noopener">presentation</a></p><p>Software Deployment Problems</p><blockquote><p>The purely functional software deployment model by Nix author</p></blockquote><p>Nix:</p><ul><li>Nix is package manager<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#purelyFunctional #immutable #declartive #lazy #garbageCollator</span><br></pre></td></tr></table></figure></li></ul><p>Nix Store:</p><ul><li>pkg should not depend on global system stuff<br>ruby &lt;- /usr/lib/libssl.so (x)<br>ruby &lt;- nix-libssl-pkg (v)</li></ul><p>Nix Lang:</p><ul><li>produce derivation</li><li>take package as variable in the Nix Lang</li><li>there exists dependencies between the variables</li></ul><p>Nix OS:</p><ul><li>pkg, kernel, config… are built by Nix<br>whole system in the Nix Store</li></ul><p>Nix Env:</p><ul><li>can switch generations after installation stages</li></ul><p>Nix Shell:</p><ul><li>a nix tool for Developer</li></ul><p>More:</p><ul><li>cachix: Nix binary cache(precompile binary)</li><li>Hydra: nix build farm</li><li>NixOps: declaratively deploy infrastructures</li></ul><p>9/5 f4 at Mozilla 信義區辦公室<br>Nix Pills <a href="https://nixos.org/nixos/nix-pills" target="_blank" rel="noopener">https://nixos.org/nixos/nix-pills</a></p><h2 id="Build-a-Minimalist-Partially-C99-compliant-Compiler-for-Real-world-Targets-miss"><a href="#Build-a-Minimalist-Partially-C99-compliant-Compiler-for-Real-world-Targets-miss" class="headerlink" title="Build a Minimalist Partially C99-compliant Compiler for Real-world Targets (miss)"></a>Build a Minimalist Partially C99-compliant Compiler <br>for Real-world Targets (miss)</h2><p>IB201 13:20 - 13:45 漢語</p><h2 id="Cuju-虛擬機容錯功能實作"><a href="#Cuju-虛擬機容錯功能實作" class="headerlink" title="Cuju - 虛擬機容錯功能實作"></a>Cuju - 虛擬機容錯功能實作</h2><p>IB201 13:50 - 14:35 漢語</p><p>Too hard to take note.</p><p><a href="https://cuju-ft.github.io/cuju-web/home.html" target="_blank" rel="noopener">project page</a></p><p>效能等級和 VM Ware 差不多？！</p><h2 id="用剖析表達文法-PEG-實作一套程式語言-parser"><a href="#用剖析表達文法-PEG-實作一套程式語言-parser" class="headerlink" title="用剖析表達文法 PEG 實作一套程式語言 parser"></a>用剖析表達文法 PEG 實作一套程式語言 parser</h2><p>IB301 14:30 - 15:10 漢語</p><p>understanding computation: from simple machines to impossible programs</p><blockquote><p>pl parser, regex parser with treetop, which is a PEG parser</p></blockquote><p>PEG, 2004, Bryan Ford - parsing Expression Grammars: A Recognition-Based Syntatic Foundation</p><blockquote><p>a replacement to chomsky language, by removing the ambiguity in grammer</p></blockquote><p>the ambiguity is useful in modeling natural language, but not in precise and unambiguous programming language</p><p>basic rule:</p><ul><li>replace <code>|</code> in CFG with <code>/</code></li></ul><p>operators</p><ul><li><code>&quot;&quot;</code></li><li><code>[]</code></li><li><code>.</code></li><li><code>(e1 e2 ..)</code></li><li><code>e? e+ e*</code></li><li><code>&amp;e</code></li><li><code>!e</code></li><li><code>e1 e2</code></li><li><code>e1/e2</code> note the priority, different from CFG</li></ul><p>PEG dangling else<br>“if” COND “then” S1 “else” S2 / “if” COND “then” S1</p><blockquote><p>match the else first will solve the problem (CFG can’t)</p></blockquote><p>PEG is equivalent to Top Down programming language (TDPL)</p><p>PEG is not a lang but a parse impl spec.</p><p>PEG</p><blockquote><p>new, powerful than CFG, fast to parse small lang</p></blockquote><h2 id="用-Pandoc-撰寫學術文章"><a href="#用-Pandoc-撰寫學術文章" class="headerlink" title="用 Pandoc 撰寫學術文章"></a>用 Pandoc 撰寫學術文章</h2><p>IB503 15:30 - 16:00 漢語</p><p>是中文流利的外國人呢。<br>清大語言所的博士候選人（<br>學過 Python, Haskell（？！</p><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">文書處理器</th><th style="text-align:center">Latex</th></tr></thead><tbody><tr><td style="text-align:center">上手</td><td style="text-align:center">易</td><td style="text-align:center">難</td></tr><tr><td style="text-align:center">排版</td><td style="text-align:center">易跑</td><td style="text-align:center">專門</td></tr><tr><td style="text-align:center">文件</td><td style="text-align:center">短</td><td style="text-align:center">長</td></tr><tr><td style="text-align:center">模式</td><td style="text-align:center">編寫編排</td><td style="text-align:center">寫排分工</td></tr></tbody></table></div><p>why open source?</p><ul><li>open format<ul><li>easy to export, share</li></ul></li><li>fee, no license</li><li>customization</li></ul><blockquote><p>文科:只有肥宅才會用 LATEX 吧！（戰起來！！<br>沒，其實本貓也是文組的（</p></blockquote><p>以 markdown 取代 latex</p><ul><li>markdown is not program, formated text</li><li>can be compiled</li><li>source is human readable</li></ul><p>markdown dialect:</p><ul><li>pandoc markdown</li><li>commonmark</li><li>github-flavoured markdown</li></ul><p>what is PANDOC?</p><ul><li>轉換神器</li><li>柏克萊哲學系教授 john macfalane 所創</li><li>support latex, markdown</li><li>pdf docx html</li><li>reveal.js support ppt by markdown</li></ul><p>YAML metadata blocks<br>參考文獻可使用 bib(la)tex<br>corss-referencing<br>inline latex</p><p>biblography with pandoc (by pandoc-citeproc filter)<br>cross-reference (by pandoc-crossref filter)</p><p>pros:</p><ul><li>open source</li><li>raw text</li><li>git<ul><li>version control</li><li>collaboration</li></ul></li><li>bugless</li></ul><p>cons:</p><ul><li>learning time consuming</li><li>need latex sometimes</li><li>command line interface</li></ul><p><a href="https://pandoc.org/getting-started.html" target="_blank" rel="noopener">https://pandoc.org/getting-started.html</a><br><a href="https://pandocorg/MANUAL.html" target="_blank" rel="noopener">https://pandocorg/MANUAL.html</a></p><h2 id="17-直播從-0-到-1-之狼人殺-amp-5-years-Rust-amp-回顧-miss"><a href="#17-直播從-0-到-1-之狼人殺-amp-5-years-Rust-amp-回顧-miss" class="headerlink" title="17 直播從 0 到 1 之狼人殺 &amp; 5 years Rust &amp; 回顧 (miss)"></a>17 直播從 0 到 1 之狼人殺 &amp; 5 years Rust &amp; 回顧 (miss)</h2><p>IB101 16:10 - 16:40 漢語</p><h1 id="COSCUP-DAY2"><a href="#COSCUP-DAY2" class="headerlink" title="COSCUP DAY2"></a>COSCUP DAY2</h1><p>因為昨天施工挖斷電纜，所以換場地。</p><h2 id="本日摘要-amp-自己玩量子電腦程式"><a href="#本日摘要-amp-自己玩量子電腦程式" class="headerlink" title="本日摘要 &amp; 自己玩量子電腦程式"></a>本日摘要 &amp; 自己玩量子電腦程式</h2><p>IB101(TR313) 09:00 - 09:50 漢語</p><p>講者是第一屆總召（Google AI Quantum）。<br>現行計算稱為古典計算(classical computing)。</p><p>量子程式語言：IBM Qasm, M$ Qsharp</p><p>量子電腦應用場景：</p><ul><li>量子模擬<br> （氮固化，肥料製造用了世界 2% 電力，研究微生物為何消耗極少能量產生。）</li><li>優化<br> 求函數極低點，或許可用於計算能量消耗。</li><li>質因數分解<br> “How to factor 2048 bits rsa integers in 8 hours using 2 million noisy Qubits”<br> 量子電腦破解 RSA 加密（古典電腦需要宇宙時間）</li></ul><p>電子電腦需要 10mK（常溫 300K）環境下運作，所以需要放在冰箱。</p><p>現在發展的現況為幾十 Qbits。<br>Cirq — Google Python framwork for Quantum computation</p><p>N Gate (Not Gate)<br>H Gate 薛丁格的貓</p><p>如果前面放進一個 H Gate = (00, 11)</p><p>the quantum parity problem<br>classical -&gt; quantum<br>O(N) -&gt; O(1)<br>輸入輸出前各 apply 一排 H gate，最後觀察最後結果。</p><p>transportation of 1 quantum bit<br>qbit A 由於觀測後會塌陷，所以要拿 qbit B 之前，先將 qbit C 與 qbit B 糾纏，<br>然後用 B 與 A 糾纏後，將其結果拿給 C 運算即可得到 A 當初的態。</p><p>Q: 能解什麼問題？對目前 framwork 的看法，需不需要開發新語言？<br>A: 解的問題還在發展，美國正在培養相關人才，需要大量相關人才。量子運算與古典運算是互補的。</p><blockquote><p>重點是那個 H bit，模擬薛丁格的貓，他是一切算法的起手式。</p></blockquote><h2 id="懶惰鬼的函數式爬蟲"><a href="#懶惰鬼的函數式爬蟲" class="headerlink" title="懶惰鬼的函數式爬蟲"></a>懶惰鬼的函數式爬蟲</h2><p>IB101(TR313) 10:00 - 10:50 漢語</p><ul><li>functional/Haskell</li><li>blockchain/Tezos</li><li>general json crawler</li></ul><p>第三方服務共同特色</p><ul><li>大多提供 JSON API</li></ul><p>Tezos 三大特色：</p><ul><li>liquid proof-of-stack<br>動態決定驗證者/區塊創建者，由 token 持有者共同維護</li><li>formal verification<br>保證系統安全性</li><li>on chain government<br>由投票機制更改 protocol（第 999 和 2019 block 的 JSON 可能長得不一樣）</li></ul><p>Backing Soda<br>A Haskell crawler for Tezos</p><blockquote><p>講者：有實際寫過 DSL 或知道 DSL 的請舉手<br>我：寫 DSL（compiler or interpreter）太難了吧？！<br>    我只有寫過 GPL（</p></blockquote><p>Haskell 起手式：定義好資料結構<br>Formal program synthesis: deriving(Show, Read, Eq, …)</p><p>平行化：<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">main</span> = a `par` b `pseq` print (a + b)</span><br><span class="line">   <span class="keyword">where</span> a = fib <span class="number">42</span></span><br><span class="line">         b = fac <span class="number">42</span></span><br></pre></td></tr></table></figure></p><p>crawler</p><ul><li>存原始檔案<ul><li>不要相信第三方</li><li>減少第三方壓力</li><li>後續批次處理</li></ul></li></ul><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">TzBlock</span> = <span class="type">TB</span> &#123; <span class="title">level</span> :: <span class="type">Int</span> &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Crawler</span> a <span class="keyword">where</span></span></span><br><span class="line">   weed :: a</span><br><span class="line">   nextStep :: a -&gt; a</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Crawler</span> <span class="type">TzBlock</span> <span class="keyword">where</span></span></span><br><span class="line">   seed = <span class="type">TB</span> <span class="number">0</span></span><br><span class="line">   nextStep tb = <span class="type">TB</span> &#123; level = level tb + <span class="number">1</span> &#125;</span><br></pre></td></tr></table></figure><p>分析：JSON 對應 SQL 的 datatype</p><p>資料庫選擇：</p><ul><li>Haskell property<ul><li>type strong and ADT</li><li>easy to provide universal data store interface</li></ul></li><li>lib<ul><li>haskell-persistent</li><li>haskell-groundhog</li></ul></li></ul><p>General Database</p><ul><li>可選擇</li><li>放棄特有功能：e.g. postgres array tyep<br>Specific Database</li><li>比較好的效率</li></ul><h2 id="加強-Android-隱私的工具和技巧-miss"><a href="#加強-Android-隱私的工具和技巧-miss" class="headerlink" title="加強 Android 隱私的工具和技巧 (miss)"></a>加強 Android 隱私的工具和技巧 (miss)</h2><p>IB201(TR309) 10:50 - 11:20 漢語</p><hr><h2 id="gt-跑去吃飯，結果遇到在台大讀書的同學啊啊啊啊啊啊"><a href="#gt-跑去吃飯，結果遇到在台大讀書的同學啊啊啊啊啊啊" class="headerlink" title="&gt; 跑去吃飯，結果遇到在台大讀書的同學啊啊啊啊啊啊"></a>&gt; 跑去吃飯，結果遇到在台大讀書的同學啊啊啊啊啊啊</h2><h2 id="Instruction-Scheduling-in-LLVM"><a href="#Instruction-Scheduling-in-LLVM" class="headerlink" title="Instruction Scheduling in LLVM"></a>Instruction Scheduling in LLVM</h2><p>IB306(TR412-2) 11:40 - 12:25 漢語</p><ul><li>instro to instruction scheduling</li><li>LLVM scheduler</li><li>pipeline modeling</li><li>scheduler customization</li></ul><p>instruction scheduling</p><p>as a means of optimization</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">load x5 x8 @a   // 3 cycle time</span><br><span class="line">add x5 x5 x5    // 4th cycle time</span><br><span class="line">load x6 x8 @b</span><br><span class="line">mul x5 x5 x6</span><br></pre></td></tr></table></figure><blockquote><p>build dependency graph and sort from root, acc time length from first inst<br>scheduling with reverse order (from large acc number to smallest)</p></blockquote><p>instruction scheduling occuring on:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">instruction selection (DAG)</span><br><span class="line">           |</span><br><span class="line">           | scheduleDAGSDNodes</span><br><span class="line">           v</span><br><span class="line">          M-I</span><br><span class="line">           |</span><br><span class="line">           | scheduleDAGMILive</span><br><span class="line">           v</span><br><span class="line">   registor allocation</span><br><span class="line">           |</span><br><span class="line">           | schedulePOSTRATDList</span><br><span class="line">           v</span><br><span class="line">          M-I</span><br><span class="line">           |</span><br><span class="line">           v</span><br><span class="line">          ...</span><br></pre></td></tr></table></figure></p><p>Data Dependency Graph</p><ul><li>output depedency (if inst depend on same reg, they can not swap)</li><li>anti dependency</li><li>boundary not participate scheduling</li></ul><p>target description as a language to write pipeline</p><p>Customize Scheduling for Target</p><ul><li>define scheduling policy<br> implement overrideSchedPolicy</li><li>define scheduling strategy<br> derive MachineSchedStrategy (GenericScheduler)</li><li>add DAG mutations<br> implement ScheduleDAGMutation::apply</li></ul><p>reference:</p><ul><li>Engineering a Compiler（阿阿阿阿 這本我有啊）</li><li>LLVM Developers’ Meeting: “writing Great Machine Schedulers”</li></ul><h2 id="從-C-11-規格和-Template-Meta-Programming-的角度欣賞-Boost-對-atomic-和-memory-order-的支援"><a href="#從-C-11-規格和-Template-Meta-Programming-的角度欣賞-Boost-對-atomic-和-memory-order-的支援" class="headerlink" title="從 C++11 規格和 Template Meta-Programming 的角度欣賞 Boost 對 atomic 和 memory order 的支援"></a>從 C++11 規格和 Template Meta-Programming 的角度<br>欣賞 Boost 對 atomic 和 memory order 的支援</h2><p>E2-102(TR510) 12:40 - 13:10 漢語</p><p>what is memory order</p><ul><li>recorder</li><li>out-of-order</li></ul><p>compiler 會做 scheduling，所以 order 和 source code 可能會不一樣。<br>C++11 支援 memory order 可以給予開發者控制 order 的餘地。</p><ul><li>synchronization operations<br>在不同 thread 之間同步</li><li>atomic operation</li></ul><p>講者聲音有點小聲，然後講題於我有點陌生（</p><h2 id="在-21-世紀做自動微分？你需要-Zygote-jl！"><a href="#在-21-世紀做自動微分？你需要-Zygote-jl！" class="headerlink" title="在 21 世紀做自動微分？你需要 Zygote.jl！"></a>在 21 世紀做自動微分？你需要 Zygote.jl！</h2><p>IB501(TR413-1) 13:10 - 14:00 漢語</p><p>Wengert list</p><ul><li>a list of expression/instruction</li><li>transform the expression with derivative definintion</li></ul><p>how automatic differentiation work</p><ul><li>get the Wengert List of the expression</li><li>transform each instruction in the Wengert list</li><li>apply chain rule</li></ul><p>forward mode (適合 outputs &gt;&gt; inputs)</p><ul><li>dual number<br>reverse mode (適合 inputs &gt;&gt; outputs) (mostly DL situation)</li><li>tracker</li></ul><h2 id="野生的-Meta-Programming-出現了-miss"><a href="#野生的-Meta-Programming-出現了-miss" class="headerlink" title="野生的 Meta Programming 出現了 (miss)"></a>野生的 Meta Programming 出現了 (miss)</h2><p>IB301(TR310-1) 14:20 - 15:00 漢語</p><h2 id="Julia-語言設計與-JIT-編譯器"><a href="#Julia-語言設計與-JIT-編譯器" class="headerlink" title="Julia 語言設計與 JIT 編譯器"></a>Julia 語言設計與 JIT 編譯器</h2><p>IB501(TR413-1) 14:10 - 15:00 漢語</p><p>outline:</p><ul><li>type system</li><li>mulitple dispatch</li><li>generic program</li><li>meta programming</li><li>relection and introspection</li><li>JIT compiler</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">                   Any</span><br><span class="line">                    ^</span><br><span class="line">                    |</span><br><span class="line">                 subtype</span><br><span class="line">                    |</span><br><span class="line">                    |</span><br><span class="line">instance &lt;-- is-a --+--typeof--&gt; Datatype</span><br><span class="line">                    |</span><br><span class="line">                 subtype</span><br><span class="line">                    |</span><br><span class="line">                    v</span><br><span class="line">                  Union &#123;&#125;</span><br></pre></td></tr></table></figure><p>type system</p><ul><li>dynamic, similar to symbolic programming,<br>but can get staic component by some signature</li><li>set-theoretic type</li></ul><p>mulitple dispatch</p><ul><li>非獨有特色，其他語言也有</li><li>like overloading in Cpp</li></ul><p>generic programming</p><ul><li>parametric types and parametric method</li><li>Similar to multiple dispatch with parametric polymorphism</li><li>All types are first-class: can be dispatched and declared</li></ul><p>meta programming</p><ul><li>macro</li><li>generated function (julia 獨有)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@generated function foo(x)</span><br><span class="line">    Core.println(x) # x as a type</span><br><span class="line">    return :(x * x) # but return as a value(?)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">&gt; foo(5)</span><br><span class="line">Int64</span><br><span class="line">25</span><br><span class="line"></span><br><span class="line">&gt; foo(&quot;5&quot;)</span><br><span class="line">String</span><br><span class="line">&quot;55&quot;</span><br></pre></td></tr></table></figure><p>Function(name) &lt;&gt; Method(type signature, related to impl)<br>so, there exist function table and method table</p><p>function =&gt; generic function consisted of many methods</p><p>JIT =&gt; lookup compiled method (method cache),<br>if not exists, it will do specialize, compilation</p><p>meta programming interface</p><ul><li>AST<ul><li>access</li><li>modify</li></ul></li><li>Julia IR<ul><li>access</li><li>modify</li></ul></li><li>LLVM IR<ul><li>access</li><li>modify</li></ul></li><li>Machine code<ul><li>access</li><li>modify(indirect)</li></ul></li></ul><p>julia 是 hackable 的 compiler，<br>可以抽換掉一些中間的 compilation procedure，<br>跟上次 flolac’18 講的 racket 黑魔法有點像。</p><p><a href="https://yuehhua.github.io/slides/julia-language-design-jit-compiler" target="_blank" rel="noopener">presentation</a></p><h2 id="High-Level-GPU-Programming-with-Julia"><a href="#High-Level-GPU-Programming-with-Julia" class="headerlink" title="High-Level GPU Programming with Julia"></a>High-Level GPU Programming with Julia</h2><p>IB501(TR413-1) 15:10 - 16:00 漢語</p><p>for CUDA becuase the support for AMD is not enough</p><p>GPU for graphic drawing</p><ul><li>utilize the parallel structure</li><li>lots of threads running at the same time</li></ul><p>for GPU programming, most PL still inline cuda C</p><p>why julia</p><ul><li>high-lv PL with low-lv performance</li><li>provide first class array impl</li><li>good compiler design</li></ul><p>pkgs:</p><ul><li>CUDAnative.jl</li><li>CUDAdrv.jl</li><li>CuArrays.jl</li><li>GPUArrays.jl</li></ul><h2 id="lighting-talk-amp-close"><a href="#lighting-talk-amp-close" class="headerlink" title="lighting talk &amp; close"></a>lighting talk &amp; close</h2><p>IB101(TR313) 16:05 - 17:05</p><p>終於見識到本體了，真的很歡樂（</p>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;
先來排個議程，或許可以把心得/筆記直接寫在本文。&lt;br&gt;
排的結果依舊是...
&lt;/center&gt;
    
    </summary>
    
      <category term="Note" scheme="http://nobodyzxc.github.io/categories/Note/"/>
    
    
      <category term="coscup" scheme="http://nobodyzxc.github.io/tags/coscup/"/>
    
      <category term="opensource" scheme="http://nobodyzxc.github.io/tags/opensource/"/>
    
      <category term="conference" scheme="http://nobodyzxc.github.io/tags/conference/"/>
    
  </entry>
  
  <entry>
    <title>我所理解的 continuation</title>
    <link href="http://nobodyzxc.github.io/2019/08/10/continuation/"/>
    <id>http://nobodyzxc.github.io/2019/08/10/continuation/</id>
    <published>2019-08-10T01:41:46.000Z</published>
    <updated>2020-08-16T12:11:05.958Z</updated>
    
    <content type="html"><![CDATA[<center>對，就是那個 continuation。</center><link href="/files/scheme-syntax-patch.css" rel="stylesheet" type="text/css"><a id="more"></a><h1 id="About-Scheme"><a href="#About-Scheme" class="headerlink" title="About Scheme"></a>About Scheme</h1><p>學校 scheme 學了大半學期，continuation 這個詞估計同學連聽都沒聽過。</p><p>說到底我們學 scheme 也就是為了寫那個 eval/apply (mini scheme) 罷了，<br>頂多還有 oop 那個 vtable 而已（就是實作那個傳統 oo 的 message passing）。</p><p>用 scheme 寫 compiler 什麼的根本是夢想（艸<br>當初如果學的是 yscheme 的 p523(p423) 該有多好（<br>反正現在入坑還來得及（？</p><p>總結一下目前為止，除了老師的教材，我學習過的 scheme 資源好了。</p><ul><li><a href="https://sarabander.github.io/sicp/html/index.xhtml" target="_blank" rel="noopener">SICP</a></li><li><a href="https://deathking.github.io/yast-cn/" target="_blank" rel="noopener">Yet Another Scheme Tutorial</a></li><li><a href="https://scheme.com/tspl4" target="_blank" rel="noopener">The Scheme Programming Language</a></li></ul><p>其中在學校老師推薦的閱讀是 SICP，我讀完第一章就讀不下去了。<br>後來看到 yast，就先跳過去讀，第一次看到 continuation 就是在這裡，<br>還有 promise 之類的東西，才了解到原來 scheme 除了 S-expression 外，還有這麼多有趣的特性。</p><p>不過讀 yast 跳過了蠻多 macro 的部份，因為有許多內容是基於實作 (MIT Scheme) 的。<br>後來我就去寫我的 scheme interpreter in C， 雖然是個玩具，不過也玩了很久。</p><p>目前因為 Lab 同學介紹，我得知了 <a href="https://github.com/tiancaiamao/yscheme" target="_blank" rel="noopener">yscheme</a>，但在研究時發現自己對 syntax 還是不太熟，<br>所以又找了 tspl ，準備詳細地再學一次。</p><p>目前對於 Scheme 的計畫是 tspl &gt; yscheme &gt; SICP &gt; The Little Schemer（沒有官方版本，只有找到<a href="https://the-little-schemer.readthedocs.io/zh_CN/latest/commandments_and_rules.html" target="_blank" rel="noopener">筆記</a>）。<br>不過要完成大概需要很久吧（</p><p>此外，我來說一下我接觸過的 lisp 實作吧。</p><p>scheme:</p><ul><li><a href="https://www.gnu.org/software/guile/" target="_blank" rel="noopener">Guile</a> 出自 GNU ，強調其腳本結合性，可以寫 C/Cpp 去擴展它，編譯器前端還支持 JS, elisp, Lua。</li><li><a href="https://plt-scheme.org/" target="_blank" rel="noopener">Racket</a> 又稱 plt-scheme, DrScheme，其底下有一堆小語言，<a href="/2018/07/27/flolac18/#Talk-Racket">flolac’18</a> 有介紹，我寫作業用的 impl。</li><li><a href="https://www.biwascheme.org/" target="_blank" rel="noopener">BiwaScheme</a> JS 寫的，當初學校教學用的是這個的 <a href="https://repl.it/languages/scheme" target="_blank" rel="noopener">REPL</a>。</li><li><a href="https://www.gnu.org/software/mit-scheme/" target="_blank" rel="noopener">GNU/MIT-scheme</a> yast 用的就是這個。</li><li><a href="https://scheme.com/download/" target="_blank" rel="noopener">Chez Scheme</a> Petite 是他的免費版本。此 impl 聽說很快，可以看看<a href="https://www.yinwang.org/blog-cn/2013/03/28/chez-scheme" target="_blank" rel="noopener">大神介紹</a>。</li><li><a href="https://www.call-cc.org/" target="_blank" rel="noopener">CHICKEN Scheme</a> 這我聽很久了，但一直沒去了解它（</li></ul><p>common lisp:</p><ul><li><a href="https://clisp.sourceforge.io/" target="_blank" rel="noopener">CLISP</a> GNU 的 Common Lisp 的實作，Common Lisp 和 Scheme 為 Lisp 兩大流派，彼此影響。</li></ul><p>others:</p><ul><li><a href="https://www.gnu.org/software/emacs/manual/html_node/eintr/" target="_blank" rel="noopener">elisp</a> Emacs Lisp，神之編輯器的內建語言，神的語言果然不能太平凡啊。</li><li><a href="https://clojure.org/" target="_blank" rel="noopener">Clojure</a> 跑在 JVM 上的 lisp 方言。</li></ul><h1 id="About-evaluation"><a href="#About-evaluation" class="headerlink" title="About evaluation"></a>About evaluation</h1><p>要理解 continuation，我們必須先了解 scheme 的 eval/apply。<br>continuation 和 evaluation strategy 是習習相關的。</p><h2 id="application"><a href="#application" class="headerlink" title="application"></a>application</h2><blockquote><p><code>(procedure arg ...)</code></p></blockquote><p>假設現在有個簡單的 application: <code>(+ 1 2)</code>，interpreter 要去解釋他：</p><ul><li>eval <code>+</code> symbol，find the procedure bind to it.</li><li>eval <code>1</code> literal，convert it to number instance</li><li>eval <code>2</code> literal，convert it to number instance</li><li>apply procedure that bind to <code>+</code> to 1 and 2</li><li>return 3</li></ul><p>複雜一點的例子 <code>(cons (+ 1 2) (list 3))</code>：</p><ul><li>eval <code>cons</code>, find the procedure that bind to it</li><li>eval <code>(+ 1 2)</code><ul><li>eval <code>+</code> symbol，find the procedure bind to it.</li><li>eval <code>1</code> literal，convert it to number instance</li><li>eval <code>2</code> literal，convert it to number instance</li><li>apply procedure that bind to <code>+</code> to 1 and 2</li><li>return 3</li></ul></li><li>eval <code>(list 3)</code><ul><li>eval <code>list</code>, find the procedure(list constructor) bind to it</li><li>eval <code>3</code> literal, convert it to number instance</li><li>return (3 . nil)</li></ul></li><li>apply cons on 3 and 3</li><li>return (3 . (3 . nil))</li></ul><h2 id="special-form-if"><a href="#special-form-if" class="headerlink" title="special form - if"></a>special form - if</h2><blockquote><p><code>(if test-expr then-expr)</code><br><code>(if test-expr then-expr else-expr)</code></p></blockquote><p>叫做 special form 的原因是因為它的 evaluation strategy 和 application 不同，<br>凡是 special form 的 keyword 都有一套屬於自己的 evaluation strategy。</p><p>舉個例子，如果把 <code>if</code> 實作成 application 的話，每個參數都要被 eval。<br>考慮此情況：<code>(if #t (+ 1 2) (1 2))</code>。</p><p>在 application 中 <code>(1 2)</code> 不能被 eval，因為 <code>1</code> 並不是一個 procedure，他不能 apply 到 <code>2</code> 上。<br>這會讓 interpreter 拋出一個 exception 來警告你。<br>但實際上 interpreter 卻沒有。為什麼呢？</p><p>因為 <code>if</code> 是 special form，他只會 eval 關心的部份，剩下的部份他不進行 eval，所以不噴 exception。<br>所以對於 <code>if</code> 的 evaluation 是：</p><ul><li>eval <code>if</code>, use the if special form evaluation strategy</li><li>eval <code>#t</code> literal, convert it to boolean value</li><li>because the test-expr is true, we select then-expr to eval</li><li>eval <code>(+ 1 2)</code><ul><li>eval <code>+</code> symbol，find the procedure bind to it.</li><li>eval <code>1</code> literal，convert it to number instance</li><li>eval <code>2</code> literal，convert it to number instance</li><li>apply procedure that bind to <code>+</code> to 1 and 2</li><li>return 3</li></ul></li></ul><p>但是如果是 <code>(if #f (+ 1 2) (1 2))</code>，就會噴 exception 了。<br>下面例子會用到 <code>cond</code>，他跟 <code>if</code> 很像，這邊就不再贅述。</p><h2 id="special-form-lambda"><a href="#special-form-lambda" class="headerlink" title="special form - lambda"></a>special form - lambda</h2><blockquote><p><code>(lambda (arg-id ...) body ...+)</code><br><code>(lambda rest-id body ...+)</code><br><code>(lambda (arg-id ...+ . rest-id) body ...+)</code></p></blockquote><p><code>lambda</code> 此 special form 用於構造一個 procedure，一個 procedure 包含 arguments 和 procedure body。</p><p>對於 <code>(lambda (x) (+ x 1))</code>：</p><ul><li>eval <code>lambda</code>, construct a lambda procedure</li><li>take arg list as procedure arguments</li><li>take body expressions as procedure body</li><li>return the constructed procedure</li></ul><p>而當我們 apply 這個 procedure 為 <code>((lambda (x) (+ x 1)) 3)</code> 時：</p><ul><li>eval <code>(lambda (x) (+ x 1))</code><ul><li>eval <code>lambda</code>, construct a lambda procedure</li><li>take arg list as procedure arguments</li><li>take body expressions as procedure body</li><li>return the constructed procedure</li></ul></li><li>eval <code>3</code> literal, convert it to number instance</li><li>apply procedure on 3<ul><li>bind 3 to <code>x</code>, extend the binding to environment</li><li>eval <code>(+ x 1)</code><ul><li>eval <code>+</code> symbol，find the procedure bind to it</li><li>eval <code>x</code> symbol, lookup the value(3) bind to it</li><li>eval <code>1</code> literal, convert it to number instance</li><li>apply procedure that bind to <code>+</code> to 3(x) and 1</li><li>return 4</li></ul></li></ul></li></ul><h2 id="special-form-define"><a href="#special-form-define" class="headerlink" title="special form - define"></a>special form - define</h2><blockquote><p><code>(define id expr)</code><br><code>(define (head arg ...) body ...+)</code><br><code>(define (head arg ... . rest-id) body ...+)</code></p></blockquote><p><code>define</code> 可以用來綁定變數，他也提供了 short form 來定義函數。</p><p>舉個例子，<code>(define x (+ 1 2 3))</code>：</p><ul><li>eval <code>define</code></li><li>take <code>x</code> as binding symbol</li><li>eval <code>(+ 1 2)</code> as binding value<ul><li>eval <code>+</code> symbol，find the procedure bind to it.</li><li>eval <code>1</code> literal，convert it to number instance</li><li>eval <code>2</code> literal，convert it to number instance</li><li>apply procedure that bind to <code>+</code> to 1 and 2</li><li>return 3</li></ul></li><li>bind 3 to x, extend the binding to environment</li></ul><p>至於他的 short form 就是 macro 變換：</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">define</span></span> (<span class="name">head</span> arg ...) body ...+)</span><br><span class="line"><span class="comment">;=&gt; (define head (lambda (arg ...) body ...+))</span></span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="builtin-name">define</span></span> (<span class="name">head</span> arg ... . rest-id) body ...+)</span><br><span class="line"><span class="comment">;=&gt; (define head (lambda (arg ... . rest-id) body ...+))</span></span><br></pre></td></tr></table></figure><h2 id="special-form-let"><a href="#special-form-let" class="headerlink" title="special form - let"></a>special form - let</h2><blockquote><p><code>(let ([id expr] ...) body ...+)</code><br><code>(let proc-id ([arg-id init-expr] ...) body ...+)</code></p></blockquote><p><code>let</code> 則可以寫成一種 lambda + application 的 macro 變換。</p><p>比如 <code>(let [(x 3) (y 4)] (+ x y))</code> 會被轉成 <code>((lambda (x y) (+ x y)) 3 4)</code><br>而像上面的例子 <code>((lambda (x) (+ x 1)) 3)</code> 則可以寫作 <code>(let [(x 3)] (+ x 1))</code></p><p>由於 <code>let</code> 都會被轉成 lambda + application，<br>所以他的 evaluation strategy 就是先做 macro 轉換，再加上 lambda, application。<br>在此不再贅述。</p><h1 id="About-continuation"><a href="#About-continuation" class="headerlink" title="About continuation"></a>About continuation</h1><p>前面廢話那麼多，終於要來講講 continuation 了。<br>我記得當初我在跟教授講我在看 continuation 時，他說可以去看看 Kent 的論文（</p><blockquote><p>Kent 就是寫 tspl 和 Chez Scheme compiler 的那位</p></blockquote><p>continuation 在編譯器上應用似乎比較多，CPS 和 SSA 似乎有某種關係，<br>我覺得和 currying 也有，不過我還沒有看到那（<br>這邊大概只會對 <code>call/cc</code> 做探討，畢竟要讀懂一段 <code>call/cc</code> 的 scheme 我不知打了多少次結。</p><h2 id="what-is-continuation"><a href="#what-is-continuation" class="headerlink" title="what is continuation?"></a>what is continuation?</h2><p>continuation 代表在 evaluation 過程中的一個點，你可以在那點代入新值，重啟計算。</p><p>在方才長長的 evaluation list 中，只要有 eval 的地方就可以捕捉他的 continuation，紀錄下該 eval 的位置，<br>下次直接利用捕捉到的 continuation, 從剛剛那個位置代成新的值，重新 eval 出另一個結果。</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">                   <span class="comment">; +-- continuation, the k</span></span><br><span class="line">(<span class="name"><span class="builtin-name">...</span></span>               <span class="comment">; v</span></span><br><span class="line">   (<span class="name"><span class="builtin-name">call/cc</span></span> (<span class="name"><span class="builtin-name">lambda</span></span> (k) first-time-eval-val))<span class="comment">;&lt;-+ 1. the (call/cc ...)</span></span><br><span class="line">        <span class="comment">;                                       |    re-evaled as restart-val</span></span><br><span class="line">   ...) <span class="comment">;-----+- 2. get the re-eval-val of      |</span></span><br><span class="line">          <span class="comment">;   |    whole expr contains call/cc  |</span></span><br><span class="line">(<span class="name"><span class="builtin-name">...</span></span> ...) <span class="comment">;   |                                 |</span></span><br><span class="line">          <span class="comment">;   v                                 |</span></span><br><span class="line">(<span class="name">k</span> restart-val) <span class="comment">;-- 0. when apply the k expr ---+</span></span><br></pre></td></tr></table></figure><p>continuation 在 scheme 中是頭等公民 (first-class)，屬於一種資料型態，像 function 一樣可以被傳來傳去的。<br><code>call/cc</code> 是捕捉 continuation 的一個 procedure，全名是 <code>call-with-current-continuation</code>。</p><h2 id="call-cc-with-application"><a href="#call-cc-with-application" class="headerlink" title="call/cc with application"></a>call/cc with application</h2><p>現在我們看個 lambda 的例子：<code>(lambda (x) (* 2 x))</code>，我們感興趣的地方是那個 <code>x</code>，<br>我們希望之後計算可以從 x 帶入新值，再次進行計算。那就來捕捉他的 continuation 吧。</p><p>上述例子使用 lambda 只是為了說明，我們還是需要一個實際的 application 來做 evaluation。</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">define</span></span> x <span class="number">4</span>)</span><br><span class="line">(<span class="name"><span class="builtin-name">*</span></span> <span class="number">2</span> (<span class="name"><span class="builtin-name">call/cc</span></span> (<span class="name"><span class="builtin-name">lambda</span></span> (k) x))) <span class="comment">;=&gt; 8</span></span><br></pre></td></tr></table></figure><p>可以看到 <code>call/cc</code> 需要一個單參數的 lambda 作為參數，其中那個 k 就是 continuation 了。<br>我們在上例沒有把 k 存起來，而且在第一次 evaluation 中，<br>我們照舊傳了 x 回去給 <code>(lambda (e) (* 2 e))</code> 這個 procedure。</p><p>現在試著將 continuation 帶出來。</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">define</span></span> kon <span class="literal">#f</span>)</span><br><span class="line">(<span class="name"><span class="builtin-name">define</span></span> x <span class="number">2</span>)</span><br><span class="line">(<span class="name"><span class="builtin-name">*</span></span> <span class="number">2</span> (<span class="name"><span class="builtin-name">call/cc</span></span> (<span class="name"><span class="builtin-name">lambda</span></span> (k)</span><br><span class="line">                  (<span class="name"><span class="builtin-name">set!</span></span> kon k)</span><br><span class="line">                  x <span class="comment">;=&gt; x is 2, it's the value that first time eval returned</span></span><br><span class="line">               ))) <span class="comment">;=&gt; 4</span></span><br><span class="line"></span><br><span class="line">kon ;=&gt; #&lt;system continuation&gt;</span><br><span class="line"></span><br><span class="line">(<span class="name">kon</span> <span class="number">4</span>) <span class="comment">;=&gt; 8, use 4 replace the (call/cc ...) segment in previous evaluation</span></span><br><span class="line">(<span class="name">kon</span> <span class="number">8</span>) <span class="comment">;=&gt; 16, use 8 replace the (call/cc ...) segment in previous evaluation</span></span><br></pre></td></tr></table></figure><p>可以觀察到，我們用 <code>set!</code> 將 x 的位置用 continuation 記錄下來，並帶入新值。<br>在使用 <code>call/cc</code> 時，就把感興趣的點用 <code>call/cc</code> 的 lambda 參數的 procedure body 包起來就好了，<br>而該點在第一次做 evaluation 時的傳回值，也是由 procedure body 這個 expression eval 出來的結果而定。<br>該點的值可以在其後重新用 continuation 以不同的值帶入。</p><p>那對於 <code>call/cc</code> 首次 evaluation 回傳的 value 能不能直接是那個 continuation 呢？當然可以。<br>我們在這裡使用一個 id function: <code>(lambda (x) x)</code>。</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">((<span class="name"><span class="builtin-name">lambda</span></span> (x) x) (<span class="name"><span class="builtin-name">call/cc</span></span> (<span class="name"><span class="builtin-name">lambda</span></span> (k) k))) <span class="comment">;=&gt; #&lt;system continuation&gt;</span></span><br></pre></td></tr></table></figure><p>前面說到，可以 eval 的地方，就可以 <code>call/cc</code>，那在 application 裡，我們已經試過 arguments 的位置了。<br>那 procedure 的位置呢？</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">((<span class="name"><span class="builtin-name">call/cc</span></span> (<span class="name"><span class="builtin-name">lambda</span></span> (k) k)) (<span class="name"><span class="builtin-name">lambda</span></span> (x) <span class="string">"hello"</span>)) <span class="comment">;=&gt; "hello"</span></span><br></pre></td></tr></table></figure><p>看得出來，做 procedure eval 時，我們得到的 procedure 是該位置的 continuation，<br>而那個 continuation 被 apply 到 <code>(lambda (x) &quot;hello&quot;)</code> 上。<br>所以 <code>call/cc</code> 的部份被替換為 <code>(lambda (x) &quot;hello&quot;)</code>，<br>所以我們得到：<br><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">((<span class="name"><span class="builtin-name">lambda</span></span> (x) <span class="string">"hello"</span>) (<span class="name"><span class="builtin-name">lambda</span></span> (x) <span class="string">"hello"</span>)) <span class="comment">;=&gt; "hello"</span></span><br></pre></td></tr></table></figure></p><h2 id="call-cc-with-special-form"><a href="#call-cc-with-special-form" class="headerlink" title="call/cc with special form"></a>call/cc with special form</h2><h3 id="define"><a href="#define" class="headerlink" title="define"></a>define</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">define</span></span> x (<span class="name"><span class="builtin-name">call/cc</span></span> (<span class="name"><span class="builtin-name">lambda</span></span> (k) k)))</span><br><span class="line">x ;=&gt; #&lt;system continuation&gt;</span><br><span class="line"></span><br><span class="line">(<span class="name">x</span> <span class="number">4</span>)</span><br><span class="line">x ;=&gt; 4</span><br></pre></td></tr></table></figure><p>看懂發生什麼事了嗎？<br>第一次的 evaluation 把 continuation 綁到 <code>x</code> 上。<br>而 call continuation 時，將 <code>call/cc</code> 換成 <code>4</code> 重新傳給 <code>define</code>，<code>x</code> 被重新綁定為 4。<br>注意一點，<code>(define x ...)</code> 中，<code>call/cc</code> 並不能擺在 x 的位置，因為那個地方不做 evaluation。</p><h3 id="lambda"><a href="#lambda" class="headerlink" title="lambda"></a>lambda</h3><p>我們剛剛把 continuation 帶出 <code>call/cc</code> 外呼叫，那在 <code>call/cc</code> 內呼叫會有什麼效果呢？<br>參考以下 tspl 中的例子：</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">define</span></span> product</span><br><span class="line">  (<span class="name"><span class="builtin-name">lambda</span></span> (ls)</span><br><span class="line">    (<span class="name"><span class="builtin-name">call/cc</span></span></span><br><span class="line">      (<span class="name"><span class="builtin-name">lambda</span></span> (break)</span><br><span class="line">        (<span class="name"><span class="builtin-name">let</span></span> f ([<span class="name">ls</span> ls])</span><br><span class="line">          (<span class="name"><span class="builtin-name">cond</span></span></span><br><span class="line">            [(<span class="name"><span class="builtin-name">null?</span></span> ls) <span class="number">1</span>]</span><br><span class="line">            [(<span class="name"><span class="builtin-name">=</span></span> (<span class="name"><span class="builtin-name">car</span></span> ls) <span class="number">0</span>) (<span class="name">break</span> <span class="number">0</span>)]</span><br><span class="line">            [<span class="name"><span class="builtin-name">else</span></span> (<span class="name">print</span> (<span class="name"><span class="builtin-name">car</span></span> ls) (<span class="name">f</span> (<span class="name"><span class="builtin-name">cdr</span></span> ls)))]))))))</span><br></pre></td></tr></table></figure><p>他定義了一個 product，將整條 list 乘起來。<br>他在 product 的 lambda 回傳 body 用一個 call/cc 包起來，捕捉那點 continuation。<br>然後在其中定義一個 named let 來做 recursion，遇到 0 時，直接返回 0 到外層的 continuation。<br>省略回傳，做乘法的部份。</p><p>我們看一下，如果不用 <code>break</code> ，也就是<strong>正常的 <code>product</code></strong> 的結果。</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; product.ss</span></span><br><span class="line">(<span class="name"><span class="builtin-name">define</span></span> normal-product</span><br><span class="line">  (<span class="name"><span class="builtin-name">lambda</span></span> (ls)</span><br><span class="line">    (<span class="name"><span class="builtin-name">call/cc</span></span></span><br><span class="line">      (<span class="name"><span class="builtin-name">lambda</span></span> (break)</span><br><span class="line">        (<span class="name"><span class="builtin-name">let</span></span> f ([<span class="name">ls</span> ls])</span><br><span class="line">          (<span class="name"><span class="builtin-name">cond</span></span></span><br><span class="line">            [(<span class="name"><span class="builtin-name">null?</span></span> ls) <span class="number">1</span>]</span><br><span class="line">            [(<span class="name"><span class="builtin-name">=</span></span> (<span class="name"><span class="builtin-name">car</span></span> ls) <span class="number">0</span>) <span class="number">0</span>]</span><br><span class="line">            [<span class="name"><span class="builtin-name">else</span></span> (<span class="name"><span class="builtin-name">*</span></span> (<span class="name"><span class="builtin-name">car</span></span> ls) (<span class="name">f</span> (<span class="name"><span class="builtin-name">cdr</span></span> ls)))]))))))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(normal-product (5 4 0 2))</span><br><span class="line">|(call/cc ...)</span><br><span class="line">&gt;(f (5 4 0 2))</span><br><span class="line">&gt;(* 5 (f (4 0 2)))</span><br><span class="line">|    |(f (4 0 2))</span><br><span class="line">|    &gt;(* 4 (f (0 2)))</span><br><span class="line">|    |    |(f (0 2))</span><br><span class="line">|    |    &gt;0</span><br><span class="line">|    &gt;(* 4 0) ; do multiplication</span><br><span class="line">|    &gt;0</span><br><span class="line">&gt;(* 5 0) ; do multiplication</span><br><span class="line">&gt;0</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p>如果是原本使用 <code>(break 0)</code> 的話：<br><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; product.ss</span></span><br><span class="line">(<span class="name"><span class="builtin-name">define</span></span> product</span><br><span class="line">  (<span class="name"><span class="builtin-name">lambda</span></span> (ls)</span><br><span class="line">    (<span class="name"><span class="builtin-name">call/cc</span></span></span><br><span class="line">      (<span class="name"><span class="builtin-name">lambda</span></span> (break)</span><br><span class="line">        (<span class="name"><span class="builtin-name">let</span></span> f ([<span class="name">ls</span> ls])</span><br><span class="line">          (<span class="name"><span class="builtin-name">cond</span></span></span><br><span class="line">            [(<span class="name"><span class="builtin-name">null?</span></span> ls) <span class="number">1</span>]</span><br><span class="line">            [(<span class="name"><span class="builtin-name">=</span></span> (<span class="name"><span class="builtin-name">car</span></span> ls) <span class="number">0</span>) (<span class="name">break</span> <span class="number">0</span>)]</span><br><span class="line">            [<span class="name"><span class="builtin-name">else</span></span> (<span class="name">print</span> (<span class="name"><span class="builtin-name">car</span></span> ls) (<span class="name">f</span> (<span class="name"><span class="builtin-name">cdr</span></span> ls)))]))))))</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(product (5 4 0 2))</span><br><span class="line">|(call/cc ...)</span><br><span class="line">&gt;(f (5 4 0 2))</span><br><span class="line">&gt;(* 5 (f (4 0 2)))</span><br><span class="line">|    |(f (4 0 2))</span><br><span class="line">|    &gt;(* 4 (f (0 2)))</span><br><span class="line">|    |    |(f (0 2))</span><br><span class="line">|    |    &gt;(break 0) -+</span><br><span class="line">|                     |</span><br><span class="line">&gt;0 &lt;------------------+</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p>真的會這樣嗎？<br>把 <code>*</code> 重新定義成以下這個具有 side-effect 的 <code>*</code> 來測試看看。</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; mul.ss</span></span><br><span class="line">(<span class="name"><span class="builtin-name">define</span></span> mul *)</span><br><span class="line">(<span class="name"><span class="builtin-name">define</span></span> (<span class="name"><span class="builtin-name">*</span></span> a b)</span><br><span class="line">   (<span class="name"><span class="builtin-name">let</span></span> [(<span class="name">v</span> (<span class="name">mul</span> a b))]</span><br><span class="line">         (<span class="name">printf</span> <span class="string">"~A * ~A = ~A~%"</span> a b v) v))</span><br></pre></td></tr></table></figure><p>用 petite repl 測試一下：</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">load</span></span> <span class="string">"mul.ss"</span>)</span><br><span class="line">(<span class="name"><span class="builtin-name">load</span></span> <span class="string">"product.ss"</span>)</span><br><span class="line">(<span class="name">normal-product</span> '(<span class="number">5</span> <span class="number">4</span> <span class="number">0</span> <span class="number">2</span>))</span><br><span class="line"><span class="comment">;; 4 * 0 = 0</span></span><br><span class="line"><span class="comment">;; 5 * 0 = 0</span></span><br><span class="line"><span class="comment">;=&gt; 0</span></span><br><span class="line">(<span class="name">product</span> '(<span class="number">5</span> <span class="number">4</span> <span class="number">0</span> <span class="number">2</span>))</span><br><span class="line"><span class="comment">;=&gt; 0</span></span><br></pre></td></tr></table></figure><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><p>而在 <code>let</code> 中會有什麼效果呢？<br>大概是有點 <code>define</code> + <code>application</code> 的味道吧。</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">let</span></span> ([<span class="name">x</span> (<span class="name"><span class="builtin-name">call/cc</span></span> (<span class="name"><span class="builtin-name">lambda</span></span> (k) k))])</span><br><span class="line">  (<span class="name">x</span> (<span class="name"><span class="builtin-name">lambda</span></span> (ignore) <span class="string">"hi"</span>))) <span class="comment">;=&gt; "hi"</span></span><br></pre></td></tr></table></figure><p>另一個可以 <code>call/cc</code> 的地方就是 body-expr 的地方了，<br>不過效果大概就像是 <code>lambda</code> 的 body-expr，因為 <code>let</code> 的 body 就是轉成 <code>lambda</code> 的 body。</p><p>至此，<code>call/cc</code> 可以放的地方就差不多說明過了，其餘 special form 的概念也就差不多一樣了。</p><h1 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h1><p>來看看其他 continuation 的例子。</p><h2 id="light-weight-process"><a href="#light-weight-process" class="headerlink" title="light-weight process"></a>light-weight process</h2><p>在 tspl 中提到，continuation 可用於 multi-tasking，<br>以下是書裡面的例子：</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">define</span></span> lwp-list '())</span><br><span class="line">(<span class="name"><span class="builtin-name">define</span></span> lwp</span><br><span class="line">  (<span class="name"><span class="builtin-name">lambda</span></span> (thunk)</span><br><span class="line">    (<span class="name"><span class="builtin-name">set!</span></span> lwp-list (<span class="name"><span class="builtin-name">append</span></span> lwp-list (<span class="name"><span class="builtin-name">list</span></span> thunk)))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="builtin-name">define</span></span> start</span><br><span class="line">  (<span class="name"><span class="builtin-name">lambda</span></span> ()</span><br><span class="line">    (<span class="name"><span class="builtin-name">let</span></span> ([<span class="name">p</span> (<span class="name"><span class="builtin-name">car</span></span> lwp-list)])</span><br><span class="line">      (<span class="name"><span class="builtin-name">set!</span></span> lwp-list (<span class="name"><span class="builtin-name">cdr</span></span> lwp-list))</span><br><span class="line">      (<span class="name">p</span>))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="builtin-name">define</span></span> pause</span><br><span class="line">  (<span class="name"><span class="builtin-name">lambda</span></span> ()</span><br><span class="line">    (<span class="name"><span class="builtin-name">call/cc</span></span></span><br><span class="line">      (<span class="name"><span class="builtin-name">lambda</span></span> (k)</span><br><span class="line">        (<span class="name">lwp</span> (<span class="name"><span class="builtin-name">lambda</span></span> () (<span class="name">k</span> <span class="literal">#f</span>)))</span><br><span class="line">        (<span class="name">start</span>)))))</span><br><span class="line"></span><br><span class="line">(<span class="name">lwp</span> (<span class="name"><span class="builtin-name">lambda</span></span> () (<span class="name"><span class="builtin-name">let</span></span> f () (<span class="name">pause</span>) (<span class="name"><span class="builtin-name">display</span></span> <span class="string">"h"</span>) (<span class="name">f</span>))))</span><br><span class="line">(<span class="name">lwp</span> (<span class="name"><span class="builtin-name">lambda</span></span> () (<span class="name"><span class="builtin-name">let</span></span> f () (<span class="name">pause</span>) (<span class="name"><span class="builtin-name">display</span></span> <span class="string">"i"</span>) (<span class="name">f</span>))))</span><br><span class="line">(<span class="name">lwp</span> (<span class="name"><span class="builtin-name">lambda</span></span> () (<span class="name"><span class="builtin-name">let</span></span> f () (<span class="name">pause</span>) (<span class="name"><span class="builtin-name">newline</span></span>) (<span class="name">f</span>))))</span><br><span class="line">(<span class="name">start</span>)</span><br><span class="line"><span class="comment">;=&gt; hi</span></span><br><span class="line"><span class="comment">;=&gt; hi</span></span><br><span class="line"><span class="comment">;=&gt; hi</span></span><br><span class="line"><span class="comment">;=&gt; hi</span></span><br></pre></td></tr></table></figure><p>來 trace 一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">;=&gt; lwp-list &lt;display h&gt; &lt;display i&gt; &lt;newline&gt;</span><br><span class="line">(start)</span><br><span class="line">|    |(set! lwp-list (cdr lwp-list))</span><br><span class="line">|    |(p)</span><br><span class="line">|    &gt;((lambda () (let f () (pause) (display &quot;h&quot;) (f))))</span><br><span class="line">|    &gt;(let f () (pause) (display &quot;h&quot;) (f))</span><br><span class="line">|    |    |(pause)</span><br><span class="line">|    |    &gt;(call/cc ...) # continuation1 here</span><br><span class="line">|    |    |    |(lwp (lambda () (k #f)))</span><br><span class="line">|    |    |    |        ;=&gt; &lt;display i&gt; &lt;newline&gt; &lt;k of h&gt;</span><br><span class="line">|    |    |    |(start)</span><br><span class="line">                   |</span><br><span class="line">       +-----------+</span><br><span class="line">       |</span><br><span class="line">       v</span><br><span class="line">... (start)</span><br><span class="line">... |    |(set! lwp-list (cdr lwp-list))</span><br><span class="line">... |    |(p)</span><br><span class="line">... |    &gt;((lambda () (let f () (pause) (display &quot;h&quot;) (f))))</span><br><span class="line">... |    &gt;(let f () (pause) (display &quot;h&quot;) (f))</span><br><span class="line">... |    |    |(pause)</span><br><span class="line">... |    |    &gt;(call/cc ...) # continuation2 here</span><br><span class="line">... |    |    |    |(lwp (lambda () (k #f)))</span><br><span class="line">... |    |    |    |        ;=&gt; &lt;newline&gt; &lt;k of h&gt; &lt;k of i&gt;</span><br><span class="line">... |    |    |    |(start)</span><br><span class="line">                       |</span><br><span class="line">       +---------------+</span><br><span class="line">       |</span><br><span class="line">       v</span><br><span class="line">... (start)</span><br><span class="line">... |    |(set! lwp-list (cdr lwp-list))</span><br><span class="line">... |    |(p)</span><br><span class="line">... |    &gt;((lambda () (let f () (pause) (display &quot;h&quot;) (f))))</span><br><span class="line">... |    &gt;(let f () (pause) (display &quot;h&quot;) (f))</span><br><span class="line">... |    |    |(pause)</span><br><span class="line">... |    |    &gt;(call/cc ...) # continuation3 here</span><br><span class="line">... |    |    |    |(lwp (lambda () (k #f)))</span><br><span class="line">... |    |    |    |        ;=&gt; &lt;k of h&gt; &lt;k of i&gt; &lt;k of \n&gt;</span><br><span class="line">... |    |    |    |(start)</span><br><span class="line">                       |</span><br><span class="line">       +---------------+</span><br><span class="line">       |</span><br><span class="line">       v</span><br><span class="line">... (start)</span><br><span class="line">... |    |(set! lwp-list (cdr lwp-list))</span><br><span class="line">... |    |(p)</span><br><span class="line">... |    &gt;(continuation of display h)</span><br><span class="line">... |    |    |(display &quot;h&quot;)</span><br><span class="line">... |    |    | (f) in let-expr ; recursive call</span><br><span class="line">... |    |    | (pause)</span><br><span class="line">... |    |    |     | (append continuation to lwp-list)</span><br><span class="line">... |    |    |     | (start)</span><br><span class="line">                         |</span><br><span class="line">    +--------------------+</span><br><span class="line">    |</span><br><span class="line">    v</span><br><span class="line">... continuation of i</span><br><span class="line">... (display &quot;i&quot;)</span><br><span class="line">... (pause)</span><br><span class="line">... ... (append continuation of i)</span><br><span class="line">... ... (start)</span><br><span class="line">           |</span><br><span class="line">    +------+</span><br><span class="line">    |</span><br><span class="line">    v</span><br><span class="line">... continuation of newline</span><br><span class="line">... (newline)</span><br><span class="line">... (pause)</span><br><span class="line">... ... (append continuation of \n)</span><br><span class="line">... ... (start)</span><br><span class="line"></span><br><span class="line">... inf looping</span><br></pre></td></tr></table></figure><p>抽象點來看，task 大概可以分成兩個部份，<code>pause</code> 前和後。<br>每次遇到 <code>pause</code> 時，就會把 continuation 保存起來，然後 switch task，<br>然後每個 task 跑過一遍，就會回來 <code>pause</code> 這個位置，<code>pause</code> 會被 <code>#f</code> 取代掉，<br>接著 <code>display</code>，do named let recursive call，接著重新從開始跑到 <code>pause</code>，<br>reserve continuation, switch task… inf looping…</p><h2 id="Yin-Yang-Puzzle"><a href="#Yin-Yang-Puzzle" class="headerlink" title="Yin-Yang Puzzle"></a>Yin-Yang Puzzle</h2><p>陰陽謎題 (Yin-Yang Puzzle) 據說是 David Madore 在 1999 年時，試圖去輸出的一個序列。<br>用他發明的語言 <a href="https://en.wikipedia.org/wiki/Unlambda" target="_blank" rel="noopener">Unlambda</a>（沒有 lambda operation 的 lambda calculas 實作，當時是用 scheme 寫的），<br>他一開始用了 600 個字元，後來為他的語言加上 <code>call/cc</code> 機制後，程序長度縮短到 12 個字元。<a href="https://stackoverflow.com/questions/30409800/any-history-background-about-the-yin-yang-puzzle-in-detail#answer-30412273" target="_blank" rel="noopener">ref</a></p><p>後來下面這個版本便是他由 Unlambda 轉成 scheme 的版本。</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">let*</span></span> ((<span class="name">yin</span> ((<span class="name"><span class="builtin-name">lambda</span></span> (foo) (<span class="name"><span class="builtin-name">newline</span></span>) foo)</span><br><span class="line">             (<span class="name"><span class="builtin-name">call/cc</span></span> (<span class="name"><span class="builtin-name">lambda</span></span> (bar) bar))))</span><br><span class="line">       (<span class="name">yang</span> ((<span class="name"><span class="builtin-name">lambda</span></span> (foo) (<span class="name"><span class="builtin-name">write-char</span></span> <span class="literal">#\*</span>) foo)</span><br><span class="line">              (<span class="name"><span class="builtin-name">call/cc</span></span> (<span class="name"><span class="builtin-name">lambda</span></span> (bar) bar)))))</span><br><span class="line">  (<span class="name">yin</span> yang))</span><br><span class="line"></span><br><span class="line"><span class="comment">;=&gt;</span></span><br><span class="line"><span class="comment">;=&gt; *</span></span><br><span class="line"><span class="comment">;=&gt; **</span></span><br><span class="line"><span class="comment">;=&gt; ***</span></span><br><span class="line"><span class="comment">;=&gt; ****</span></span><br><span class="line"><span class="comment">;=&gt; *****</span></span><br><span class="line"><span class="comment">;=&gt; ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 有的版本會用 (display '@) (display '*) 取代</span></span><br><span class="line"><span class="comment">;=&gt; @*@**@***@****@*****@******@*******@********@*********@ ...</span></span><br></pre></td></tr></table></figure><p>trace 上面這段：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">let*</span><br><span class="line">  ;; k0@yin, k0@yang</span><br><span class="line">  yin = k0@yin                              ;=&gt; @</span><br><span class="line">  yang = k0@yang                            ;=&gt; *</span><br><span class="line">  (yin yang) ;; (k0@yin k@0yang)</span><br><span class="line">             ;; back to k0@yin with k0@yang</span><br><span class="line"></span><br><span class="line">  ;; k1@yang</span><br><span class="line">  yin = ((begin (display &apos;@) k0@yang))      ;=&gt; @</span><br><span class="line">  yang = k1@yang                            ;=&gt; *</span><br><span class="line">  (yin yang) ;; (k0@yang k1@yang)</span><br><span class="line">             ;; back to k0@yang with k1@yang</span><br><span class="line"></span><br><span class="line">  ;; back to k0@yang, so prev yin is k0@yin</span><br><span class="line">  yang = k1@yang                            ;=&gt; *</span><br><span class="line">  (yin yang) ;; (k0@yin k1@yang)</span><br><span class="line">             ;; back to k0@yin with k1@yang</span><br><span class="line"></span><br><span class="line">  ;; k2@yang</span><br><span class="line">  yin = k1@yang                             ;=&gt; @</span><br><span class="line">  yang = k2@yang                            ;=&gt; *</span><br><span class="line">  (yin yang) ;; (k1@yang k2@yang)</span><br><span class="line">             ;; back to k1@yang with k2@yang</span><br><span class="line"></span><br><span class="line">  ;; back to k1@yang, so prev yin is k0@yang</span><br><span class="line">  yang = k2@yang                            ;=&gt; *</span><br><span class="line">  (yin yang) ;; (k0@yang k2@yang)</span><br><span class="line">             ;; back to k0@yang with k2@yang</span><br><span class="line"></span><br><span class="line">  ;; back to k0@yang, so prev yin is k0@yin</span><br><span class="line">  yang = k2@yang                            ;=&gt; *</span><br><span class="line">  (yin yang) ;; (k0@yin k2@yang)</span><br><span class="line">             ;; back to k0@yin with k2@yang</span><br><span class="line"></span><br><span class="line">  yin = k2@yang                             ;=&gt; @</span><br><span class="line">  yang = k3@yang                            ;=&gt; *</span><br><span class="line">  (yin yang) ;; (k2@yang k3@yang)</span><br><span class="line">             ;; back to k2@yang with k3@yang</span><br><span class="line"></span><br><span class="line">  ;; back to k2@yang, so prev yin is k1@yang</span><br><span class="line">  yang = k3@yang                            ;=&gt; *</span><br><span class="line">  (yin yang) ;; (k1@yang k3@yang)</span><br><span class="line">             ;; back to k1@yang with k3@yang</span><br><span class="line"></span><br><span class="line">  ;; back to k1@yang, so prev yin is k0@yang</span><br><span class="line">  yang = k3@yang                            ;=&gt; *</span><br><span class="line">  (yin yang) ;; (k0@yang k3@yang)           </span><br><span class="line">             ;; back to k0@yang with k3@yang</span><br><span class="line"></span><br><span class="line">  ;; back to k0@yang, so prev yin is k0@yin</span><br><span class="line">  yang = k3@yang                            ;=&gt; *</span><br><span class="line">  (yin yang) ;; (k0@yang k3@yang)</span><br><span class="line">             ;; back to k0@yin with k3@yang</span><br><span class="line"></span><br><span class="line">  yin = k3@yang                             ;=&gt; @</span><br><span class="line">  yang = k4@yang                            ;=&gt; *</span><br><span class="line">  (yin yang) ;; (k3@yang k4@yang)</span><br><span class="line">             ;; back to k3@yang with k4@yang</span><br><span class="line"></span><br><span class="line">  ...</span><br></pre></td></tr></table></figure></p><p>感覺大概就是來來回回，每次到 k0@yin 時，就會產生 k(n+1)@yang，<br>然後拿這個 k(n+1)@yang 跳到最遠端的 k(n)@yang 重新往回滾，就像海浪一般。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">(yin0&gt;yang0)</span><br><span class="line">     |</span><br><span class="line">     +-------------+</span><br><span class="line">                   v</span><br><span class="line">(yin0&gt;yang1)&lt;-(yin0 yang0)</span><br><span class="line">     |</span><br><span class="line">     +----------------------------+</span><br><span class="line">                                  v</span><br><span class="line">(yin0&gt;yang2)&lt;-(yin0 yang1)&lt;-(yang0 yang1)</span><br><span class="line">     |</span><br><span class="line">     +-------------------------------------------+</span><br><span class="line">                                                 v</span><br><span class="line">(yin0&gt;yang3)&lt;-(yin0 yang2)&lt;-(yang0 yang2)&lt;-(yang0 yang2)</span><br><span class="line">     |</span><br><span class="line">     +----------------------------------------------------------+</span><br><span class="line">                                                                v</span><br><span class="line">(yin0&gt;yang4)&lt;-(yin0 yang3)&lt;-(yang0 yang3)&lt;-(yang0 yang3)&lt;-(yang0 yang3)</span><br><span class="line">     |</span><br><span class="line">     +--- ... ... ...</span><br></pre></td></tr></table></figure><p>continuation 的紀錄大概就到這裡，tspl 裡面有<a href="https://scheme.com/tspl4/further.html" target="_blank" rel="noopener">五個練習</a>，<br>Exercise 3.3.[1-5]，這裡有 Exercise 3.3.[1-4] 的<a href="https://scheme.com/tspl4/answers.html" target="_blank" rel="noopener">解答</a>。</p><p>之後應該會對 CPS 的部份做一次探討。</p>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;
對，就是那個 continuation。
&lt;/center&gt;

&lt;link href=&quot;/files/scheme-syntax-patch.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;
    
    </summary>
    
      <category term="Note" scheme="http://nobodyzxc.github.io/categories/Note/"/>
    
    
      <category term="fp" scheme="http://nobodyzxc.github.io/tags/fp/"/>
    
      <category term="scheme" scheme="http://nobodyzxc.github.io/tags/scheme/"/>
    
      <category term="lambda" scheme="http://nobodyzxc.github.io/tags/lambda/"/>
    
      <category term="lisp" scheme="http://nobodyzxc.github.io/tags/lisp/"/>
    
      <category term="continuation" scheme="http://nobodyzxc.github.io/tags/continuation/"/>
    
  </entry>
  
  <entry>
    <title>簡明 Arch 安裝指南</title>
    <link href="http://nobodyzxc.github.io/2019/06/06/arch-install/"/>
    <id>http://nobodyzxc.github.io/2019/06/06/arch-install/</id>
    <published>2019-06-06T11:46:13.000Z</published>
    <updated>2020-08-16T12:10:58.905Z</updated>
    
    <content type="html"><![CDATA[<center>裝 Arch 第二次就上手～</center><a id="more"></a><h2 id="script"><a href="#script" class="headerlink" title="script"></a>script</h2><p>這是總結，可以一次執行：</p><script src="https://gist.github.com/nobodyzxc/5e9bb4d6134dfa5e9a98709ae9b945b3.js"></script><p>可用以下指令安裝：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://gist.githubusercontent.com/nobodyzxc/5e9bb4d6134dfa5e9a98709ae9b945b3/raw | bash</span><br></pre></td></tr></table></figure></p><h2 id="安裝前準備"><a href="#安裝前準備" class="headerlink" title="安裝前準備"></a>安裝前準備</h2><h3 id="USB-flash-installation-media"><a href="#USB-flash-installation-media" class="headerlink" title="USB flash installation media"></a>USB flash installation media</h3><p>首先我們要準備一支 live USB。<br>下載好 Arch Linux <a href="https://www.archlinux.org/download/" target="_blank" rel="noopener">ISO 檔</a></p><p>先用 lsblk 看要安裝的 USB。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">NAME   MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sda      8:0    0 465.8G  0 disk</span><br><span class="line">├─sda1   8:1    0   256M  0 part /efi</span><br><span class="line">├─sda2   8:2    0 449.5G  0 part /</span><br><span class="line">└─sda3   8:3    0    16G  0 part [SWAP]</span><br><span class="line">sdb      8:16   1    15G  0 disk</span><br><span class="line">└─sdb1   8:17   1    15G  0 part</span><br></pre></td></tr></table></figure></p><p>wiki:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dd bs=4M if=path/to/archlinux.iso of=/dev/sdx status=progress oflag=sync</span><br></pre></td></tr></table></figure></p><p>要把 sdx 換成 sdb 那我們下載的 iso 位置為 <code>/home/zxc/Downloads/archlinux-2019.02.01-x86_64.iso</code></p><p>所以我們的指令為：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dd bs=4M if=/home/zxc/Downloads/archlinux-2019.02.01-x86_64.iso of=/dev/sdb &amp;&amp; sync</span><br></pre></td></tr></table></figure><h3 id="開機"><a href="#開機" class="headerlink" title="開機"></a>開機</h3><p>接著我們將 USB 裝上欲安裝的主機，然後</p><ul><li>開啟電源後按 F12 （我的桌機）</li><li>ESC + 電源鍵（我的筆電）選擇開機硬體。</li></ul><p>因為我們要用 GRUB 引導程序（可以選擇要開機的硬碟，雙系統可以用）<br>所以選擇 USB 有 UEFI 的選項。</p><p><img src="/images/arch_install/bootmenu.jpg" alt></p><p>選擇後應該會長這樣：<br><img src="/images/arch_install/uefi.jpg" alt></p><p>選錯了會長這樣：<br><img src="/images/arch_install/bios.jpg" alt></p><p>以 root 進入 zsh。</p><h3 id="zsh-設定"><a href="#zsh-設定" class="headerlink" title="zsh 設定"></a>zsh 設定</h3><p>鍵盤 default US 有需要再參考 wiki。<br>啟動模式 同上。</p><p>接上有線網路，然後 <code>dhcpcd</code>，<code>ping archlinux.org</code> 查看狀態是否成功。</p><p>更新時間 <code>timedatectl set-ntp true</code>，<code>timedatectl status</code> 查看是否成功。</p><h3 id="硬碟切割"><a href="#硬碟切割" class="headerlink" title="硬碟切割"></a>硬碟切割</h3><p>看你要把 archlinux 裝在哪顆硬碟上，此次為 <code>/dev/sda</code>。</p><p><code>fdisk /dev/sda</code></p><p>進入 fdisk prompt。</p><p>先創造 GPT table。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">command: g</span><br></pre></td></tr></table></figure></p><p>切 <code>/efi</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">command: n</span><br><span class="line">partition number: (default=1)</span><br><span class="line">first sector: (default=2048)</span><br><span class="line">last sector: +260M</span><br></pre></td></tr></table></figure></p><p>切 <code>/</code> （後來我因為裝 cuda, 會佔用 /usr 空間，所以提升至 64G）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">command: n</span><br><span class="line">partition number: (default=2)</span><br><span class="line">first sector: (default)</span><br><span class="line">last sector: +32G</span><br></pre></td></tr></table></figure></p><p>切 <code>swap</code>，我有 16G RAM，切 16G swap (多切一點ww）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">command: n</span><br><span class="line">partition number: (default=3)</span><br><span class="line">first sector: (default)</span><br><span class="line">last sector: +16G</span><br></pre></td></tr></table></figure></p><p>切 <code>/home</code>，切完。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">command: n</span><br><span class="line">partition number: (default=4)</span><br><span class="line">first sector: (default)</span><br><span class="line">last sector: (default)</span><br></pre></td></tr></table></figure></p><p>更換磁區類型，可以用在鍵入 t 後用 L 查看所有類型。</p><ol><li><code>/efi =&gt; EFI System(type 1)</code></li><li><code>/ =&gt; Linux filesystem(type 20)</code></li><li><code>swap =&gt; Linux swap(type 19)</code></li><li><code>/home =&gt; Linux filesystem(type 20)</code></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">command: t</span><br><span class="line">partition number: 1</span><br><span class="line">partition type: 1</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">command: t</span><br><span class="line">partition number: 2</span><br><span class="line">partition type: 20</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">command: t</span><br><span class="line">partition number: 3</span><br><span class="line">partition type: 19</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">command: t</span><br><span class="line">partition number: 4</span><br><span class="line">partition type: 20</span><br></pre></td></tr></table></figure><p>以設定進行切割並離開。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">command: w</span><br></pre></td></tr></table></figure></p><h3 id="格式化硬碟"><a href="#格式化硬碟" class="headerlink" title="格式化硬碟"></a>格式化硬碟</h3><p>vfat 格式化 <code>/efi</code> 分區。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkfs.vfat /dev/sda1</span><br></pre></td></tr></table></figure></p><p>ext4 格式化 <code>/</code> 及 <code>/home</code> 分區。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkfs.ext4 /dev/sda2</span><br><span class="line">mkfs.ext4 /dev/sda4</span><br></pre></td></tr></table></figure></p><p>格式化 <code>swap</code> 分區。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkswap /dev/sda3</span><br><span class="line">swapon /dev/sda3</span><br></pre></td></tr></table></figure></p><h3 id="掛載切好的磁區"><a href="#掛載切好的磁區" class="headerlink" title="掛載切好的磁區"></a>掛載切好的磁區</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mount /dev/sda2 /mnt</span><br><span class="line">mkdir /mnt/boot</span><br><span class="line">mount /dev/sda1 /mnt/boot</span><br><span class="line">mkdir /mnt/home</span><br><span class="line">mount /dev/sda4 /mnt/home</span><br></pre></td></tr></table></figure><h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><h3 id="鏡像站設定（加速用，非必要）"><a href="#鏡像站設定（加速用，非必要）" class="headerlink" title="鏡像站設定（加速用，非必要）"></a>鏡像站設定（加速用，非必要）</h3><p><code>vim /etc/pacman.conf</code> 加入交大鏡像站。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[core]</span><br><span class="line">Server = http://archlinux.cs.nctu.edu.tw/$repo/os/$arch</span><br><span class="line">Include = /etc/pacman.d/mirrorlist</span><br><span class="line"></span><br><span class="line">[extra]</span><br><span class="line">Server = http://archlinux.cs.nctu.edu.tw/$repo/os/$arch</span><br><span class="line">Include = /etc/pacman.d/mirrorlist</span><br><span class="line"></span><br><span class="line">[community]</span><br><span class="line">Server = http://archlinux.cs.nctu.edu.tw/$repo/os/$arch</span><br><span class="line">Include = /etc/pacman.d/mirrorlist</span><br></pre></td></tr></table></figure><p>開始安裝系統套件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacstrap /mnt base base-devel linux linux-firmware</span><br></pre></td></tr></table></figure></p><h2 id="系統配置"><a href="#系統配置" class="headerlink" title="系統配置"></a>系統配置</h2><h3 id="fstab"><a href="#fstab" class="headerlink" title="fstab"></a>fstab</h3><p>生成 fstab 檔案，定義儲存設備的初始化和連接系統方式。</p><p><code>-U</code> 用 UUID 分類定義，<code>-L</code> 則用分割標籤，<br>我們前面切磁碟沒上標籤，所以用 <code>-U</code> 吧。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">genfstab -U /mnt &gt;&gt; /mnt/etc/fstab</span><br></pre></td></tr></table></figure><h3 id="change-root"><a href="#change-root" class="headerlink" title="change root"></a>change root</h3><p>切進硬碟當 root 囉！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arch-chroot /mnt</span><br></pre></td></tr></table></figure><h3 id="時區-amp-語言-amp-網路"><a href="#時區-amp-語言-amp-網路" class="headerlink" title="時區 &amp; 語言 &amp; 網路"></a>時區 &amp; 語言 &amp; 網路</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># ln -sf /usr/share/zoneinfo/Region/City /etc/localtime</span><br><span class="line">ln -sf /usr/share/zoneinfo/Asia/Taipei /etc/localtime</span><br><span class="line">hwclock --systohc</span><br></pre></td></tr></table></figure><p>先裝個 vim 比較順手，vi 不太順。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S vim</span><br></pre></td></tr></table></figure></p><p>編輯 <code>/etc/locale.gen</code> 反註解 <code>en_US.UTF-8 UTF-8</code> 及 <code>zh_TW.UTF-8 UTF-8</code>。<br>然後用 <code>locale-gen</code> 生成檔案。</p><p>加入環境變數 <code>echo &quot;LANG=en_US.UTF-8&quot; &gt; /etc/locale.conf</code>。</p><p>設定電腦名稱。</p><p>我決定叫他卡巴內里了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;kabaneri&quot; &gt; /etc/hostname</span><br></pre></td></tr></table></figure></p><p><code>vim /etc/hosts</code> 最後一行加上：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1      localhost</span><br><span class="line">::1            localhost</span><br><span class="line">127.0.1.1      kabaneri.localdomain      kabaneri</span><br></pre></td></tr></table></figure></p><h3 id="建立開機映像檔-amp-設定密碼"><a href="#建立開機映像檔-amp-設定密碼" class="headerlink" title="建立開機映像檔 &amp; 設定密碼"></a>建立開機映像檔 &amp; 設定密碼</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkinitcpio -p linux</span><br><span class="line">passwd</span><br></pre></td></tr></table></figure><h3 id="啟動載入程式-amp-安裝網路工具"><a href="#啟動載入程式-amp-安裝網路工具" class="headerlink" title="啟動載入程式 &amp; 安裝網路工具"></a>啟動載入程式 &amp; 安裝網路工具</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pacman -Sy grub os-prober efibootmgr</span><br><span class="line">grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=grub</span><br><span class="line">grub-mkconfig -o /boot/grub/grub.cfg # warnning here</span><br></pre></td></tr></table></figure><blockquote><p>WARNING: Failed to connect to lvmetad. Falling back to device scanning.</p></blockquote><p>不用太擔心這個 <a href="https://unix.stackexchange.com/questions/332556/arch-linux-installation-grub-problem" target="_blank" rel="noopener">warnning</a>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S net-tools wireless_tools dhclient wpa_supplicant</span><br></pre></td></tr></table></figure><p>重開前先設定好 dhcpcd。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable dhcpcd.service</span><br><span class="line">exit</span><br><span class="line">umount -R /mnt</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure></p><h2 id="安裝系統後"><a href="#安裝系統後" class="headerlink" title="安裝系統後"></a>安裝系統後</h2><h3 id="手動設定-DNS（防雷）"><a href="#手動設定-DNS（防雷）" class="headerlink" title="手動設定 DNS（防雷）"></a>手動設定 DNS（防雷）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;nameserver 8.8.8.8&quot; &gt;&gt; /etc/resolv.conf</span><br></pre></td></tr></table></figure><h3 id="用戶"><a href="#用戶" class="headerlink" title="用戶"></a>用戶</h3><p>new user named zxc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pacman -S sudo</span><br><span class="line">vim /etc/sudoers # uncomment %wheel ALL=(ALL) ALL</span><br><span class="line">useradd -m -u 1001 zxc</span><br><span class="line">passwd zxc</span><br><span class="line">usermod zxc -G wheel</span><br></pre></td></tr></table></figure><h3 id="下載-yay"><a href="#下載-yay" class="headerlink" title="下載 yay"></a>下載 yay</h3><p>do follows as normal user</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://aur.archlinux.org/yay.git</span><br><span class="line">cd yay</span><br><span class="line">makepkg -si</span><br></pre></td></tr></table></figure><h3 id="桌面環境"><a href="#桌面環境" class="headerlink" title="桌面環境"></a>桌面環境</h3><p>i3 擁護派一定要 i3。<br>然後既然是桌機，配備又好，那就漂亮點，裝 deepin 吧 :)</p><p><a href="https://www.ostechnix.com/install-deepin-desktop-environment-arch-linux/" target="_blank" rel="noopener">Deepin reference</a></p><p>值得注意的是，我用上文 lightdm-deepin-greeter 還是 blank screen，<br>lightdm-gtk-greeter 也怪怪的。<br>所以改用 lightdm-webkit2-greeter（需要 yay）。<br><s>然後主題使用 <a href="https://github.com/NoiSek/Aether" target="_blank" rel="noopener">Aether</a>（水尬靠杯）。</s><br>我又叛逃了，現在使用的是 <a href="https://github.com/Litarvan/lightdm-webkit-theme-litarvan" target="_blank" rel="noopener">Litarvan</a>。（因為發現 Aether 不能記憶我上次使用的桌面系統）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S xorg xorg-server deepin deepin-extra</span><br><span class="line">yay -S lightdm-webkit2-greeter</span><br><span class="line">yay -S lightdm-webkit-theme-aether</span><br></pre></td></tr></table></figure><p>接著設定 dm，deepin 用的是 lightdm，這部份 yay 自動幫你做，你可以確認一下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/lightdm/lightdm.conf</span><br></pre></td></tr></table></figure><p>找不到原本的 <code>#greeter-session=example-gtk-gnome</code>，而是已經被換成：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">greeter-session=lightdm-webkit2-greeter</span><br></pre></td></tr></table></figure></p><p>接下來把 dm 加到啟動設定。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start lightdm.service # 在命令列啟用，先是試開不開得起來，以免悲劇</span><br><span class="line">systemctl enable lightdm.service # 成功之後再下這行，開機後永久啟用</span><br></pre></td></tr></table></figure></p><p><a href="https://wiki.archlinux.org/index.php/i3" target="_blank" rel="noopener">i3wm reference</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S i3-gaps i3lock i3status</span><br></pre></td></tr></table></figure><h3 id="中文化-amp-輸入法"><a href="#中文化-amp-輸入法" class="headerlink" title="中文化 &amp; 輸入法"></a>中文化 &amp; 輸入法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yay -S ttf-dejavu ttf-droid ttf-freefont ttf-hack ttf-liberation</span><br><span class="line">yay -S adobe-source-code-pro-fonts cantarell-fonts gsfonts powerline-fonts ttf-freefont</span><br><span class="line">yay -S noto-fonts noto-fonts-emoji ttf-roboto ttf-roboto-mono noto-fonts-cjk</span><br><span class="line">sudo pacman -S ibus ibus-chewing</span><br><span class="line"># ibus-daemon &amp; 才能用喔，要 autostart 要看你是什麼桌面環境，再進行設定。</span><br><span class="line"># 然後進 ibus-setup 添加中文輸入法</span><br></pre></td></tr></table></figure><p><a href="https://askubuntu.com/questions/135548/how-to-add-ibus-to-start-up-applications" target="_blank" rel="noopener">ibus daemon reference</a><br><a href="https://timleland.com/how-to-run-a-linux-program-on-startup/" target="_blank" rel="noopener">daemon program autostart</a></p><h3 id="Google-Chrome"><a href="#Google-Chrome" class="headerlink" title="Google Chrome"></a>Google Chrome</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yay -S google-chrome</span><br><span class="line"># or chromium</span><br><span class="line">sudo pacman -S chromium</span><br></pre></td></tr></table></figure><p>reference: <a href="https://wiki.archlinux.org/index.php/Installation_guide" target="_blank" rel="noopener">archlinux wiki</a> <a href="https://blog.allenchou.cc/arch-linux-tutorial/" target="_blank" rel="noopener">電腦故我在</a></p>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;
裝 Arch 第二次就上手～
&lt;/center&gt;
    
    </summary>
    
      <category term="Note" scheme="http://nobodyzxc.github.io/categories/Note/"/>
    
    
      <category term="linux" scheme="http://nobodyzxc.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>functional thursday ＃73</title>
    <link href="http://nobodyzxc.github.io/2019/05/03/pi-cal/"/>
    <id>http://nobodyzxc.github.io/2019/05/03/pi-cal/</id>
    <published>2019-05-03T02:45:51.000Z</published>
    <updated>2020-08-16T12:12:16.558Z</updated>
    
    <content type="html"><![CDATA[<center>π-calculas 不負責任筆記</center><a id="more"></a><h2 id="Concurrency-vs-Parallelism"><a href="#Concurrency-vs-Parallelism" class="headerlink" title="Concurrency vs Parallelism"></a>Concurrency vs Parallelism</h2><p>compile normal program into parallelism program? Hard!</p><p>make changes on program as little as possible!</p><ul><li>parallelism ⇒ multi-processor, multi-processes</li><li>concurrency ⇒ single-processor, multi-processes</li></ul><p>make write wrong program harder?</p><h3 id="Concurrent-model"><a href="#Concurrent-model" class="headerlink" title="Concurrent model"></a>Concurrent model</h3><ul><li>CSP ⇒ process - process event</li><li>π-calculas ⇒ channel - channel message passing</li></ul><p>process algebra</p><blockquote><p>π-calculas is the most complex one, but useful</p></blockquote><h2 id="π-calculas"><a href="#π-calculas" class="headerlink" title="π-calculas"></a>π-calculas</h2><h3 id="Send-and-receive-are-atomic-operation"><a href="#Send-and-receive-are-atomic-operation" class="headerlink" title="Send and receive are atomic operation"></a>Send and receive are atomic operation</h3><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SquareServer</span> = c(x) . c&lt;x^<span class="number">2</span>&gt; . <span class="type">SquareServer</span></span><br><span class="line"><span class="comment">-- SquareServer is recursive</span></span><br><span class="line"></span><br><span class="line"><span class="type">P1</span> = c&lt;<span class="number">3</span>&gt; . c(x) . ∅</span><br><span class="line"><span class="comment">-- a client want to get square of 3</span></span><br><span class="line"></span><br><span class="line"><span class="type">P2</span> = c&lt;<span class="number">4</span>&gt; . c(y) . ∅</span><br><span class="line"><span class="comment">-- a client want to get square of 4</span></span><br><span class="line"></span><br><span class="line"><span class="title">main</span> = <span class="type">SquareServer</span> | <span class="type">P1</span></span><br><span class="line"><span class="comment">-- run SquareServer, P1 at the smae time.</span></span><br><span class="line"></span><br><span class="line"><span class="title">let</span> &lt; &gt; = send</span><br><span class="line"><span class="title">let</span> ( ) = receive</span><br><span class="line"><span class="title">let</span>  c  = channel</span><br><span class="line"><span class="title">let</span>  .  = end</span><br><span class="line"><span class="title">let</span>  ∅  = stop</span><br></pre></td></tr></table></figure><h3 id="Error"><a href="#Error" class="headerlink" title="Error?"></a>Error?</h3><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SumServer</span> = <span class="type">C</span>(x) . <span class="type">C</span>(y) . <span class="type">C</span>(x + y) . <span class="type">SumServer</span></span><br><span class="line"><span class="type">P1</span> = <span class="type">C</span>&lt;<span class="number">3</span>&gt; . <span class="type">C</span>&lt;<span class="number">5</span>&gt; . <span class="type">C</span>(x) . ∅</span><br><span class="line"><span class="type">P1</span> = <span class="type">C</span>&lt;<span class="number">4</span>&gt; . <span class="type">C</span>&lt;<span class="number">6</span>&gt; . <span class="type">C</span>(x) . ∅</span><br><span class="line"></span><br><span class="line"><span class="comment">-- may cause race or deadlock</span></span><br></pre></td></tr></table></figure><h3 id="Give-every-process-unique-channel"><a href="#Give-every-process-unique-channel" class="headerlink" title="Give every process unique channel!"></a>Give every process unique channel!</h3><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SumServer</span> = νd . c&lt;d&gt; . d(x) . d(y) . d&lt;x + y&gt; . <span class="type">SumServer</span></span><br><span class="line"><span class="type">P1</span> = c(d) . d&lt;<span class="number">3</span>&gt; . d&lt;<span class="number">5</span>&gt; . d(x) . ∅</span><br><span class="line"><span class="type">P2</span> = c(d) . d&lt;<span class="number">6</span>&gt; . d&lt;<span class="number">4</span>&gt; . d(x) . ∅</span><br><span class="line"></span><br><span class="line"><span class="type">SumServer</span> | <span class="type">P2</span> | <span class="type">P1</span></span><br><span class="line"><span class="comment">-- no race or deadlock!</span></span><br></pre></td></tr></table></figure><h3 id="More-powerful-server"><a href="#More-powerful-server" class="headerlink" title="More powerful server?"></a>More powerful server?</h3><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SumServer</span> = (νd . c&lt;d&gt; . d(x) . d(y) . d&lt;x + y&gt; . ∅) | <span class="type">SumServer</span></span><br><span class="line"><span class="comment">-- calculate and provide other service at the same time!</span></span><br></pre></td></tr></table></figure><h3 id="Define-such-operator"><a href="#Define-such-operator" class="headerlink" title="Define such operator"></a>Define such operator</h3><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">P</span> = !<span class="type">Q</span> = <span class="type">Q</span> | <span class="type">P</span> = <span class="type">Q</span> | <span class="type">Q</span> | <span class="type">Q</span> | ...</span><br></pre></td></tr></table></figure><h3 id="Math-server"><a href="#Math-server" class="headerlink" title="Math server"></a>Math server</h3><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- ⊳ select</span></span><br><span class="line"><span class="comment">-- ⊲ choice</span></span><br><span class="line"></span><br><span class="line"><span class="type">MathServer</span> = νc . ms&lt;c&gt;</span><br><span class="line"></span><br><span class="line"><span class="title">where</span></span><br><span class="line">   c ⊳ &#123; <span class="type">ADD</span> → c(x) . c(y) . c&lt;x + y&gt; . ∅;</span><br><span class="line">         <span class="type">NEG</span> → c(x) . c(-x) . ∅&#125; | <span class="type">MathServer</span></span><br><span class="line"></span><br><span class="line"><span class="title">user</span> = ms(c) . c ⊲ <span class="type">ADD</span> . c&lt;<span class="number">3</span>&gt; . c&lt;<span class="number">4</span>&gt; . c(x) . ∅</span><br></pre></td></tr></table></figure><h3 id="MathServer-throw-select-operation-how"><a href="#MathServer-throw-select-operation-how" class="headerlink" title="MathServer throw select operation? how?"></a>MathServer throw select operation? how?</h3><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">MathServer</span> = νc . ms&lt;c&gt; . worker c | <span class="type">MathServer</span></span><br><span class="line"></span><br><span class="line"><span class="title">worker</span> c = c ⊳ &#123;</span><br><span class="line">     <span class="type">ADD</span> → c(x) . c(y) . c&lt;x + y&gt; . worker c;</span><br><span class="line">     <span class="type">NEG</span> → c(x) . c(-x) . worker c;</span><br><span class="line">     <span class="type">END</span> → ∅&#125; | <span class="type">MathServer</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- worker need to receive "c" ?! function call?</span></span><br><span class="line"></span><br><span class="line"><span class="title">user</span> = ms(c) . c ⊲ <span class="type">ADD</span> . c&lt;<span class="number">3</span>&gt; . c&lt;<span class="number">4</span>&gt; . c(x) . ∅</span><br></pre></td></tr></table></figure><h3 id="No-function-call-use-a-w-orker-channel-to-pass-“c”"><a href="#No-function-call-use-a-w-orker-channel-to-pass-“c”" class="headerlink" title="No function call! use a w(orker) channel to pass “c”"></a>No function call! use a w(orker) channel to pass “c”</h3><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">MathServer</span> = νc . ms&lt;c&gt; . w&lt;c&gt; | <span class="type">MathServer</span></span><br><span class="line"></span><br><span class="line"><span class="title">worker</span> = !(w(c) . c ⊳ &#123;</span><br><span class="line">           <span class="type">ADD</span> → c(x) . c(y) . c&lt;x + y&gt; . w&lt;c&gt; . ∅ ;</span><br><span class="line">           <span class="type">NEG</span> → c(x) . c(-x) . w&lt;c&gt; . ∅;</span><br><span class="line">           <span class="type">END</span> → ∅&#125;)</span><br></pre></td></tr></table></figure><h3 id="Dinning-phylosophers-in-π-calculas"><a href="#Dinning-phylosophers-in-π-calculas" class="headerlink" title="Dinning phylosophers in π-calculas"></a>Dinning phylosophers in π-calculas</h3><blockquote><p>omit</p></blockquote><h3 id="Basic-Rules"><a href="#Basic-Rules" class="headerlink" title="Basic Rules"></a>Basic Rules</h3><p>identity and association rule</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="type">P</span> | <span class="type">Q</span>) | <span class="type">R</span> ≡ <span class="type">P</span> (<span class="type">Q</span> | <span class="type">R</span>)</span><br><span class="line"><span class="type">P</span> | <span class="type">Q</span> ≡ <span class="type">Q</span> | <span class="type">P</span></span><br><span class="line"><span class="type">P</span> | ∅ ≡ <span class="type">P</span></span><br><span class="line"></span><br><span class="line"><span class="type">P</span> ≡ <span class="type">Q</span> ⇒ <span class="type">R</span> | <span class="type">P</span> == <span class="type">R</span> | <span class="type">Q</span></span><br></pre></td></tr></table></figure><p>reduction rule</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">proc</span> = a&lt;x&gt; . <span class="type">P</span> | a(y) . <span class="type">Q</span> → <span class="type">P</span> | <span class="type">Q</span> [x / y]</span><br><span class="line"><span class="comment">-- should substitute y to x fisrt(?)</span></span><br></pre></td></tr></table></figure><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">w</span>&lt;a&gt; . a&lt;<span class="number">3</span>&gt; . <span class="type">P</span> | w(z) . z(x) . b&lt;x + <span class="number">3</span>&gt;</span><br><span class="line">→ a&lt;<span class="number">3</span>&gt; . <span class="type">P</span> | a(x) . b&lt;x + <span class="number">3</span>&gt;</span><br></pre></td></tr></table></figure><p>axiom relating restriction and parallel</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(νx . <span class="type">P</span>) | <span class="type">Q</span> ≡ νx . (<span class="type">P</span> | <span class="type">Q</span>) <span class="keyword">if</span> <span class="type">Q</span> not contains x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(νa . w&lt;a&gt; . a&lt;<span class="number">3</span>&gt; . <span class="type">P</span>) | w(z) . z(x) . b&lt;x + <span class="number">3</span>&gt;</span><br><span class="line">≡ νa(w &lt;a&gt; . a&lt;<span class="number">3</span>&gt; . <span class="type">P</span> | w(z) . z(x) . b&lt;x + <span class="number">3</span>&gt;)</span><br><span class="line">→ νa(<span class="type">P</span> | b&lt;<span class="number">6</span>&gt;)</span><br><span class="line">...</span><br><span class="line">→ νa . ∅</span><br><span class="line">→ ∅</span><br></pre></td></tr></table></figure><h2 id="Type-system-in-π-calculas"><a href="#Type-system-in-π-calculas" class="headerlink" title="Type system in π-calculas"></a>Type system in π-calculas</h2><ul><li>process is untyped</li><li>channel is typed</li></ul><p>Γ ⊢ P</p><h3 id="Dual-type"><a href="#Dual-type" class="headerlink" title="Dual type"></a>Dual type</h3><p>$c : (?Int . !Int . ∅)^{⊥} = !Int . ?Int . ∅$</p><h3 id="Type-inference"><a href="#Type-inference" class="headerlink" title="Type inference"></a>Type inference</h3><p>$\frac{Γ, x:t, y:s ⊢ P}{Γ, x:?s . t ⊢ x(y) . P}$</p><p>$\frac{Γ ⊢ y:s \quad Γ, x:t ⊢ P}{Γ, x:!s . t ⊢ x \langle y . P}$</p><blockquote><p>note x:t not x:t, y:s</p></blockquote><hr><p>$\frac{Γ_{1} ⊢ P \quad Γ_{2} ⊢ Q}{Γ_{1} ∘ Γ_{2} ⊢ P | Q}$</p><hr><p>if $x ∈ Γ_{1}$ is $t$<br>then $x ∈ Γ_{2}$ need to be $t^{⊥}$</p><blockquote><p>type preservation</p></blockquote><p>Γ ⊢ e : τ ∧ e -&gt; e’ ⇒ Γ ⊢ e’ : τ</p><p>Γ ⊢ e : τ</p><ul><li>e value</li><li>∃ e’, e → e’</li></ul><h3 id="linear-logic"><a href="#linear-logic" class="headerlink" title="linear logic"></a>linear logic</h3><p>cut rule</p>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;
π-calculas 不負責任筆記
&lt;/center&gt;
    
    </summary>
    
      <category term="Memoir" scheme="http://nobodyzxc.github.io/categories/Memoir/"/>
    
    
      <category term="lambda" scheme="http://nobodyzxc.github.io/tags/lambda/"/>
    
  </entry>
  
  <entry>
    <title>FLOLAC&#39;18</title>
    <link href="http://nobodyzxc.github.io/2018/07/27/flolac18/"/>
    <id>http://nobodyzxc.github.io/2018/07/27/flolac18/</id>
    <published>2018-07-27T15:38:45.000Z</published>
    <updated>2020-08-16T12:11:21.225Z</updated>
    
    <content type="html"><![CDATA[<center>為期兩個禮拜的課程結束，我收穫到了什麼呢？</center><a id="more"></a><h2 id="楔子"><a href="#楔子" class="headerlink" title="楔子"></a>楔子</h2><p>對 Functional 的追求，<br>我隻身一人到了台大上課，<br>然而心中的那份悸動，<br>究竟能不能被滿足呢？</p><p>在集訓前，因為專題和教授會面，<br>偶然得知了講師竟然是高中校友，<br>不過因為我高中不是電研社，<br>所以對於這位大我十屆的學長感到非常陌生。</p><p>看了他的部落格，<br>望著那豐富的經歷，<br>對自己研究的東西侃侃而談，<br>以及對於教學的心得，<br>友人們的回應等等，<br>是和自己截然不同的角色呢。</p><p>漸漸的知道自己周遭，<br>也是有人受到相同的東西吸引，<br>投入相關的領域，<br>開始覺得不是那麼的孤獨。</p><p>不過光是受到吸引是不夠的，<br>要付出才能夠積累。<br>希望我不再獨行。</p><blockquote><p>結果去那還是沒認識半個人 XD</p></blockquote><p>接下來會記一下學到的東西吧。<br>課程有四部份，以下摘自教材，<br>為我最有印象的幾個部份。</p><h2 id="函數式編程"><a href="#函數式編程" class="headerlink" title="函數式編程"></a>函數式編程</h2><blockquote><p>Functional Programming</p></blockquote><h3 id="Induction"><a href="#Induction" class="headerlink" title="Induction"></a>Induction</h3><p>這門課主要不是在介紹 Haskell Fancy 的 Features，<br>而是以 Proof 和 Programming 做結合，想要證明一些性質。<br>像是 <code>take n xs ++ drop n xs == xs</code>。</p><p>介紹了一些 Haskell 基本的東西後，<br>玩過了 Wholemeal Programming 後，<br>一切便都從 Induction 開始。</p><p>就以證明 <code>take n xs ++ drop n xs == xs</code> 為例吧。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">take</span> n [] ++ drop n [] == [] ,valid.</span><br><span class="line"></span><br><span class="line"><span class="title">take</span> n (x:xs) ++ drop n (x:xs)</span><br><span class="line"></span><br><span class="line">=   &#123;       by take's definition       &#125;</span><br><span class="line"></span><br><span class="line">(x : take (n - <span class="number">1</span>) xs) ++ drop (n - <span class="number">1</span>) xs</span><br><span class="line"></span><br><span class="line">=   &#123;       by ++'s property,</span><br><span class="line">             [] ++ ys == ys,</span><br><span class="line">       (x:xs) ++ ys == x : (xs ++ ys)  &#125;</span><br><span class="line"></span><br><span class="line"><span class="title">x</span> : (take (n - <span class="number">1</span>) xs ++ drop (n - <span class="number">1</span>) xs)</span><br><span class="line"></span><br><span class="line">=   &#123;           by induction           &#125;</span><br><span class="line"></span><br><span class="line"><span class="title">x</span> : xs, valid.</span><br></pre></td></tr></table></figure><h3 id="Fold-Fusion"><a href="#Fold-Fusion" class="headerlink" title="Fold-Fusion"></a>Fold-Fusion</h3><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- consider</span></span><br><span class="line"><span class="title">square</span> x = x * x</span><br><span class="line"></span><br><span class="line"><span class="title">sumsq</span> xs = sum (map square xs)</span><br></pre></td></tr></table></figure><p>其中 sumsq 的複雜度是 O(2N)，<br>先做出一個 square 後的 list 再 sum 起來。</p><p>但我們應該可以將它化成 O(N) 吧？<br>一邊 sum 一邊 square。</p><p>例如改寫成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sumsq = foldr (\e acc -&gt; square e + acc) 0</span><br></pre></td></tr></table></figure></p><p>如此的轉換稱作 fold fusion。</p><p><strong>Theorem</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given f :: a → b → b,</span><br><span class="line">      e :: b</span><br><span class="line">      h :: b → c</span><br><span class="line">and   g :: a → c → c, we have</span><br></pre></td></tr></table></figure></p><blockquote><p><code>h . foldr f e = foldr g (h e)</code>, if <code>h (f x y) = g x (h y)</code> for all x and y.</p></blockquote><p>那這個 g function 該如何推導呢？<br>看起來最重要的就是這個 g function 了啊。</p><p>我們以 sumsq 做例子。<br>首先，我們要將 <code>h . foldr f e</code> 和 <code>sum . map square</code> 做匹配。</p><p>很直覺地 <code>h == sum</code> 而 <code>map square == foldr f e</code><br>將 map 化為 foldr : <code>map f == foldr (mf f) where mf f = \e acc -&gt; f e : acc</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">map square</span><br><span class="line">== foldr (mf square) []</span><br><span class="line">== foldr (e acc -&gt; square e: acc) []</span><br></pre></td></tr></table></figure><p>所以 <code>h == sum</code>, <code>f == (e acc -&gt; square e: acc)</code>, <code>e == []</code></p><p>利用 <code>h (f x y) = g x (h y)</code></p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">h</span> (f x y)</span><br><span class="line"></span><br><span class="line">= &#123; match &#125;</span><br><span class="line"></span><br><span class="line"><span class="title">sum</span> ((e acc -&gt; square e : acc) x xs)</span><br><span class="line"></span><br><span class="line">= &#123; elimination lambda &#125;</span><br><span class="line"></span><br><span class="line"><span class="title">sum</span> (square x : xs)</span><br><span class="line"></span><br><span class="line">= &#123; definition <span class="keyword">of</span> sum &#125;</span><br><span class="line"></span><br><span class="line"><span class="title">square</span> x + sum xs</span><br><span class="line"></span><br><span class="line">= &#123; <span class="keyword">let</span> ssq x y = square x + y &#125;</span><br><span class="line"></span><br><span class="line"><span class="title">ssq</span> x (sum xs)</span><br><span class="line"></span><br><span class="line">= &#123; match &#125;</span><br><span class="line"></span><br><span class="line"><span class="title">g</span> x (h y)</span><br></pre></td></tr></table></figure><p>所得 <code>g == ssq</code>, <code>h == sum</code>, <code>xs == []</code></p><p>最後由 <code>h . foldr f e = foldr g (h e)</code> 得到</p><p><code>sum . foldr (mf square) []) == foldr ssq (sum [])</code></p><p>即為 <code>foldr ssq 0</code>，就是原先改寫的 <code>foldr (\e acc -&gt; square e + acc) 0</code></p><h3 id="Reduce-Complixity-by-Tupling"><a href="#Reduce-Complixity-by-Tupling" class="headerlink" title="Reduce Complixity by Tupling"></a>Reduce Complixity by Tupling</h3><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- consider</span></span><br><span class="line"><span class="title">steep</span> [] = <span class="type">True</span></span><br><span class="line"><span class="title">steep</span> (x:xs) = steep xs &amp;&amp; x &gt; sum xs</span><br></pre></td></tr></table></figure><p>steep 用來判斷一 List 之元素差是否保持陡峭。<br>如果該元素大於其後所有元素之和回傳 True 反之 False。</p><p>考慮其複雜度，<br>呼叫 steep 有 n 次，每次 steep 中的 sum 又需要 n 的複雜度，<br>所以複雜度是 O(N^2)。</p><p>那有沒有辦法降低複雜度呢？<br>比如說每次呼叫 steep 時一邊計算 sum？<br>為了一次回傳兩個值，我們使用 tuple。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">steepsum</span> xs = (steep xs, sum xs)</span><br></pre></td></tr></table></figure><p>如此，<code>steep xs = fst $ steepsum xs</code></p><p>現在，我們將 steepsum 變成 recursive function，<br>實現一邊算 steep 一邊算 sum。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">steepsum</span> (x:xs)</span><br><span class="line"></span><br><span class="line">= &#123; definition <span class="keyword">of</span> steepsum &#125;</span><br><span class="line"></span><br><span class="line">(steep (x:xs), sum (x:xs))</span><br><span class="line"></span><br><span class="line">= &#123; definition <span class="keyword">of</span> steep and sum &#125;</span><br><span class="line"></span><br><span class="line">(steep xs &amp;&amp; x &gt; sum xs, x + sum xs)</span><br><span class="line"></span><br><span class="line">= &#123; extracting sub expressions &#125;</span><br><span class="line"></span><br><span class="line">(sp &amp;&amp; x &gt; sm, x + sm)</span><br><span class="line">    <span class="keyword">where</span> (sp, sm) = steepsum xs</span><br></pre></td></tr></table></figure><p>至此，我們成功的將 O(N^2) 的 steep 改寫成 O(N) 的 steep。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">steep</span> [] = <span class="type">True</span></span><br><span class="line"><span class="title">steep</span> (x:xs) = steep xs &amp;&amp; x &gt; sum xs</span><br><span class="line"></span><br><span class="line"><span class="comment">-- transform</span></span><br><span class="line"></span><br><span class="line"><span class="title">steep</span> xs = fst $ steepsum xs</span><br><span class="line"></span><br><span class="line"><span class="title">steepsum</span> [] = (<span class="type">True</span>, <span class="number">0</span>)</span><br><span class="line"><span class="title">steepsum</span> xs = (sp &amp;&amp; x &gt; sm, x + sm)</span><br><span class="line">   <span class="keyword">where</span> (sp, sm) = steepsum xs</span><br></pre></td></tr></table></figure><h3 id="Monad"><a href="#Monad" class="headerlink" title="Monad"></a>Monad</h3><p>這又是另一段故事了，有時間再說 XD<br><del>或者就跳過了，反正對於 Monad，我有預感我會自開一篇</del></p><h2 id="邏輯"><a href="#邏輯" class="headerlink" title="邏輯"></a>邏輯</h2><blockquote><p>Logic</p></blockquote><h3 id="Instuitionistic-Logic-and-Nature-Induction"><a href="#Instuitionistic-Logic-and-Nature-Induction" class="headerlink" title="Instuitionistic Logic and Nature Induction"></a>Instuitionistic Logic and Nature Induction</h3><p>這門課主要講的是直覺邏輯 (Instuitionistic Logic)，<br>跟之前在學校學的古典邏輯不太一樣。</p><p>直覺邏輯系統沒有排中律 ( ⊢ q ∨ ¬q )，<br>但這不意謂著直覺邏輯比較弱，<br>一個邏輯系統的強弱倚賴於將命題歸類的能力，<br>從某種意義來說，<br>推不出排中律意謂著直覺邏輯更加嚴格。</p><p>在直覺邏輯的 rule 大部分和古典邏輯相同。<br>值得注意的是，直覺邏輯沒有 double negation 的 rule。</p><p>而 negation 的部份，應該是相同的</p><p>~I: φ → ⊥ // ¬φ<br>~I: [A … F] // ~A</p><p>這裡學到的是寫成 tree 的樣子<br>而學校學的 Natural Deduction 是寫成 block</p><p>然後 twitter 有<a href="https://twitter.com/ipc_bot?lang=zh-tw" target="_blank" rel="noopener">這個 bot</a> 可以玩。他可以將你輸入的命題作自動推導。</p><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p><blockquote class="twitter-tweet" data-lang="en"><p lang="sl" dir="ltr">.<a href="https://twitter.com/nobodyzxc1?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">@nobodyzxc1</a> Provable. (upn07) <a href="https://t.co/swaCztVhcA" target="_blank" rel="noopener">pic.twitter.com/swaCztVhcA</a></p>&mdash; IPC bot (@ipc_bot) <a href="https://twitter.com/ipc_bot/status/1023874979740282881?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">July 30, 2018</a></blockquote></p><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>之前在學校學的寫成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(A ∧ B) ∧ C → A ∧ (B ∧ C)</span><br><span class="line"></span><br><span class="line">1.1 (A ∧ B) ∧ C                 // Assumeption</span><br><span class="line">1.2     C                       // ∧E by 1.1</span><br><span class="line">1.3     A ∧ B                   // ∧E by 1.1</span><br><span class="line">1.4     A                       // ∧E by 1.3</span><br><span class="line">1.5     B                       // ∧E by 1.3</span><br><span class="line">1.6     (B ∧ C)                 // ∧I by 1.2 and 1.5</span><br><span class="line">1.7     A ∧ (B ∧ C)             // ∧I by 1.4 and 1.6</span><br><span class="line">2   (A ∧ B) ∧ C → A ∧ (B ∧ C) // →I by 1.1 and 1.7</span><br></pre></td></tr></table></figure></p><h3 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h3><p>之後還有提到 semantic of propositional logic 及 first-order logic，<br>一樣有些 introducing 和 elimination 的 rules…<br>就不細講了，可以透過這些 rule 可以做 structural proof 和 nature induction 的 proof。</p><p>最後就是提到 Curry-Howard correspondence，<br>將 first-order logic 和 typed lambda calculas 對應起來。</p><p>這門課還有演示了 Agda ，感覺很好玩，<br>用了 <a href="http://aquamacs.org/" target="_blank" rel="noopener">aquamacs</a> 搭配 $\LaTeX$ 的語法，打出了 <a href="https://gist.github.com/josh-hs-ko/3a0ea16a225ca4efbd01428c06b8fdba" target="_blank" rel="noopener">FLOLAC18.agda</a> 啊～</p><p>原來這就是利用程式輔助證明啊。<del>有時間再入坑</del></p><p>然後講師還出了一題用 foldr 定義 foldl，<br>直覺就是 reverse 一下啊，<br>結果隔一節課後補充說只能用 lambda wwwww<br>當下並沒有很認真想，但直覺就是像 CPS 的東東吧。<br>過了幾天，它就在腦中跑出來了…</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">foldl</span> f e xs = foldr (\e acc -&gt; (\b -&gt; acc $ f b e)) id xs $ e</span><br></pre></td></tr></table></figure><h2 id="Lambda-演算與型別"><a href="#Lambda-演算與型別" class="headerlink" title="Lambda 演算與型別"></a>Lambda 演算與型別</h2><blockquote><p>λ Calculas and Types</p></blockquote><p>先是用 Formal Language 定義了由 0 | succ | add 組成的數。<br>然後介紹了 SI。</p><h3 id="Syntax-of-Lambda-Calculas"><a href="#Syntax-of-Lambda-Calculas" class="headerlink" title="Syntax of Lambda Calculas"></a>Syntax of Lambda Calculas</h3><p>第二節課才進到 lambda calculas，<br>lambda form 很簡單，只有 variable, application, abstraction 三條規則。</p><p>然後就用 lambda 定義了 tuple, fst, snd, nature numbers, boolean…</p><p>α conversion, β conversion 啦，<br>大概就是我之前在網路上看過的那些了。</p><p>然後提到的 Free and Bound Variables，<br>之前在學校 LICS 課討論的 first-order logic 蠻像的。<br>(那時候 LICS 討論 admissiable 討論蠻久的…)</p><h3 id="Properties-of-Lambda-Calculas"><a href="#Properties-of-Lambda-Calculas" class="headerlink" title="Properties of Lambda Calculas"></a>Properties of Lambda Calculas</h3><p>這邊提到的 Evaluation Strategies，<br>剛好之前也有看過，但沒有和 Haskell 產生連結，</p><ul><li><p>Call-by-value strategie<br> rightmost-outermost but not inside any λ-abstraction</p><blockquote><p>ex: Scheme</p></blockquote></li><li><p>Call-by-name strategie<br> leftmost-outermost but not inside any λ-abstraction</p><blockquote><p>ex: Haskell</p></blockquote></li></ul><p>之前寫過 mini Scheme 的 eval/apply 終於知道和 Haskell 差在哪裡了。<br>這也是讓 Haskell Lazy 的原因啊。(Lazy Evaluation 為<strong>一種</strong> call-by-name 的方法)</p><p>之前看 call-by-name 只是覺得會有用這麼麻煩的方法求值的實現嗎？<br>用 Call-by-value 不是很好嗎… 原來 Haskell 就是。</p><p>算是把以前的惑又解更開了。</p><p>有時間把 <a href="https://en.wikipedia.org/wiki/Evaluation_strategy" target="_blank" rel="noopener">Wiki</a> 看看吧。</p><h3 id="Simple-typed-Lambda-Calculas-and-System-F"><a href="#Simple-typed-Lambda-Calculas-and-System-F" class="headerlink" title="Simple typed Lambda Calculas and System F"></a>Simple typed Lambda Calculas and System F</h3><p>算是會做 lambda calculas 的 type derivation…</p><p>但是老實說，並沒有把 System F 搞得很清楚 &gt;&lt;</p><h2 id="並行計算模型與訊程型別"><a href="#並行計算模型與訊程型別" class="headerlink" title="並行計算模型與訊程型別"></a>並行計算模型與訊程型別</h2><blockquote><p>Models of concurrent computation and session types</p></blockquote><p>重點就在 π Calculas，一堆 dual types 的 derivation…</p><p>dual types 確保了通訊雙方 type 相對一致，確立了安全性。</p><p>π Calculas 有蠻多版本的，然後由簡單到複雜…</p><p>感覺比 λ Calculas 複雜啊～～看得眼睛花，<br>不過這門相較於其他，算是比較簡單的了。</p><p>講師使用 <a href="http://www.scribble.org/" target="_blank" rel="noopener">Scribble</a> 寫了簡單的 protocal 作為示範。<br>其中 IDE 的 type checking 讓你在寫的時候就知道自己傳收兩邊的 type 有沒有寫錯。</p><h2 id="Talk-Racket"><a href="#Talk-Racket" class="headerlink" title="Talk (Racket)"></a>Talk (Racket)</h2><p>以前學 Scheme 用的就是 Racket，<br>沒有寫很多程式，但知道這語言潛力很大，<br>但就是沒有一個好好的介紹，讓我入門。</p><p>Talk 介紹了 Racket，才知道他的強大。</p><p>之前看知乎上，談論到 Racket 的 Macro 很棒，<br>但我都知其然，而不知其所以然。</p><p>今天總算是見識到啦&gt;&lt;</p><blockquote><h1 id="lang-power"><a href="#lang-power" class="headerlink" title="lang power"></a>lang power</h1></blockquote><p>以後 slide 也靠 Slideshow 轉 Markdown 啦～<br><del>之前還不知道 Racket 有 Slideshow，還用 landslide 轉 Markdown (一個 Python 寫的工具)</del></p><object width="100%" height="400" data="/files/flolac-2018-racket-sharing.pdf"></object><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>flolac 結束幾天後，<br>在 telegram 上的一個前端群組，<br>偶然發現一位網友在說 type，<br>其中描述的像是 lambda calculas (haskell) 中的 type，<br>然後又提到 curry howard isomorphism，</p><p>…</p><p>這不就是這次上的東西嗎？</p><p>一問之下才發現，他是那坐在我後面幾排，<br>那位旁聽的高中生啊 XD</p><p>算是結下了緣吧 :)</p>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;
為期兩個禮拜的課程結束，我收穫到了什麼呢？
&lt;/center&gt;
    
    </summary>
    
      <category term="Memoir" scheme="http://nobodyzxc.github.io/categories/Memoir/"/>
    
    
      <category term="logic" scheme="http://nobodyzxc.github.io/tags/logic/"/>
    
      <category term="fp" scheme="http://nobodyzxc.github.io/tags/fp/"/>
    
      <category term="lambda" scheme="http://nobodyzxc.github.io/tags/lambda/"/>
    
      <category term="flolac" scheme="http://nobodyzxc.github.io/tags/flolac/"/>
    
  </entry>
  
  <entry>
    <title>feedback</title>
    <link href="http://nobodyzxc.github.io/2018/05/22/feedback/"/>
    <id>http://nobodyzxc.github.io/2018/05/22/feedback/</id>
    <published>2018-05-22T05:35:31.000Z</published>
    <updated>2020-08-16T12:11:18.592Z</updated>
    
    <content type="html"><![CDATA[<center>上程式語言課，給老師的回饋。</center><a id="more"></a><blockquote><p>葉丙成老師兩篇關於主修 CS 的文章</p><p>102657 ( CK ) 2018-03-06 10:59 0<br>想聽聽聽同學對這篇文章的看法。</p><p> 現在學 CS 會不會太晚？在程式設計之外，更該想「如何創造價值」</p><p><a href="https://opinion.cw.com.tw/blog/profile/215/article/6232" target="_blank" rel="noopener">https://opinion.cw.com.tw/blog/profile/215/article/6232</a></p></blockquote><p>CS 學生的優勢就是浸淫 CS 的時間比別人長。</p><p>隨著各種技術的發展，整個工具鏈的架構也越來越複雜。<br>雖說抽象化降低了工具使用的難度，<br>但是有些工具的使用也是需要經驗累積的。</p><p>那些工具、技術可能就是資訊科系學生可以投資的吧。<br>比如 server 管理等等。</p><p>而以上終究只是混口飯吃的等級罷了。<br>只要別人肯下苦工，終究還是會被替代掉的。</p><p>相對於工具的使用，CS 的學生應培養解決問題的能力。<br>更準確的說，是用程式化思維或是用電腦來解決問題的能力。<br>（用程式化、抽象化思維看待所有事物的能力？）</p><p>CS 學生對整個 CS 領域見識應具有廣度和深度。<br>別人也會程式，但我會的比你深比你多。<br>別人會的是工具的使用，我們會的是工具的挑選甚至是工具的創造。</p><p>好的工具可以事半功倍。<br>或許是在培養對好工具的獨到眼光。</p><p>就像 GUI 工具只會限制用戶，<br>Text Mode 才能釋放所有能量 (X</p><p>學過 CS 的人，層次要是更高的。<br>我覺得甚至是要具備一些哲學層面的東西。</p><p>設計哲學、解決問題的哲學、甚至是生活的哲學 (Link) 等等。</p><p>如此開發效率才能更高，產物才能更優雅。<br>其他科系的可能就只是堪用而已。</p><p>遇到問題，應該要能快速擬出相關的解決辦法。<br>而遇到的問題類型可以是很廣的。</p><p>學習洞悉問題的本質，才能對全局掌握更加透徹。</p><p>也算是在培養觸類旁通（抽象）的能力吧。</p><p>還有一點是快速上手工具的能力。<br>玩 Linux 的東西也是為了培養這種能力吧。</p><p>折騰過得東西多了，該如何解決甚至是找替代方案，<br>都會比較有 sense。</p><p>培養減少繞路的情況發生。<br>能對問題有獨到的見解，以更抽象通用迅捷的方式解決問題。</p><p>身邊的例子。同學會，同學都確立方向，很多人都要往 AI 走。<br>電資學院、電機系、資工系。<br>看到電機系 CS 組使用 python。<br>因為性質相似，所以想和資工的同學討論語言的東西。</p><p>發現他摸過得語言比較少。python 摸過，但是覺得把 python 當工具用。</p><p>不把 python 只是當工具，<br>對語言本身的思想哲學有更深入的理解，<br>應該就會有相對其他系有相對的優勢了。</p><p>有更好的答案，<br>就是<a href="https://www.zhihu.com/question/31034164/answer/553533545" target="_blank" rel="noopener">編程的能力</a> Orz</p>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;
上程式語言課，給老師的回饋。
&lt;/center&gt;
    
    </summary>
    
      <category term="Thinking" scheme="http://nobodyzxc.github.io/categories/Thinking/"/>
    
    
  </entry>
  
  <entry>
    <title>A Little Game</title>
    <link href="http://nobodyzxc.github.io/2018/02/21/A-Little-Game/"/>
    <id>http://nobodyzxc.github.io/2018/02/21/A-Little-Game/</id>
    <published>2018-02-21T13:35:51.000Z</published>
    <updated>2020-08-16T12:10:53.188Z</updated>
    
    <content type="html"><![CDATA[<center>這是一年多前，在知乎看到的<a href="http://www.therottingcartridge.com/games/programming/" target="_blank" rel="noopener">小遊戲</a>。<br>那時候玩到感覺就是這遊戲真不簡單，蘊含了很多東西在裡面。<br>這幾天因為朋友說無聊，所以我又翻出來玩（結果他沒玩），<br>感覺得到的東西又不一樣了。<br>感覺從中得到了些東西，所以想探討一下。</center><a id="more"></a><h2 id="傳送門"><a href="#傳送門" class="headerlink" title="傳送門"></a><a href="http://www.therottingcartridge.com/games/programming/" target="_blank" rel="noopener">傳送門</a></h2><p>   ^ 戳他</p><h2 id="玩法介紹"><a href="#玩法介紹" class="headerlink" title="玩法介紹"></a>玩法介紹</h2><p><s>自己摸索吧，這樣最有趣，因為我也是這樣玩的</s></p><p>白色盤面上的工具要用光，而你的任務是利用白色盤面上所有的工具造出左上角的 Goal。<br>其中下面黑色區域則是可選區，你可以拿或不拿其中的工具來完成你的目標。<br>開始用滑鼠拖曳（或點擊）元件，組合出需求吧。</p><h2 id="初見"><a href="#初見" class="headerlink" title="初見"></a>初見</h2><p>剛接觸到這遊戲，是因為看到了在推廣 FP 的貼文。<br>其實那則貼文有兩個遊戲，而此次要提的是我覺得比較好玩的那款。<br>玩完之後馬上推給了同學呢 w</p><p>在這遊戲中，看到了 Currying 的概念，<br>接收了一個部件，一個半完成的工具也是一個工具。<br>而最有趣的是他有 Higher Order Function 的思想</p><blockquote><p>一個產生輸出的工具，亦可拿工具當輸入，甚至回傳工具。</p></blockquote><p>還有偷換概念的部份，<br>他會將原本比較實際的東西漸漸抽象為程式碼，<br>到最後竟然有寫 Code 的感覺。</p><h2 id="再見"><a href="#再見" class="headerlink" title="再見"></a>再見</h2><p>第二次碰的時候，<br>將上次沒玩完（老實說我很好奇為啥那時沒玩完）， 通通跑過了一遍。<br>順便拿家人當實驗品 w<br>在變換的過程中，我發現了 Lambda 的存在。<br>之前旁聽 Haskell 的時候，還對他不熟悉，<br>到現在看過了一點 Lambda Calculus 相關的定義後，<br>這次驚奇的發現在抽象的過程中，竟然跑出了 Lambda Expression，<br>然後最後變成 JS 的 Arrow Function。</p><p>拿給家人玩時，發現普遍會發生一個問題，<br>那就是大家會觀察不到工具的功能。<br>可能是有 FP 經驗，所以我玩起來都知道其中那些東西的象徵意義，<br>或是我玩遊戲比較有 sence，我去注意細節，所以玩起來特別有感覺。<br>可是其他人玩大多都是憑感覺，有些接口也會弄不清楚可不可以接上。<br>這邊就是我覺得他不足的地方了。<br>雖說形狀已經有稍微強調，可是不夠明顯。或許可以用顏色表示。</p><p>還有一些關卡過於簡單，而且因為關卡順序不是很恰當，<br>所以感覺會讓人失去興趣，感到無聊。</p><p>其實這次還發現了一個特點，<br>那就是強制要求要用光白色盤面的規則，<br>除了要讓你照規則走，發現一些 FP 的特性，<br>他也可以闡發一個概念，就是如何使用原本就有的東西，巧妙的修改，<br>而不是重新造輪子（雖然有時會比較快），<br>但是使用原有的函式構造新的函式是 FP 一個重要的思想啊。</p><p>來總括一下此遊戲設計的所有元素吧。</p><p>點出比較重要的幾關吧。</p><ul><li><p>Lv1<br> 提了 atom，如星星，一個基本的資料型態，應該可算 Symbol。<br> 還有就是 tool(function)，可以 input 然後 return 的。<br> （建議動畫可以做好點，不然普通人會把 input x return x 當成沒有事情發生）</p></li><li><p>Lv2<br> tool can take tool as input.</p></li><li><p>Lv3<br> tool can return const , not always variable.<br> and they are all tools.</p></li><li><p>Lv4<br> figure out the tool of black region.</p></li><li><p>Lv5<br> tool can return more atoms.</p></li><li><p>Lv6<br> tool can split the expressoin part.</p></li><li><p>Lv7, 8<br> HOF</p></li><li><p>Lv10<br> tool -&gt; lambda expr</p></li><li><p>Lv11<br> boolean type</p></li><li><p>Lv12, 13<br> boolean expr(function), true and false</p></li><li><p>Lv 22<br> if expression (PP 的會說是 ternary operator)</p></li></ul><p>嘛，還有 List , Map 之類的，懶的說了。</p><p>我很喜歡他偷換概念的部份，不過不要換太快，會令初學者措手不及。</p>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;
這是一年多前，在知乎看到的&lt;a href=&quot;http://www.therottingcartridge.com/games/programming/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;小遊戲&lt;/a&gt;。&lt;br&gt;
那時候玩到感覺就是這遊戲真不簡單，蘊含了很多東西在裡面。&lt;br&gt;
這幾天因為朋友說無聊，所以我又翻出來玩（結果他沒玩），&lt;br&gt;
感覺得到的東西又不一樣了。&lt;br&gt;
感覺從中得到了些東西，所以想探討一下。
&lt;/center&gt;
    
    </summary>
    
      <category term="Fun" scheme="http://nobodyzxc.github.io/categories/Fun/"/>
    
    
      <category term="game" scheme="http://nobodyzxc.github.io/tags/game/"/>
    
      <category term="logic" scheme="http://nobodyzxc.github.io/tags/logic/"/>
    
      <category term="fp" scheme="http://nobodyzxc.github.io/tags/fp/"/>
    
  </entry>
  
  <entry>
    <title>Scheme 初學者眼中的 Haskell</title>
    <link href="http://nobodyzxc.github.io/2018/02/14/HaskellFromScheme/"/>
    <id>http://nobodyzxc.github.io/2018/02/14/HaskellFromScheme/</id>
    <published>2018-02-14T14:44:50.000Z</published>
    <updated>2020-08-16T12:11:23.762Z</updated>
    
    <content type="html"><![CDATA[<center>嘛，情人節，和 Haskell 約個會吧！<br>因為學完 Scheme 後回來看 Haskell，<br>發現有不少地方是已經會的。<br>而我覺得記些基本的東西意義不大，<br>所以改成以一個接觸過 Scheme 的 FP 初學者角度，<br>重新來看待 Haskell 這個語言。</center><a id="more"></a><h2 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h2><h3 id="Pattern-matching"><a href="#Pattern-matching" class="headerlink" title="Pattern matching"></a>Pattern matching</h3><p>我記得王垠的 40 行代碼好像有 require pmatch,<br>所以 Scheme 應該是有以 library 實現 pattern matching 的。</p><p>而 Haskell 則是內建此種語言特性，大概可以有三種地方可以用到。</p><ol><li><p>函數定義，可以少去一些 if else</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 注意 match 的順序性</span></span><br><span class="line"><span class="title">fib</span> <span class="number">0</span> = <span class="number">0</span></span><br><span class="line"><span class="title">fib</span> <span class="number">1</span> = <span class="number">1</span></span><br><span class="line"><span class="title">fib</span> x = fib (x - <span class="number">1</span>) + fib (x - <span class="number">2</span>)</span><br></pre></td></tr></table></figure><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">define</span></span> (<span class="name">fib</span> x) <span class="comment">; 懶得寫 = 所以用 case</span></span><br><span class="line">   (<span class="name"><span class="builtin-name">case</span></span> x      <span class="comment">; 不過 racket 其實是用 equal?</span></span><br><span class="line">      [(<span class="name">0</span>) <span class="number">0</span>]   <span class="comment">; R6RS, R5RS 是用 eqv?</span></span><br><span class="line">      [(<span class="name">1</span>) <span class="number">1</span>]</span><br><span class="line">      [<span class="name"><span class="builtin-name">else</span></span> (<span class="name"><span class="builtin-name">+</span></span> (<span class="name">fib</span> (<span class="name"><span class="builtin-name">-</span></span> x <span class="number">1</span>))</span><br><span class="line">               (<span class="name">fib</span> (<span class="name"><span class="builtin-name">-</span></span> x <span class="number">2</span>)))]))</span><br></pre></td></tr></table></figure></li><li><p>拆 tuple, list</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- as pattern</span></span><br><span class="line"><span class="title">all</span>@a:b = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="comment">-- all == [1, 2, 3]</span></span><br><span class="line"><span class="comment">-- a == 1</span></span><br><span class="line"><span class="comment">-- b == [2, 3]</span></span><br><span class="line"></span><br><span class="line">(a, b, c) = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment">-- a == 1, b == 2, c == 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 結合 1. 定義 sum'</span></span><br><span class="line"><span class="title">sum</span> [] = <span class="number">0</span></span><br><span class="line"><span class="title">sum'</span> (x:xs) = x + (sum' xs)</span><br></pre></td></tr></table></figure></li><li><p>List comprehension 中</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[x + y | (x, y) &lt;-zip [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]]</span><br><span class="line"><span class="comment">--       ^ match</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="Guard"><a href="#Guard" class="headerlink" title="Guard"></a>Guard</h3><p>   感覺之前一直不能接受這個 syntax, 現在看作 cond 就好了。<br>   書中的例子藉由 Guard 定義一個函數。<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">bmiTell</span> bmi <span class="comment">-- *attension! no = here</span></span><br><span class="line">    | bmi &lt;= <span class="number">18.5</span> = <span class="string">"You're underweight, you emo, you!"</span></span><br><span class="line">    | bmi &lt;= <span class="number">25.0</span> = <span class="string">"You're supposedly normal. Pffft, I bet you're ugly!"</span></span><br><span class="line">    | bmi &lt;= <span class="number">30.0</span> = <span class="string">"You're fat! Lose some weight, fatty!"</span></span><br><span class="line">    | otherwise   = <span class="string">"You're a whale, congratulations!"</span></span><br></pre></td></tr></table></figure></p><p>   其實就是</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">define</span></span> (<span class="name">bmiTell</span> bmi)</span><br><span class="line">   (<span class="name"><span class="builtin-name">cond</span></span></span><br><span class="line">      ((<span class="name"><span class="builtin-name">&lt;=</span></span> bmi <span class="number">18.5</span>) <span class="string">"You're underweight, you emo, you!"</span>)</span><br><span class="line">      ((<span class="name"><span class="builtin-name">&lt;=</span></span> bmi <span class="number">25.0</span>) <span class="string">"You're supposedly normal. Pffft, I bet you're ugly!"</span>)</span><br><span class="line">      ((<span class="name"><span class="builtin-name">&lt;=</span></span> bmi <span class="number">30.0</span>) <span class="string">"You're fat! Lose some weight, fatty!"</span>)</span><br><span class="line">      (<span class="name"><span class="builtin-name">else</span></span>          <span class="string">"You're a whale, congratulations!"</span>)))</span><br></pre></td></tr></table></figure><h3 id="Where"><a href="#Where" class="headerlink" title="Where"></a>Where</h3><p>   用於函數定義中，於定義下方加入 where syntax 做簡易的 binding。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">bmiTell</span> weight height <span class="comment">-- *attension! no = here</span></span><br><span class="line">      | bmi &lt;= <span class="number">18.5</span> = <span class="string">"You're underweight, you emo, you!"</span></span><br><span class="line">      | bmi &lt;= <span class="number">25.0</span> = <span class="string">"You're supposedly normal. Pffft, I bet you're ugly!"</span></span><br><span class="line">      | bmi &lt;= <span class="number">30.0</span> = <span class="string">"You're fat! Lose some weight, fatty!"</span></span><br><span class="line">      | otherwise   = <span class="string">"You're a whale, congratulations!"</span></span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">           bim = weight / height ^ <span class="number">2</span></span><br><span class="line">        <span class="comment">-- where 裡面可作 pattern matching 亦可定義函數</span></span><br></pre></td></tr></table></figure><p>   嘛，就是 Scheme 裡的 nested define 嘛。</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">define</span></span> (<span class="name">bmiTell</span> weight height)</span><br><span class="line">   (<span class="name"><span class="builtin-name">define</span></span> bim (<span class="name"><span class="builtin-name">/</span></span> weight (<span class="name"><span class="builtin-name">*</span></span> height height)))</span><br><span class="line">   (<span class="name"><span class="builtin-name">cond</span></span></span><br><span class="line">      ((<span class="name"><span class="builtin-name">&lt;=</span></span> bmi <span class="number">18.5</span>) <span class="string">"You're underweight, you emo, you!"</span>)</span><br><span class="line">      ((<span class="name"><span class="builtin-name">&lt;=</span></span> bmi <span class="number">25.0</span>) <span class="string">"You're supposedly normal. Pffft, I bet you're ugly!"</span>)</span><br><span class="line">      ((<span class="name"><span class="builtin-name">&lt;=</span></span> bmi <span class="number">30.0</span>) <span class="string">"You're fat! Lose some weight, fatty!"</span>)</span><br><span class="line">      (<span class="name"><span class="builtin-name">else</span></span>          <span class="string">"You're a whale, congratulations!"</span>)))</span><br></pre></td></tr></table></figure><h3 id="Let"><a href="#Let" class="headerlink" title="Let"></a>Let</h3><p>   當然也有 let expression，bindings 和 exprs 用 in 關鍵字隔開<br>   bindings 中可以用 pattern matching，也可以用 ; 隔開每個 binding</p><p>   list comprehension 中也可以用 let bind 一些值，注意有效範圍。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">   [nv | (x, y) &lt;- lst, <span class="keyword">let</span> nv = x + y, nv &gt; <span class="number">10</span>]</span><br><span class="line"><span class="comment">--  ^^   x-----------x  ^^^^^^^^^^^^^^  ^^^^^^^</span></span><br></pre></td></tr></table></figure><h3 id="Case"><a href="#Case" class="headerlink" title="Case"></a>Case</h3><p>   pattern matching 本質上是 case exprs 的語法糖。<br>   而在我看來 pattern matching 在 Scheme 中也就是 cond 的語法糖 (null? 等函數去判斷）<br>   所以在 case exprs 可以解決的基本上 Guard 也可以解決，而回歸原始，用 if else 解決。<br>   重點是記得適用場景，Guard 用在 Bool，case 用在 pattern matching。<br>   之前這邊一直沒有摸清楚。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">case</span> expression <span class="keyword">of</span> pattern -&gt; result</span><br><span class="line">                   pattern -&gt; result</span><br><span class="line">                   pattern -&gt; result</span><br></pre></td></tr></table></figure><h3 id="HOF"><a href="#HOF" class="headerlink" title="HOF"></a>HOF</h3><p>   與 Scheme 最大的不同就是 Haskell 會自己做 currying。<br>   善用 currying 特性就可以很自然的做出 partially applied function。<br>   如此就不用再寫 lambda 去餵 HOF 啦～</p><p>   還有就是 map 的力量，Haskell 的 map 是 map :: (a -&gt; b) -&gt; [a] -&gt; [b]，<br>   和 Scheme 的 map 不太一樣，Scheme 因為是動態語言所以 map 吃的 function 彈性比較大。<br>   如 <code>(map + &#39;(1 2 3) &#39;(1 2 3))</code> 後面可以接幾個 list 端看前面 function （加號的話可以無限啦～）。<br>   而 Haskell 要用 + 號則是用 zipWith，<code>zipWith (+) [1, 2, 3] [1, 2, 3]</code>。<br>   Haskell map 和 zipWith 也就只是差在 unary 和 binary，依舊不能和 Scheme map 比。<br>   或許有其他方法吧，這就要研究一下 Haskell 的 var args 用法了。</p><p>   一些 Haskell hof 可以玩玩</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">map, filter,</span><br><span class="line">foldl, foldr, foldl1, foldr1,</span><br><span class="line">scahnl, scanr, scanl1, scanr1</span><br></pre></td></tr></table></figure><blockquote><p>注意 foldl 系列的第一個參數的型態是 (b -&gt; a -&gt; b)<br>所以在寫 lambda 的時候是 (\ e acc -&gt; expr)<br>而 foldr 系列則是 (a -&gt; b -&gt; b)<br>寫 lambda 的時候則是 (\ acc e -&gt; expr)</p></blockquote><h3 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h3><p>   lambda 寫法 <code>\ bindings -&gt; exprs</code></p><h3 id="的使用"><a href="#的使用" class="headerlink" title="$ 的使用"></a>$ 的使用</h3><p>   $ 號使用，一般下一個元素都會當作參數向左結合，<br>   但是前面有 $ 號的話，就可以不用被當成參數，<br>   直接當成 function apply 到右邊（後面）的參數上，<br>   直到完成，再餵回前面去。</p><p>   還有可以將 data 當 func 特性，如 <code>map ($ 3) [(4+),(10*),(^2),sqrt]</code></p><h3 id="Function-composition"><a href="#Function-composition" class="headerlink" title="Function composition"></a>Function composition</h3><p>   嘛，就是 f(g(x)) 可以用 Haskell 寫成 f . g。就是這樣而已！<br>   注意的是 apply to arguments 的部份搭配個 $ , 也就是 f . g $ arg</p><h2 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h2><blockquote><p>transpose 函數可以反轉一組 List 的 List。</p></blockquote><p>光看中文還蠻容易誤解的，但看了他的例子及看了英文後，這不就轉置嗎？</p><p>馬上想到 Python 是用 Scheme, Python 是用 zip (map) 達成，<br>但考慮到 Haskell 的靜態特性，所以把 var arg 裝到一個 list 成為一個新函數。</p><h2 id="Self-suspicion"><a href="#Self-suspicion" class="headerlink" title="Self suspicion"></a>Self suspicion</h2><blockquote><p>以下是一年前做 Note 提出的疑問。</p></blockquote><ul><li>Q: tuple likes struct, while list likes array ?<br>A: 在念計概的時候有提到 record 這個概念，就是不同型態的資料的集合，所以 tuple 和 struct 都可以算是 record 的一種實作吧。不過 Haskell 也有 Record Syntax。而 list 不是 array，就是 linked list，要 array 的話 Scheme 有 vector，Haskell 裡應該也有類似的東西。</li><li>Q: 試想 zip implement, 是 <code>zip (x:xs) (y:ys) = (x, y) : zip xs ys</code> 而不是 list comprehension [… |  x&lt;-xs, y&lt;-ys, …]，這兩種使用 list element 的方式差別是什麼，後者如何以 recursion 實現。並考慮一下迴圈是否有類似的狀況。<br>A: 上述的 List Comprehension 會是兩層迴圈的情形（窮舉），所以沒辦法使用。之後看到唐鳳介紹 FP 時用 Haskell List Comprehension 做的<a href="https://stackoverflow.com/questions/27333923/haskell-write-zip-function-using-list-comprehension" target="_blank" rel="noopener">例子</a>，估計這 List Comprehension 的內部也有個 zip 的實現在用 pattern matching 去為參數配對吧。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;
嘛，情人節，和 Haskell 約個會吧！&lt;br&gt;
因為學完 Scheme 後回來看 Haskell，&lt;br&gt;
發現有不少地方是已經會的。&lt;br&gt;
而我覺得記些基本的東西意義不大，&lt;br&gt;
所以改成以一個接觸過 Scheme 的 FP 初學者角度，&lt;br&gt;
重新來看待 Haskell 這個語言。
&lt;/center&gt;
    
    </summary>
    
      <category term="Note" scheme="http://nobodyzxc.github.io/categories/Note/"/>
    
    
      <category term="fp" scheme="http://nobodyzxc.github.io/tags/fp/"/>
    
      <category term="haskell" scheme="http://nobodyzxc.github.io/tags/haskell/"/>
    
      <category term="scheme" scheme="http://nobodyzxc.github.io/tags/scheme/"/>
    
      <category term="lambda" scheme="http://nobodyzxc.github.io/tags/lambda/"/>
    
  </entry>
  
  <entry>
    <title>Cpp STL Hack</title>
    <link href="http://nobodyzxc.github.io/2017/10/05/cpp-stl/"/>
    <id>http://nobodyzxc.github.io/2017/10/05/cpp-stl/</id>
    <published>2017-10-05T04:30:53.000Z</published>
    <updated>2020-08-16T11:59:16.908Z</updated>
    
    <content type="html"><![CDATA[<center>為了應付比賽，又很久沒有使用 STL，所以做個總攻略。</center><a id="more"></a><h1 id="How-to-start"><a href="#How-to-start" class="headerlink" title="How to start"></a>How to start</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br></pre></td></tr></table></figure><h1 id="pair"><a href="#pair" class="headerlink" title="pair"></a>pair</h1><ul><li><p>Header</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>Non-member funcs</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">            <span class="comment">/* make a pair without assign types */</span></span><br><span class="line">pair&lt;<span class="keyword">int</span> , <span class="built_in">string</span>&gt; pr = make_pair(<span class="number">1</span> , <span class="string">"str"</span>);</span><br><span class="line">            <span class="comment">/* assignment opertor overloading */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* comparaision between pairs */</span></span><br><span class="line"> <span class="built_in">cout</span> &lt;&lt; (make_pair(<span class="number">1</span> , <span class="number">2</span>) &lt; make_pair(<span class="number">1</span> , <span class="number">3</span>)) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">/* 1 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* C++ 11 */</span></span><br><span class="line">swap(pr0 , pr1);</span><br></pre></td></tr></table></figure></li><li><p>Member vars</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cout</span> &lt;&lt; pr.first &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">/* 1 */</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; pr.second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">/* 2 */</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="tuple-C-11"><a href="#tuple-C-11" class="headerlink" title="tuple (C++11)"></a>tuple (<em>C++11</em>)</h1><ul><li><p>Header</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;tuple&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>Non-member funcs</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* make a tuple */</span></span><br><span class="line">tuple&lt;int , char , string&gt; t(10 , 'c' , "string");</span><br><span class="line"></span><br><span class="line"><span class="comment">/* make tuple quickly */</span></span><br><span class="line"><span class="keyword">auto</span> tp = make_tuple(<span class="number">1</span> , <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* get element */</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; get&lt;<span class="number">2</span>&gt;(t) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">/* string */</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h1><ul><li><p>Header</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>How to construct</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> size = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> init_val = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">vi</span><span class="params">(size , init_val)</span></span>;</span><br><span class="line"><span class="comment">/* 1 1 1 1 1 */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; <span class="title">vvi</span><span class="params">(size , <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(size , init_val))</span></span>;</span><br><span class="line"><span class="comment">// 5*5 's 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// or you can alloc by</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; vi2d;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; size ; i++)</span><br><span class="line">   vi2d.push_back(<span class="built_in">vector</span>(size , init_val));</span><br></pre></td></tr></table></figure></li><li><p>How to iterate</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 珍惜生命，多用 auto */</span></span><br><span class="line"><span class="comment">/* iterator 為 .begin() .end() .rbegin() 及 .rend() */</span></span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;::iterator vit = vvi.begin() ;</span><br><span class="line">      vit != vvi.end() ; vit++ , <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>)</span><br><span class="line">  <span class="keyword">for</span>(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it = vit-&gt;begin() ; it != vit-&gt;end() ; it++)</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">' '</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; vvi.size() ; i++ , <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>)</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; vvi[i].size() ; j++)</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; vvi[i][j] &lt;&lt; <span class="string">' '</span> &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure></li><li><p>Member funcs</p><ul><li><p>Capacity and Accessor</p><ul><li><code>.size</code></li><li><code>.empty</code></li><li><code>.front</code></li><li><code>.back</code></li><li><code>.resize</code><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vi.resize(<span class="number">3</span>)</span><br><span class="line"><span class="comment">/* reduce to 3 elms */</span></span><br><span class="line">vi.resize(<span class="number">5</span> , <span class="number">4</span>)</span><br><span class="line"><span class="comment">/* expand to 5 elms and stuff new elms to 4 */</span></span><br><span class="line">vi.resize(<span class="number">10</span>)</span><br><span class="line"><span class="comment">/* expand to 10 elms and stuff new with default val (0) */</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>Modifiers</p><ul><li><code>.push_back</code></li><li><code>.pop_back</code></li><li><code>.insert</code><br><code>.insert(iter , val)</code><br><code>.insert(iter , size_t , val)</code><br><code>.insert(iter , iter_beg , iter_end)</code></li><li><code>.erase</code><br><code>.earse(iter)</code><br><code>.earse(iter_beg , iter_end)</code></li><li><code>.swap</code><br><code>va.swap(vb)</code></li><li><code>.clear</code></li></ul></li></ul></li><li><p>function overloads</p><ul><li>relational</li><li><code>swap</code><br><code>swap(va , vb)</code></li></ul></li></ul><p>ref: <strong><em><a href="https://stackoverflow.com/a/11348411" target="_blank" rel="noopener">std vector C++ — deep or shallow copy</a></em></strong></p><h1 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h1><ul><li><p>Header</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>Member functions</p><ul><li><code>.empty</code></li><li><code>.size</code></li><li><code>.top</code></li><li><code>.push</code></li><li><code>.pop</code></li></ul></li><li>Non-member func<ul><li>relational operator</li></ul></li></ul><h1 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h1><ul><li><p>Header</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>Member functions</p><ul><li><code>.empty</code></li><li><code>.size</code></li><li><code>.front</code></li><li><code>.back</code></li><li><code>.push</code></li><li><code>.pop</code></li></ul></li><li>Non-member func<ul><li>relational operator</li></ul></li></ul><h1 id="priority-queue"><a href="#priority-queue" class="headerlink" title="priority_queue"></a>priority_queue</h1><ul><li><p>Header</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>Member functions</p><ul><li><code>.empty</code></li><li><code>.size</code></li><li><code>.front</code></li><li><code>.back</code></li><li><code>.push</code></li><li><code>.pop</code></li></ul></li><li>Non-member func<ul><li>relational operator</li></ul></li></ul><h1 id="set"><a href="#set" class="headerlink" title="set"></a>set</h1><ul><li><p>Header</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>How to construct</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> data[] = &#123;<span class="number">1</span> , <span class="number">2</span> , <span class="number">3</span> , <span class="number">4</span>&#125;;</span><br><span class="line"><span class="function"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; <span class="title">iset</span><span class="params">(data , data + <span class="number">4</span>)</span></span>;</span><br><span class="line"><span class="comment">/* iter.begin() and iter.end() */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; <span class="title">yset</span><span class="params">(iset)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">float</span> , <span class="keyword">bool</span>(*fp)(<span class="keyword">float</span>)) fset;</span><br></pre></td></tr></table></figure></li><li><p>How to iterate</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* iterator 為 .begin() .end() .rbegin() 及 .rend() */</span></span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it</span><br><span class="line">   = iset.begin() ; it != iset.end() ; it++)</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">' '</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure></li><li><p>Member functions</p><ul><li>Capacity<ul><li><code>.empty</code></li><li><code>.size</code></li><li><code>.max_size</code><br>check if the set has enough size to store elements</li></ul></li><li>Modifiers<ul><li><code>.insert</code><br>insert element</li><li><code>.erase</code><br><code>.erase(iter)</code><br><code>.erase(val)</code><br><code>.erase(iter_beg , iter_end)</code></li><li><code>.swap</code><br>swap two set<br><code>sa.swap(sb)</code></li><li><code>.clear</code></li></ul></li><li>Observers<br>read it yourself</li><li><p>Operations</p><ul><li><code>.find</code></li><li><code>.count</code></li><li><p><code>.lower_bound</code><br>Return iterator to lower bound</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="number">1</span> , <span class="number">2</span> , <span class="number">3</span>&#125;.lower_bound(<span class="number">1</span>)</span><br><span class="line"> ^</span><br><span class="line">&#123;<span class="number">1</span> , <span class="number">3</span> , <span class="number">5</span> , <span class="number">7</span>&#125;.lower_bound(<span class="number">2</span>)</span><br><span class="line">     ^</span><br></pre></td></tr></table></figure></li><li><p><code>.upper_bound</code><br>Return iterator to upper bound</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="number">1</span> , <span class="number">2</span> , <span class="number">3</span>&#125;.upper_bound(<span class="number">2</span>)</span><br><span class="line">         ^</span><br><span class="line">&#123;<span class="number">1</span> , <span class="number">3</span> , <span class="number">5</span> , <span class="number">7</span>&#125;.upper_bound(<span class="number">2</span>)</span><br><span class="line">     ^</span><br></pre></td></tr></table></figure></li><li><p><code>.equal_range</code><br>Get range of equal elements.<br>Return pair of iters</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="number">1</span> , <span class="number">2</span> , <span class="number">3</span>&#125;.equal_range(<span class="number">2</span>)</span><br><span class="line">         ^ second iter</span><br><span class="line">     ^ first iter</span><br><span class="line">&#123;<span class="number">1</span> , <span class="number">3</span> , <span class="number">5</span> , <span class="number">7</span>&#125;.equal_range(<span class="number">2</span>)</span><br><span class="line">     ^ first &amp; second iter</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h1 id="map"><a href="#map" class="headerlink" title="map"></a>map</h1><ul><li><p>Header</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>How to construct</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span> , <span class="keyword">int</span>&gt; dict;</span><br><span class="line">dict[<span class="string">"hello"</span>] = <span class="number">0</span>;</span><br><span class="line">dict[<span class="string">"world"</span>] = <span class="number">1</span>;</span><br><span class="line">map&lt;string , int&gt; ydict(dict.begin() , dict.end());</span><br><span class="line">map&lt;string , int&gt; zdict(dict); /* copy constructor */</span><br></pre></td></tr></table></figure></li><li><p>How to iterate</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* iterator is a pointer to pair */</span></span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">map</span>&lt;<span class="built_in">string</span> , <span class="keyword">int</span>&gt;::iterator</span><br><span class="line">   it = dict.begin() ; it != dict.end() ; it++)</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="string">' '</span> &lt;&lt; it-&gt;second &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure></li><li><p>Member functions</p><ul><li>Capacity &amp; Element access<ul><li><code>.empty</code></li><li><code>.size</code></li><li><code>.max_size</code><br>check if the map has enough size to store kpr</li><li><code>[]</code></li></ul></li><li>Modifiers<ul><li><code>.insert</code><br>let me explain it</li><li><code>.erase</code><br><code>.erase(iter)</code><br><code>.erase(key)</code><br><code>.erase(iter_beg , iter_end)</code></li><li><code>.swap</code></li><li><code>.clear</code></li></ul></li><li>Observers<br>read it yourself</li><li>Operations<ul><li><code>.find</code><br>get the iterator</li><li><code>.count</code><br>check the kpr exist</li><li><code>.lower_bound</code><br>Return iterator to lower bound</li><li><code>.upper_bound</code><br>Return iterator to upper bound</li><li><code>.equal_range</code><br>Get range of equal elements.<br>Return pair of iters</li></ul></li></ul></li></ul><h1 id="algorithm"><a href="#algorithm" class="headerlink" title="algorithm"></a>algorithm</h1><ul><li><p>Header</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>Non-modifying</p><ul><li><code>iter find(iter_beg , iter_end , val)</code></li><li><code>iter find_if(iter_beg , iter_end , pred_fp)</code></li><li><code>iter search(iter_beg , iter_end , seq_beg , seq_end)</code><br>Search range for subsequence</li><li><code>iter find_first_of(iter_beg , iter_end , range_beg , range_end)</code><br>Find element from set in range</li><li><code>iter find_end(iter_beg , iter_end , sub_beg , sub_end)</code><br>Find last subsequence in range</li><li><code>int count(iter_beg , iter_end , val)</code><br>(int -&gt; std::ptrdiff_t)</li><li><code>int count_if(iter_beg , iter_end , pred_fp)</code></li><li><code>bool equal</code><br><code>equal(iter0_beg , iter0_end , iter1_beg)</code><br><code>equal(iter0_beg , iter0_end , iter1_beg , pred_fp)</code></li></ul></li><li>Modifying<ul><li><code>copy(first_iter , last_iter , result_iter)</code></li><li><code>swap</code></li><li><code>reverse</code></li></ul></li><li>Sorting<ul><li><code>sort</code><br><code>sort(first , last)</code><br><code>sort(first , last , comp_fp)</code></li></ul></li><li>Heap<ul><li><code>push_heap</code></li><li><code>pop_heap</code></li><li><code>make_heap</code></li><li><code>sort_heap</code></li><li><code>is_heap</code> (<strong><em>c++11</em></strong>)</li></ul></li><li>Min/Max<ul><li><code>min</code></li><li><code>max</code></li><li><code>min_element</code></li><li><code>max_element</code></li></ul></li><li>Binery_search<ul><li>do it yourself maybe</li></ul></li><li>Other<ul><li>next_permutation(first , end);</li><li>prev_permutation(first , end);</li></ul></li></ul><h1 id="overload-operator"><a href="#overload-operator" class="headerlink" title="overload operator"></a>overload operator</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> X&amp; lhs, <span class="keyword">const</span> X&amp; rhs)&#123; <span class="comment">/* DIY */</span> &#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> X&amp; lhs, <span class="keyword">const</span> X&amp; rhs)&#123; <span class="keyword">return</span> !(lhs == rhs); &#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt; (<span class="keyword">const</span> X&amp; lhs, <span class="keyword">const</span> X&amp; rhs)&#123; <span class="comment">/* DIY */</span> &#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&gt; (<span class="keyword">const</span> X&amp; lhs, <span class="keyword">const</span> X&amp; rhs)&#123; <span class="keyword">return</span> rhs &lt; lhs; &#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;=(<span class="keyword">const</span> X&amp; lhs, <span class="keyword">const</span> X&amp; rhs)&#123; <span class="keyword">return</span> !(lhs &gt; rhs); &#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&gt;=(<span class="keyword">const</span> X&amp; lhs, <span class="keyword">const</span> X&amp; rhs)&#123; <span class="keyword">return</span> !(lhs &lt; rhs); &#125;</span><br></pre></td></tr></table></figure><p>paste from:<a href="http://en.cppreference.com/w/cpp/language/operators" target="_blank" rel="noopener">operator overloading</a></p><h1 id="vim-script"><a href="#vim-script" class="headerlink" title="vim script"></a>vim script</h1><script src="https://gist.github.com/nobodyzxc/4c74d648f244ab072f345aa8a49d36f3.js"></script>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;
為了應付比賽，又很久沒有使用 STL，所以做個總攻略。
&lt;/center&gt;
    
    </summary>
    
      <category term="Note" scheme="http://nobodyzxc.github.io/categories/Note/"/>
    
    
      <category term="cpp" scheme="http://nobodyzxc.github.io/tags/cpp/"/>
    
      <category term="stl" scheme="http://nobodyzxc.github.io/tags/stl/"/>
    
  </entry>
  
  <entry>
    <title>C Type Defination to English</title>
    <link href="http://nobodyzxc.github.io/2017/07/15/ctype2en/"/>
    <id>http://nobodyzxc.github.io/2017/07/15/ctype2en/</id>
    <published>2017-07-15T09:04:01.000Z</published>
    <updated>2020-08-16T12:11:15.955Z</updated>
    
    <content type="html"><![CDATA[<center>PL 教授給的 <a href="https://www.google.com.tw/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;uact=8&amp;ved=0ahUKEwiYrNTC6orVAhXEebwKHVxyDXIQFgglMAA&amp;url=http%3A%2F%2Fwww2.mta.ac.il%2F~hbinsky%2Fc%2520content%2FFunction%2520Pointer.pdf&amp;usg=AFQjCNEzZ-0v-7fvdH5Z8sEVHbebcpV4mg" target="_blank" rel="noopener">8 頁 Func Ptr 閱讀材料</a>。<br>那就來玩一下吧。<br>wait to refer:<a href="http://ieng9.ucsd.edu/~cs30x/rt_lt.rule.html" target="_blank" rel="noopener">rule</a></center><a id="more"></a><p><script src="/files/c-syntax-patch.js"></script></p><link href="/files/c-syntax-patch.css" rel="stylesheet" type="text/css"><blockquote><p>The flip side of this is that you have to deal with old mistakes and with compatibility problems. For example, I consider the C declarator syntax an experiment that failed.-Bjarne Stroustrup, in his SlashDot interview on 2/25/2000.</p><p>我嘗試寫成 Haskell 的定義型態。<br>那個 Type* 能理解就好了 （逃</p></blockquote><p><a href="https://cdecl.org/" target="_blank" rel="noopener">https://cdecl.org/</a></p><ol><li><p><code class="patch">long *a(int)</code></p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">declare a as <span class="title">function</span> <span class="params">(<span class="keyword">int</span>)</span> returning pointer to <span class="keyword">long</span></span></span><br></pre></td></tr></table></figure> <figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">a</span> :: <span class="type">Int</span> -&gt; <span class="type">Long</span>*</span><br></pre></td></tr></table></figure></li><li><p><code class="patch">long (*b(int))</code></p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">declare b as <span class="title">function</span> <span class="params">(<span class="keyword">int</span>)</span> returning pointer to <span class="keyword">long</span></span></span><br></pre></td></tr></table></figure> <figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">b</span> :: <span class="type">Int</span> -&gt; <span class="type">Long</span>*</span><br></pre></td></tr></table></figure></li><li><p><code class="patch">long (*c)(int)</code></p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">declare c as pointer to <span class="title">function</span> <span class="params">(<span class="keyword">int</span>)</span> returning <span class="keyword">long</span></span></span><br></pre></td></tr></table></figure> <figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">c</span> :: (<span class="type">Int</span> -&gt; <span class="type">Long</span>)*</span><br></pre></td></tr></table></figure></li><li><p><code class="patch">long *d(int)(char)</code></p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">declare d as <span class="title">function</span> <span class="params">(<span class="keyword">int</span>)</span> returning <span class="title">function</span> <span class="params">(<span class="keyword">char</span>)</span> returning pointer to <span class="keyword">long</span></span></span><br></pre></td></tr></table></figure> <figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">d</span> :: <span class="type">Int</span> -&gt; (<span class="type">Char</span> -&gt; <span class="type">Long</span>*)</span><br></pre></td></tr></table></figure></li><li><p><code class="patch">long (*e(int))(char)</code></p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">declare e as <span class="title">function</span> <span class="params">(<span class="keyword">int</span>)</span> returning pointer to <span class="title">function</span> <span class="params">(<span class="keyword">char</span>)</span> returning <span class="keyword">long</span></span></span><br></pre></td></tr></table></figure> <figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">e</span> :: <span class="type">Int</span> -&gt; (<span class="type">Char</span> -&gt; <span class="type">Long</span>)*</span><br></pre></td></tr></table></figure></li><li><p><code class="patch">long (*f)(int)(char)</code></p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">declare f as pointer to <span class="title">function</span> <span class="params">(<span class="keyword">int</span>)</span> returning <span class="title">function</span> <span class="params">(<span class="keyword">char</span>)</span> returning <span class="keyword">long</span></span></span><br></pre></td></tr></table></figure> <figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">f</span> :: (<span class="type">Int</span> -&gt; (<span class="type">Char</span> -&gt; <span class="type">Long</span>))*</span><br></pre></td></tr></table></figure></li><li><p><code class="patch">void qsort(void *, size_t, size_t,int (*)(const void *, const void *))</code></p> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">declare qsort as <span class="title">function</span> <span class="params">(pointer to <span class="keyword">void</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                           <span class="keyword">size_t</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                           <span class="keyword">size_t</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                           pointer to function (pointer to <span class="keyword">const</span> <span class="keyword">void</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                pointer to <span class="keyword">const</span> <span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"><span class="params">                            )</span></span></span><br><span class="line">                 returning int) returning void</span><br></pre></td></tr></table></figure> <figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">qsort</span> :: <span class="type">Void</span>* -&gt; <span class="type">Size_t</span> -&gt; <span class="type">Size_t</span> -&gt; (<span class="type">Void</span>* -&gt; <span class="type">Void</span>*)* -&gt; <span class="type">Void</span></span><br></pre></td></tr></table></figure></li><li><p>start with the identifier</p></li><li>look to the right for brackets[ ] or parentheses()</li><li>look to the left for asterisks</li><li>remember that parentheses group</li><li>finally, look at the type (eg. int)</li></ol><p><a href="http://cseweb.ucsd.edu/~ricko/rt_lt.rule.html" target="_blank" rel="noopener">reference link</a></p><p>重點是先往右讀，然後讀到括號，再往左讀，如此往復。<br>先找變數宣告名稱，\w+ 後跟的是 ( ，則此宣告為一函數，否則為變數。</p><p>先往右，遇到 <code>(</code>，為函數，參數為 fnArg。<br>往左讀，遇到 <code>*</code>，回傳為一指標，指向 long。<br><code>long *fn(fnArg)</code> -&gt; <code>fn :: FnArg -&gt; Long*</code></p><p>如果再右邊還有括號，則他的回傳指標為函數指標，其參數為該括號內容。<br><code>long *fn(fnArg)(argOfAfnRtnedByAFn)</code> -&gt; <code>fn :: FnArg -&gt; (ArgOfAfnRtnedByAFn -&gt; Long)*</code></p><p>如果後面一直有括號，其指的函數類型就一直向右 eval 括號就好了。<br><code>long *fn(fnArg)(argOfAfnRtnedByAFn)(argOfAfnRtnedByAFnRtnedByAFn)</code><br>-&gt; <code>fn :: FnArg -&gt; (ArgOfAfnRtnedByAFn -&gt; (ArgOfAfnRtnedByAFnRtnedByAFn -&gt; Long*))</code></p><p>注意指標可能出現的位置。<br><code>long (*fn(fnArg)(argOfAfnRtnedByAFn))(argOfAfnRtnedByAFnRtnedByAFn)</code><br>-&gt; <code>fn :: fnArg -&gt; (ArgOfAfnRtnedByAFn -&gt; (ArgOfAfnRtnedByAFnRtnedByAFn -&gt; Long)*)</code></p><p><code>long (*fn(fnArg))(argOfAfnRtnedByAFn)(argOfAfnRtnedByAFnRtnedByAFn)</code><br>-&gt; <code>fn :: fnArg -&gt; (ArgOfAfnRtnedByAFn -&gt; (ArgOfAfnRtnedByAFnRtnedByAFn -&gt; Long))*</code></p><p>有時指標不只一個，看著辦吧。</p><blockquote><p>Illegal combinations include:<br>     <a href></a> - cannot have an array of functions<br>     ()() - cannot have a function that returns a function<br>     ()[] - cannot have a function that returns an array</p></blockquote><p>所以其實上面五項，應該只有幾個是 Illegal 的（from reference）</p><blockquote><p>其實回傳函數指標和回傳函數在 C 裡是一樣的事情</p></blockquote><p>變數名前有<code>*</code>代表他是一個指標，<br><code>long *ptr</code> -&gt; <code>ptr :: Long*</code></p><p>如果右邊有閉括號，代表他是一個函數指標。<br><code>long (*ptr)(argOfApointedFn)</code> -&gt; <code>ptr :: (ArgOfApointedFn -&gt; Long)*</code></p><p>其指的函數類型就一直向右 eval 括號就好了。<br><code>long (*ptr)(argOfApointedFn)(argOfAFnRtnedByAFnPointedByAPtr)</code><br>-&gt; <code>ptr :: (ArgOfApointedFn -&gt; (ArgOfAFnRtnedByAFnPointedByAPtr -&gt; Long))*</code></p><p>一樣，有時指標不只一個，看著辦吧。</p><p>我都快搞不清我在寫啥了（<br>Haskell 的 Type 表達比較好理解（</p>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;
PL 教授給的 &lt;a href=&quot;https://www.google.com.tw/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=1&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;ved=0ahUKEwiYrNTC6orVAhXEebwKHVxyDXIQFgglMAA&amp;amp;url=http%3A%2F%2Fwww2.mta.ac.il%2F~hbinsky%2Fc%2520content%2FFunction%2520Pointer.pdf&amp;amp;usg=AFQjCNEzZ-0v-7fvdH5Z8sEVHbebcpV4mg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;8 頁 Func Ptr 閱讀材料&lt;/a&gt;。&lt;br&gt;
那就來玩一下吧。&lt;br&gt;
wait to refer:&lt;a href=&quot;http://ieng9.ucsd.edu/~cs30x/rt_lt.rule.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;rule&lt;/a&gt;
&lt;/center&gt;
    
    </summary>
    
      <category term="Note" scheme="http://nobodyzxc.github.io/categories/Note/"/>
    
    
  </entry>
  
  <entry>
    <title>Cygwin Beginner Guide</title>
    <link href="http://nobodyzxc.github.io/2017/05/30/basic-linux/"/>
    <id>http://nobodyzxc.github.io/2017/05/30/basic-linux/</id>
    <published>2017-05-30T14:41:52.000Z</published>
    <updated>2020-08-16T12:11:02.192Z</updated>
    
    <content type="html"><![CDATA[<center>本篇主要內容為在 Cygwin 下一些簡單的 BASH 用法。</center><a id="more"></a><p>事先聲明 Cygwin != Linux，它是 Windows 下一個模擬 Linux terminal 的介面。</p><p>關於 Cygwin 的<a href="https://www.ubuntu-tw.org/modules/newbb/viewtopic.php?topic_id=47282" target="_blank" rel="noopener">安裝</a>。</p><p>不過可以注意的是套件的部分只要多載一個 wget 就夠了，其他部分（如 vim 等）用 <a href="https://github.com/transcode-open/apt-cyg" target="_blank" rel="noopener">apt-cyg</a> 下載就好。<br>(apt-cyg 的使用置於文末）</p><p>當你開啟 Cygwin 時，先不要嫌它醜，這之後可以慢慢調。<br>（或是直接抓現成的<a href="https://github.com/nobodyzxc/MyConfFiles/blob/master/cygwin.bashrc.sh" target="_blank" rel="noopener">設定檔</a> 存到<code>~/.bashrc</code>）</p><h2 id="WHERE-AM-I"><a href="#WHERE-AM-I" class="headerlink" title="WHERE AM I ?"></a>WHERE AM I ?</h2><p>首先，你可以看到有個命令列。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">userName@computerName ~</span><br><span class="line">$</span><br></pre></td></tr></table></figure><p>記住，你現在位置為家目錄，如果沒有特別改命令列的話，你可以發現命令列是以<code>~</code>表示家目錄。</p><p>你現在有的只有簡單命令列，你可以先下個<code>pwd</code>指令來確認自己現在在檔案系統中的位置。</p><p>不過你會發現這個位置有點奇怪，怎麼在 windows 的檔案總管中沒有見過，</p><p>這是因為 Cygwin 要模擬 linux 的檔案環境，</p><p>將你當初安裝的路徑選為根目錄 (root)，長出一套類似 linux 的檔案環境（樹狀）。<br>（而且 windows 的檔案分層是使用<code>\</code>，linux 則是使用<code>/</code>）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/                &lt;- 根目錄 (root)，為 windows 下的某個資料夾</span><br><span class="line">|</span><br><span class="line">├── bin          &lt;- 很多指令（程式）存放的位置</span><br><span class="line">├── cygdrive</span><br><span class="line">│   ├── c        &lt;- 注意！這裡可以切到 C 槽</span><br><span class="line">│   └── d        &lt;- 注意！這裡可以切到 D 槽</span><br><span class="line">├── dev          &lt;- 對 linux 來說，這裡有很多硬體裝置有關的檔案</span><br><span class="line">├── etc          &lt;- Linux 開機（這裡就是開 Cygwin) 的一些設定檔</span><br><span class="line">├── home</span><br><span class="line">│   └── ~        &lt;- 家目錄，你現在的位置</span><br><span class="line">├── lib          &lt;- 程式語言的一堆 library</span><br><span class="line">├── sbin         &lt;- 放著系統管理者常用的指令</span><br><span class="line">├── tmp          &lt;- 一般使用者暫存檔案的地方，重要的東西不要放這</span><br><span class="line">├── usr          &lt;- 跟系統息息相關的目錄</span><br><span class="line">│   ├── bin</span><br><span class="line">│   ├── etc</span><br><span class="line">│   ├── include</span><br><span class="line">│   ├── lib</span><br><span class="line">│   └── tmp</span><br><span class="line">└── var          &lt;- 系統工作預設的工作目錄。</span><br></pre></td></tr></table></figure></p><p>你現在的位置其實和 windows 還是有應對關係的，</p><p>你可以下個<br><code>cygpath -w $HOME</code>來確認自己家目錄在 windows 的位置。<br><code>cygpath -w $PWD</code>來確認自己當前  在 windows 的位置。</p><h2 id="動身"><a href="#動身" class="headerlink" title="動身"></a>動身</h2><p>知道了自己的位置後，接下來就是改變位置了，</p><p>想像一下，你現在是一個人，每個資料夾是個房間，你現在知道自己的位置，再來就是走來走去了。</p><p>你可以先下個<code>ls</code>指令，看一下現在的房間和哪幾間相連著。(ls 是 list 的縮寫）</p><p>沒意外的話是空空如也啊。</p><p>可以再下個<code>ls -a</code>，(a 是 all 的意思），把所有隱藏的房間（和物品 -&gt;文件） show 出來。<br>(<code>ls -la</code> 可以詳列更多訊息，l 是 long list format 的意思）</p><p>你可以發現多了 <code>.</code> 和 <code>..</code> 這兩個房間。</p><p><code>.</code>表示當前這間房間。至於為啥要有這種設計，你之後就會知道了。<br><code>..</code>則是上一層房間。方才我們說過，linux 的檔案系統是以樹狀的結構存在。</p><p>接下了可以開始切換了，可以使用<code>cd dirname</code>切換路徑。<br>使用<code>cd ..</code>切到上一層。(cd 是 change directory 的縮寫）<br>沒有任何 output，只是命令列 (prompt) 稍稍改變了一下，這代表你成功切到上一層了。</p><blockquote><p>沒有消息就是好消息。—— linux 的哲學</p></blockquote><p>沒有 output 大多就是程序正常運行。</p><p>接著下<code>ls</code>，看到的目錄應該就是你的家目錄，注意一點的是，名字為什麼不是<code>~</code>呢？</p><p>因為<code>~</code>只是個縮寫啦。</p><p>關於回到家目錄，你可以用<code>cd ~</code> 或 <code>cd</code>。</p><blockquote><p>對於路徑，<a href="http://linux.vbird.org/linux_basic/0220filemanager.php#dir_pathway" target="_blank" rel="noopener">這裡</a> 有更詳細的說明。</p></blockquote><h2 id="建立捷徑"><a href="#建立捷徑" class="headerlink" title="建立捷徑"></a>建立捷徑</h2><p>linux 和 windows 的捷徑其實是不太一樣的，在 cygwin 中不可用 .lnk 的捷徑。</p><p>在家目錄如果想要建一個到桌面的捷徑，<br>你可以下 <code>ln -s /cygdrive/c/Users/$USER/Desktop/ ~/desktop</code>。</p><p>然後你在家目錄可以使用 <code>cd desktop</code> 移動到桌面了。</p><h2 id="創建、刪除與移動"><a href="#創建、刪除與移動" class="headerlink" title="創建、刪除與移動"></a>創建、刪除與移動</h2><ul><li><p>創建<br>當你要創建一個資料夾的時候使用 <code>mkdir dirname</code>。<br>當你要創建一個空文檔的時候使用 <code>touch filename</code>。</p><blockquote><p>補充一點，檔案大致分為兩種類型 text 和 binary，<br><a href="https://en.wikipedia.org/wiki/Text_file" target="_blank" rel="noopener">text</a> 是存 ASCII 和 UTF-8 一類，一般用 vim 或記事本等編輯。<br><a href="https://en.wikipedia.org/wiki/Binary_file" target="_blank" rel="noopener">binary</a> 是 non-text file，例如可執行的二進制檔案。<br>不過 .py 檔是純文本也可執行，因為它是直譯的。<br>但是說到底，在電腦裡都是以二進制的方式儲存啦 :P</p></blockquote></li><li><p>刪除<br>當你要移除一個檔案時 <code>rm filename</code>。<br>當你要移除一個<em>空</em>資料夾的時候 <code>rmdir dirname</code>。<br>當你要移除一個資料夾（空或非空都適用）和裡面的東西 <code>rm -r dirname</code>。<br>(-r flag 是 recursively 的意思）</p><blockquote><p>注意！使用 rm 刪除資料就真的回不來了，它沒有資源回收垃圾桶。</p></blockquote></li><li><p>移動（或更名）<br>當你要移動檔案（或資料夾）A 到資料夾 B 時 <code>mv a b</code>。<br>當你要重新命名檔案（或資料夾） A 為 B 時 <code>mv a b</code>。</p><blockquote><p>看出來了嗎，若 B <strong>資料夾</strong>不存在，則會視為更名，存在則是移動。<br>要非常小心的一點是 B 如果是已存在的<strong>檔案</strong>時，B 會被 A 覆蓋，而 A 命名為 B。<br>還有一點要注意的是，Windows 下大小寫其實是不分的。<br>（但你在 Cygwin 中打字還是要分大小寫）。</p></blockquote></li></ul><h2 id="關於強大的-TAB-和-Arrow-Keys-快捷鍵等"><a href="#關於強大的-TAB-和-Arrow-Keys-快捷鍵等" class="headerlink" title="關於強大的 TAB 和 Arrow Keys , 快捷鍵等"></a>關於強大的 TAB 和 Arrow Keys , 快捷鍵等</h2><ul><li><p>tab<br>假設你要切換到一個名字很長的資料夾時，<br><code>cd aDirWithALongLongLongName</code>，你可能會打到瘋掉，<br>這時可以適時的使用 tab 鍵。<br><code>cd aDirW</code> 打幾個字後敲一下 tab 鍵，他會盡可能挑出當前可能的選項幫你補上去。</p></li><li><p>arrow keys<br>你方才輸過的指令可以用方向鍵上下來叫出來。</p></li><li><p>快捷鍵（有興趣請走<a href="https://wiki.archlinux.org/index.php/Keyboard_shortcuts" target="_blank" rel="noopener">這</a>)<br>輸過的指令也可以按<code>ctrl-r</code>然後敲幾個字來叫出，<br>如果不是想要的那個，繼續按<code>ctrl-r</code>，選到後按<code>enter</code>。</p></li></ul><h2 id="指令幫助"><a href="#指令幫助" class="headerlink" title="指令幫助"></a>指令幫助</h2><p>每一道指令都是一支程式，在 linux 下你可以用以下方法得到使用說明。</p><ul><li><p><code>man 指令名稱</code><br>其實 man 就是一支程式，它會幫你去找其他指令的相關使用說明。</p></li><li><p><code>指令名稱 -h</code></p></li><li><code>指令名稱 --help</code><br>一般來說程式會內建一些使用說明，加個 flag 試試看吧。</li></ul><h2 id="資料流重導向"><a href="#資料流重導向" class="headerlink" title="資料流重導向"></a>資料流重導向</h2><p>使用資料流也是一項很重要的技能。<br>簡單來說資料流可以分做 stdin , stdout , stderr。</p><ul><li><p>stdin 是檔案內容輸入至程式（指令）的一條流向。<br>（鍵盤輸入 — linux 下裝置也有檔案，在 /dev 中，也是 stdin）</p><p>當你寫好一支簡單的程式 (output.py)，他會要求輸入，然後輸出至螢幕。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(input())</span><br></pre></td></tr></table></figure><p>但你每次要輸一長串相同的東西很麻煩，<br>這時候你可以寫在檔案 (input.txt) 裡面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello world! It&apos;s my first python script ......</span><br></pre></td></tr></table></figure><p>每次就不用執行<code>python output.py</code>再從鍵盤輸入同樣的東西了。<br>寫好 input.txt 後只要下<code>python output.py &lt; input.txt</code>，<br>它就會幫你把 input.txt 的內容輸進 output.py。</p></li><li><p>stdout 程式輸出至檔案的那條流向（螢幕在 linux 下也是檔案喔）。</p><p>你現在下個 <code>ls</code> 的指令，它會輸出至螢幕，如果你要將它重導至檔案 (justLsOut.txt)，<br>可以下個<code>ls &gt; justLsOut.txt</code>。<br>如果本來沒有 justLsOut.txt 檔案，它會創一個 justLsOut.txt，然後把內容塞進去。<br>如果已經有 justLsOut.txt 的話，它會覆蓋掉 justLsOut.txt 的內容，然後塞 ls 的結果進去。</p><p>但如果你不想要覆蓋掉原本內容呢？你也可以將 ls 的結果加在 justLsOut.txt 後面。<br>使用 <code>ls &gt;&gt; justLsOut.txt</code> 就好了。<code>&gt;&gt;</code>是 append 的用法。</p></li><li><p>stderr 是當有錯誤發生時，程式輸出至檔案的那條流向。<br>不過一般是跟 stdout 一起輸到螢幕。<br>如果你將 stdout 導到其他地方，螢幕剩下的就是 stderr 了。</p></li></ul><blockquote><p>更多如 <code>cat &gt; file.txt &lt;&lt; end</code> , <code>ls nonexsitfile.txt &gt; out.txt 2&amp;&gt;1</code> 用法請走<a href="https://www.csie.cyut.edu.tw/moodle23/dywang/linuxProgram/node14.html" target="_blank" rel="noopener">這</a><br>除此之外，你還可以學學 <a href="https://www.csie.cyut.edu.tw/moodle23/dywang/linuxProgram/node15.html" target="_blank" rel="noopener">pipe</a></p></blockquote><h2 id="使用-apt-cyg-管理套件"><a href="#使用-apt-cyg-管理套件" class="headerlink" title="使用 apt-cyg 管理套件"></a>使用 apt-cyg 管理套件</h2><p>cygwin 安裝的 setup.exe 基本上就是一個套件管理器，但是它是 GUI 的，而且還要點一堆選項，感覺很慢。</p><p>如果你追求速度又 prefer Text Mode 的話，你可以試試別人寫的 shell script － apt-cyg。</p><p>用起來感覺就像 apt-get 一樣。</p><p>apt-cyg 如何使用呢？首先先把 <a href="https://github.com/transcode-open/apt-cyg/blob/master/apt-cyg" target="_blank" rel="noopener">apt-cyg 的 script</a> 複製下來，</p><p>接著你有以下幾種方式（任選其一即可）把內容貼到檔案，放到家目錄。</p><ol><li>貼在記事本裡面，<strong>不要用 word</strong>，然後存到家目錄 (<code>cpath -w $HOME</code>) 中，假設存為 <code>script.txt</code>。</li><li>下指令<code>cat &gt; script.txt</code> 然後滑鼠右鍵貼上，按 enter，接著<code>ctrl-d</code>跳出。<blockquote><p>你可以下<code>cat script.txt</code>看貼上有沒有成功，<br><code>cat</code>指令是將檔案內容輸出至螢幕（沒有參數時是將鍵盤輸入輸出）。<br>接著可以用 <code>mv script.txt apt-cyg</code>。（別懷疑，我會將檔案叫做 script.txt 只是要你練習 mv）<br></p></blockquote></li><li>有裝 wget 的話，在家目錄使用<blockquote><p><code>wget https://raw.githubusercontent.com/transcode-open/apt-cyg/master/apt-cyg</code><br>  （你可以 cat 一下 apt-cyg 看看有沒有下載成功）</p></blockquote></li></ol><p>再來 <code>chmod a+x apt-cyg</code>。<br>（讓這個腳本擁有執行權限，有興趣看看關於 linux <a href="http://linux.vbird.org/linux_basic/0210filepermission.php" target="_blank" rel="noopener">檔案權限</a> 的內容）</p><p>接著 <code>./apt-cyg install vim</code>。你就有 vim 可以用了。（我的 vim 入門可以走<a href="/2017/01/22/vim-0/#more">這</a>)<br>（和 Windows 不一樣的是，當前目錄可執行的檔案要執行一定要加 <code>./</code>)</p><p>你可以將 <code>apt-cyg</code> 移到 <code>/bin</code> （根目錄底下的 bin 目錄），<br>這樣就能在任何地方呼叫它而不用使用<code>./</code>了。</p><p><code>mv apt-cyg /bin</code>。（對這方面有興趣可以看看<code>$PATH</code>的<a href="https://www.phpini.com/linux/set-path-var" target="_blank" rel="noopener">介紹</a>）</p><p>然後如果對有帶<code>$</code>號的變數有興趣的話，可以看看<a href="http://linux.vbird.org/linux_basic/0320bash.php#variable_environ" target="_blank" rel="noopener">環境變數</a>。</p><blockquote><p>其實如果檔案沒有執行權限，可以使用<code>bash file.sh</code> 來執行一個 shell 腳本。<br>道理和 python 一樣。</p></blockquote><h2 id="其他有用套件"><a href="#其他有用套件" class="headerlink" title="其他有用套件"></a>其他有用套件</h2><p><code>tmux</code> — 一項強大的終端切割螢幕工具。使用 <code>apt-cyg install tmux</code> 取得。<br>在沒有設定檔的情形下<code>ctrl-b</code>是 prefix 鍵。 使用<code>ctrl-b ?</code>開始玩玩看吧。<br>也可以使用我調校過的<a href="https://github.com/nobodyzxc/MyConfFiles/blob/master/tmux.conf" target="_blank" rel="noopener">設定檔</a> (prefix 是 <code>ctrl-a</code>)，將設定檔存為 <code>~/.tmux.conf</code>。</p><h2 id="結束"><a href="#結束" class="headerlink" title="結束"></a>結束</h2><p>你玩完 Cygwin 後，可以不用按右上角的<code>X</code>，你可以打個 <code>exit</code> 或按<code>ctrl-d</code>來結束它。</p>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;
本篇主要內容為在 Cygwin 下一些簡單的 BASH 用法。
&lt;/center&gt;
    
    </summary>
    
      <category term="Fun" scheme="http://nobodyzxc.github.io/categories/Fun/"/>
    
    
      <category term="linux" scheme="http://nobodyzxc.github.io/tags/linux/"/>
    
      <category term="cygwin" scheme="http://nobodyzxc.github.io/tags/cygwin/"/>
    
  </entry>
  
  <entry>
    <title>About Python&#39;s container</title>
    <link href="http://nobodyzxc.github.io/2017/05/29/python-container/"/>
    <id>http://nobodyzxc.github.io/2017/05/29/python-container/</id>
    <published>2017-05-29T13:10:34.000Z</published>
    <updated>2020-08-16T12:11:50.898Z</updated>
    
    <content type="html"><![CDATA[<center>Python 感覺入門很久了，但對於容器的使用一直感到很生疏，遂筆記一篇，期能熟之。</center><a id="more"></a><h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>我對於 Python 的一些存在一直不能感到理解，就是這些對容器的 function 了。<br>為啥不要做的像 Ruby 一樣把它做成物件下的 function 呢？<br>等到理解的時候或許就能向 The Zen of Python 靠近一點了吧。<br>果然正式提出疑問，才有動力去找<a href="http://effbot.org/pyfaq/why-does-python-use-methods-for-some-functionality-e-g-list-index-but-functions-for-other-e-g-len-list.htm" target="_blank" rel="noopener">解答</a>。</p><blockquote><p>(a) For some operations, prefix notation just reads better than postfix — prefix (and infix!) operations have a long tradition in mathematics which likes notations where the visuals help the mathematician thinking about a problem. Compare the easy with which we rewrite a formula like x*(a+b) into x*a + x*b to the clumsiness of doing the same thing using a raw OO notation.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">恩... 習慣問題嗎？</span><br><span class="line">嗯？len(&quot;asd&quot; + &quot;efg&quot;) 和 (&quot;asd&quot; + &quot;efg&quot;).length() 嗎？</span><br><span class="line">確實，前面的比較有數學感覺，恩，FP 的感覺（</span><br></pre></td></tr></table></figure><blockquote><p>(b) When I read code that says len(x) I know that it is asking for the length of something. This tells me two things: the result is an integer, and the argument is some kind of container. To the contrary, when I read x.len(), I have to already know that x is some kind of container implementing an interface or inheriting from a class that has a standard len(). Witness the confusion we occasionally have when a class that is not implementing a mapping has a get() or keys() method, or something that isn’t a file has a write() method.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">用 len(container) 就比較不用去思考 container 是不是繼承某一個 class 的實作。</span><br><span class="line">確實，我常常被 javascript 的 string.length 和 C++ 的 string.length() 混淆</span><br><span class="line">（好像有點離題，不過要思考是屬性還是方法確實也是會混淆</span><br></pre></td></tr></table></figure><h2 id="Non-member-functions"><a href="#Non-member-functions" class="headerlink" title="Non-member functions"></a>Non-member functions</h2><ol><li>repr(container) -&gt; 轉成可以讓被 eval 的字串符（哼哼，人家 Scheme 才沒這麼複雜呢）。</li><li>len(container) -&gt; 取得容器長度</li><li>del(container[idx]) -&gt; 移除容器的第幾個節點</li><li>reversed(container) -&gt; 回傳一個 reversed 的 iterator （注意，不是原本的容器類型，所以要再轉。)</li></ol><ul><li>常用的就這些，其他有遇到再加吧。</li><li>一些 infix 的就不說了。以上是 prefix。</li></ul><h2 id="Methods-of-containers"><a href="#Methods-of-containers" class="headerlink" title="Methods of containers"></a>Methods of containers</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function( param ) intro</span><br><span class="line">        ([param]) -&gt; 參數可有可無</span><br><span class="line">        (  ...  ) -&gt; 不定長度</span><br></pre></td></tr></table></figure><h3 id="help-tuple"><a href="#help-tuple" class="headerlink" title="help(tuple)"></a>help(tuple)</h3><p>tuple 的特性就是 read-only，他的元素一旦確立下來就不能用 <code>=</code> 改。<br>替代方法可以轉成 list 再轉回來，不然就是直接再造一個新的 tuple。</p><p>tuple(iterable) 建構子可以輕易的將其他容器 (iterable) 轉為 tuple 容器。（沒有參數等同 new 一個空的）</p><ol><li><code>T.count(elm)</code><blockquote><p>回傳元素個數出現次數。</p></blockquote></li><li><code>T.index(elm)</code><blockquote><p>回傳元素出現的第一次出現的 index。</p></blockquote></li></ol><h3 id="help-list"><a href="#help-list" class="headerlink" title="help(list)"></a>help(list)</h3><p>list(iterable) 建構子可以輕易的將其他容器 (iterable) 轉為 list 容器。（沒有參數等同 new 一個空的）</p><ol><li><code>L.append(elm)</code><blockquote><p>將元素加到 list 的尾端。</p></blockquote></li><li><code>L.clear()</code><blockquote><p>清空容器。</p></blockquote></li><li><code>L.copy()</code><blockquote><p>new 出一個一模一樣的 copy。(lb = la.copy() 和 lb = la 是不一樣的！)</p></blockquote></li><li><code>L.count(elm)</code><blockquote><p>回傳元素個數出現次數。</p></blockquote></li><li><code>L.extend(iterable)</code><blockquote><p>把其他容器 (iterable) append(Scheme 向） 在後面。</p></blockquote></li><li><code>L.index(elm)</code><blockquote><p>回傳元素出現的第一次出現的 index。</p></blockquote></li><li><code>L.insert(idx , elm)</code><blockquote><p>在 index 之<em>前</em>插入元素。</p></blockquote></li><li><code>L.pop([idx])</code><blockquote><p>移除 idx 位置的元素，並回傳該元素。（沒有參數等同對最後一個元素進行操作）</p></blockquote></li><li><code>L.remove(elm)</code><blockquote><p>移除第一個出現的元素。</p></blockquote></li><li><code>L.reverse()</code><blockquote><p>對 list 進行倒轉（不回傳值）。</p></blockquote></li><li><code>L.sort([key = None , reverse=False])</code><blockquote><p>排序。</p></blockquote></li></ol><h3 id="help-set"><a href="#help-set" class="headerlink" title="help(set)"></a>help(set)</h3><p>set(iterable) 建構子可以輕易的將其他容器 (iterable) 轉為 set 容器。（沒有參數等同 new 一個空的）</p><ol><li><code>S.add(elm)</code><blockquote><p>增加元素到 Set 中。</p></blockquote></li><li><code>S.clear()</code><blockquote><p>清空容器。</p></blockquote></li><li><code>S.copy()</code><blockquote><p>new 出一個一模一樣的 copy。(sb = sa.copy() 和 sb = sa 是不一樣的！)</p></blockquote></li><li><code>S.difference(set ...)</code><blockquote><p>回傳差集。</p></blockquote></li><li><code>S.difference_update(set ...)</code><blockquote><p>S = S.difference(Set …)。應該可以算是語法糖的東西。</p></blockquote></li><li><code>S.discard(elm)</code><blockquote><p>移除一個元素，如果它存在於 set 中，不存在也不會噴錯。</p></blockquote></li><li><code>S.intersection(set ...)</code><blockquote><p>回傳交集。</p></blockquote></li><li><code>S.intersection_update(set ...)</code><blockquote><p>S = S.intersection()。</p></blockquote></li><li><code>S.isdijoint(set)</code><blockquote><p>不相交回傳 True。</p></blockquote></li><li><code>S.issubset(set)</code><blockquote><p>如果 S 是參數的子集回傳 True。</p></blockquote></li><li><code>S.issuperset(set)</code><blockquote><p>如果 S 是參數的超集回傳 True。</p></blockquote></li><li><code>S.pop()</code><blockquote><p>移除任一元素並回傳（我試過了，好像也不是那麼隨意）（如果 empty 發生 KeyError）</p></blockquote></li><li><code>S.remove(elm)</code><blockquote><p>移除一元素（必須存在於 set 否則發生 KeyError)</p></blockquote></li><li><code>S.symmetric_difference(set)</code><blockquote><p>回傳集合為刪除交集的聯集部分。</p></blockquote></li><li><code>S.symmetric_difference_update(set)</code><blockquote><p>S.symmetric_difference 的語法糖。</p></blockquote></li><li><code>S.union(set ...)</code><blockquote><p>聯集。</p></blockquote></li><li><code>S.update(set ...)</code><blockquote><p>感覺就是 S.union_update()，不過這裡直接叫 update 了。</p></blockquote></li></ol><h3 id="help-dict"><a href="#help-dict" class="headerlink" title="help(dict)"></a>help(dict)</h3><p>dict(iterable) 建構子可以輕易的將其他容器 (iterable) 轉為 dict 容器。（沒有參數等同 new 一個空的）</p><ol><li><code>D.clear()</code><blockquote><p>清空容器。</p></blockquote></li><li><code>D.copy()</code><blockquote><p>new 出一個一模一樣的 copy。(db = da.copy() 和 db = da 是不一樣的！)</p></blockquote></li><li><code>D.fromkeys(iterable [, value = None])</code><blockquote><p>可以拿其他容器當 key 和指定預設的 value。</p></blockquote></li><li><code>D.get(key [, d = None])</code><blockquote><p>用法和 D[key] 很像但 D[key] 如果不存在會噴 KeyError， get 則噴 d。</p></blockquote></li><li><code>D.items()</code><blockquote><p>回傳一個物件提供 view of items（然後可以幹嘛？)</p></blockquote></li><li><code>D.keys()</code><blockquote><p>回傳一個物件提供 view of keys（然後可以幹嘛？)</p></blockquote></li><li><code>D.pop(key [, d])</code><blockquote><p>移除 key 和其 item， d 是 key 不存在時的回傳值，但跟 get 不同，預設噴 KeyError。</p></blockquote></li><li><code>D.popitem()</code><blockquote><p>移除一 key , item pair 並回傳該 pair 為 tuple。(dict 為 empty 噴 KeyError)</p></blockquote></li><li><code>D.setdefault(key [, d])</code><blockquote><p>和 D.get(key , d) 同，如果不存在 k 則設定 D[key] = d。</p></blockquote></li><li><code>D.update([dict | assignment])</code><blockquote><p>更新字典，assignment 用法比較特殊，字串可以不用 quotation。</p></blockquote></li><li><code>D.values()</code><blockquote><p>回傳一個物件提供 view of values。（然後可以幹嘛？)</p></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;
Python 感覺入門很久了，但對於容器的使用一直感到很生疏，遂筆記一篇，期能熟之。
&lt;/center&gt;
    
    </summary>
    
      <category term="Note" scheme="http://nobodyzxc.github.io/categories/Note/"/>
    
    
      <category term="oop" scheme="http://nobodyzxc.github.io/tags/oop/"/>
    
      <category term="python" scheme="http://nobodyzxc.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Ruby Note</title>
    <link href="http://nobodyzxc.github.io/2017/04/27/Ruby-Note/"/>
    <id>http://nobodyzxc.github.io/2017/04/27/Ruby-Note/</id>
    <published>2017-04-26T19:03:03.000Z</published>
    <updated>2020-08-16T12:11:53.535Z</updated>
    
    <content type="html"><![CDATA[<center><a href="https://www.codecademy.com" target="_blank" rel="noopener">Codecademy</a> 之 Ruby 速記。<br>原來 Ruby 和 DSL 很有淵源啊（喃喃）。<br>剛學沒多久教授就提到了，Ruby 主要是 SmallTalk + Lisp 佐一點 C。<br>On the path to enlightenment.<br>wait to refer:<br>  <a href="http://guides.ruby.tw/ruby/index.html" target="_blank" rel="noopener">Ruby Guides</a> done!<br>  <a href="https://www.ruby-lang.org/zh_tw/documentation/" target="_blank" rel="noopener">Lots of docs</a></center><a id="more"></a><p><script src="/files/ruby-syntax-patch.js"></script></p><p><link href="/files/scheme-syntax-patch.css" rel="stylesheet" type="text/css"></p><h2 id="Basic"><a href="#Basic" class="headerlink" title="Basic"></a>Basic</h2><p>跟 Python 一樣是動態、腳本語言，所謂變數只是 name binding，<br>(Philosophy 可是很不同呢～)</p><p>用法跟 Python 也一樣， assignment 即宣告。<br>every thing is object。</p><p>basic special operator<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span> ** <span class="number">4</span> <span class="comment"># 16</span></span><br><span class="line">[<span class="number">1</span> , <span class="number">2</span> , <span class="number">3</span>] &lt;=&gt; [<span class="number">3</span> , <span class="number">1</span>] <span class="comment"># cmp recursively</span></span><br></pre></td></tr></table></figure></p><h2 id="Comment"><a href="#Comment" class="headerlink" title="Comment"></a>Comment</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># single line comment</span></span><br><span class="line"></span><br><span class="line"><span class="comment">=begin</span></span><br><span class="line"><span class="comment">multiple line comment</span></span><br><span class="line"><span class="comment">=end</span></span><br></pre></td></tr></table></figure><h2 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h2><p><code>!</code>語法糖，將 Method 返回結果回存 Object。<br><code>.</code>，function chainning 在 OO 可以玩得很溜。</p><p>IO<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gets.chomp</span><br><span class="line"><span class="comment"># chomp 去除前後空白字元，包括 \n \t 一類</span></span><br><span class="line"></span><br><span class="line">puts <span class="string">"<span class="subst">#&#123;var&#125;</span> with new line"</span></span><br><span class="line"></span><br><span class="line">print <span class="string">"<span class="subst">#&#123;var&#125;</span> without new line"</span></span><br></pre></td></tr></table></figure></p><p>array object’s methods<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr = [<span class="number">1</span> , <span class="number">4</span> , <span class="number">2</span> , <span class="number">5</span> , <span class="number">3</span>]</span><br><span class="line">arr.sort!</span><br><span class="line">arr.sort! &#123; <span class="params">|a , b|</span> -(a &lt;=&gt; b) &#125; <span class="comment"># lambda is great!</span></span><br></pre></td></tr></table></figure></p><p>string object’s methods<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不用加括弧啊</span></span><br><span class="line"><span class="string">"string"</span>.to_sym <span class="comment"># symbol will explain later</span></span><br><span class="line"><span class="string">"string"</span>.intern <span class="comment"># "string" =&gt; :symbol</span></span><br><span class="line"><span class="string">"string"</span>.length</span><br><span class="line"><span class="string">"string"</span>.reverse</span><br><span class="line"><span class="string">"string"</span>.upcase</span><br><span class="line"><span class="string">"string"</span>.downcase</span><br><span class="line"><span class="string">"string"</span>.capitalize</span><br><span class="line"><span class="string">"string"</span>.<span class="keyword">include</span>? <span class="string">"des to search"</span> <span class="comment"># 回傳 bool，很有 lisp style 的 ?</span></span><br><span class="line"><span class="string">"string"</span>.gsub(<span class="regexp">/replace/</span> , <span class="string">"new string"</span>)</span><br><span class="line"><span class="string">"string"</span>.gsub!(<span class="regexp">/replace/</span> , <span class="string">"new string"</span>) <span class="comment"># 直接取代，我只是要強調 ! 的位置</span></span><br><span class="line"><span class="string">"string"</span>.split <span class="comment"># split string to array of string</span></span><br></pre></td></tr></table></figure></p><p>define a function<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">functionName</span><span class="params">(argA , argB)</span></span></span><br><span class="line">    <span class="comment"># do something</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 由於靈活的語法，可以 omit ()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span> <span class="title">x</span> , <span class="title">y</span></span></span><br><span class="line">    x + y      <span class="comment"># omit return will take last exp as return value</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><h2 id="Control-Flow"><a href="#Control-Flow" class="headerlink" title="Control Flow"></a>Control Flow</h2><p>基本的東西，稍微記一下。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="number">1</span> == <span class="number">1</span></span><br><span class="line">    <span class="comment"># do something</span></span><br><span class="line"><span class="keyword">elsif</span> <span class="string">'a'</span> == <span class="string">'b'</span> <span class="comment"># 注意 keyword</span></span><br><span class="line">    <span class="comment"># do something</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="comment"># do something</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 有點微妙，因為有 end ，所以不用管縮排，儘管看起來跟 python 有點像。</span></span><br><span class="line"><span class="comment"># 但 if statement 後沒有 : 或 &#123; 表示開頭（他拿 \n 做辨認？)。</span></span><br><span class="line"><span class="comment"># 不，如果寫成 one line 還是要加 ;</span></span><br><span class="line"><span class="keyword">if</span> <span class="literal">true</span>; puts <span class="string">"true"</span> <span class="keyword">end</span></span><br><span class="line"><span class="comment"># 可是有更潮的 one line if （後面）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># if not , syntax sugar</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unless</span> what</span><br><span class="line">    <span class="comment"># do something</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="comment"># do something</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 這個語法糖，我也是醉了， do something if what</span></span><br><span class="line">statement <span class="keyword">unless</span> exp</span><br><span class="line">statement <span class="keyword">if</span> exp</span><br><span class="line"><span class="comment"># Ruby 之禪 discuss later</span></span><br></pre></td></tr></table></figure><h2 id="Loop"><a href="#Loop" class="headerlink" title="Loop"></a>Loop</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> exp</span><br><span class="line">    <span class="comment"># do something</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># the syntax sugar of 'while not'</span></span><br><span class="line"><span class="keyword">until</span> exp</span><br><span class="line">    <span class="comment"># do something</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 2 3 4</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>...<span class="number">5</span></span><br><span class="line">    print <span class="string">"<span class="subst">#&#123;i&#125;</span> "</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 2 3 4 5</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>..<span class="number">5</span></span><br><span class="line">    print <span class="string">"<span class="subst">#&#123;i&#125;</span> "</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">loop <span class="keyword">do</span></span><br><span class="line">    <span class="comment"># do something</span></span><br><span class="line">    <span class="keyword">next</span> <span class="keyword">if</span> <span class="keyword">while</span> <span class="comment"># same as 'continue' in C's</span></span><br><span class="line">    <span class="keyword">break</span> <span class="keyword">if</span> what</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">loop &#123; <span class="comment"># do something &#125; # inf loop</span></span><br><span class="line"></span><br><span class="line">number = <span class="number">10</span></span><br><span class="line">number.times&#123; print <span class="string">"Do you need some Wow?"</span> &#125; <span class="comment"># wow...(doge</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Array 會提及物間迭代器用法 - each</span></span><br></pre></td></tr></table></figure><p>關於 loop 的流程控制</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;         <span class="comment"># block of loop</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># redo jump here to restart it , so amazing...</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">redo</span> <span class="keyword">if</span> doRedo</span><br><span class="line"><span class="keyword">break</span> <span class="keyword">if</span> doBreak</span><br><span class="line"><span class="keyword">next</span> <span class="keyword">if</span> doNext</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">if</span> doReturn <span class="comment"># return func (not loop)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># next jump here wait to start a new iteration</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># break jump to here</span></span><br></pre></td></tr></table></figure><h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">array = [<span class="number">1</span> , <span class="number">2</span> , <span class="number">3</span> , <span class="number">4</span>]</span><br><span class="line">array = [<span class="number">1</span>..<span class="number">4</span>] <span class="comment"># not the same !!</span></span><br><span class="line"><span class="comment"># 這是 array 塞一個 range 物件，做迭代會迭出一個物件</span></span><br><span class="line">array = (<span class="number">1</span>..<span class="number">4</span>).to_a <span class="comment"># this !</span></span><br><span class="line"></span><br><span class="line">array.each <span class="keyword">do</span> <span class="params">|var|</span></span><br><span class="line">    print <span class="string">"<span class="subst">#&#123;var&#125;</span>"</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">(<span class="number">1</span>..<span class="number">4</span>).each <span class="keyword">do</span> <span class="params">|var|</span> <span class="comment"># 直接用 range 物件迭代就一樣了</span></span><br><span class="line">    print <span class="string">"<span class="subst">#&#123;var&#125;</span>"</span>   <span class="comment"># 體會一下</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment"># iteration</span></span><br><span class="line">array.each &#123; <span class="params">|var|</span> print <span class="string">"<span class="subst">#&#123;var&#125;</span>"</span> &#125; <span class="comment"># lambda in haskell ?</span></span><br></pre></td></tr></table></figure><h2 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">hashTb = &#123; <span class="string">"one"</span> =&gt; <span class="number">1</span> , <span class="string">"two"</span> =&gt; <span class="number">2</span> , <span class="string">"three"</span> =&gt; <span class="number">3</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># we can take symbol as key , too!</span></span><br><span class="line">symTb = &#123; <span class="symbol">:one</span> =&gt; <span class="number">1</span> , <span class="symbol">:two</span> =&gt; <span class="number">2</span> , <span class="symbol">:three</span> =&gt; <span class="number">3</span> &#125;</span><br><span class="line"></span><br><span class="line">symTbInRuby1pt9 = &#123; <span class="symbol">one:</span> <span class="number">1</span> , <span class="symbol">two:</span> <span class="number">2</span> , <span class="symbol">three:</span> <span class="number">3</span> &#125;</span><br><span class="line"><span class="comment"># 冒號要跟緊 symbol，不然不會過</span></span><br><span class="line"></span><br><span class="line">puts hashTb[<span class="string">"one"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># create empty hash</span></span><br><span class="line">aHash = Hash.new</span><br><span class="line">aHash[<span class="string">"A"</span>] = <span class="string">"a"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># iteration</span></span><br><span class="line">hashTb.each&#123; <span class="params">|key , value|</span> puts <span class="string">"<span class="subst">#&#123;key&#125;</span> , <span class="subst">#&#123;value&#125;</span>"</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># special iterations</span></span><br><span class="line">hashTb.each_key &#123; <span class="params">|key|</span> puts k &#125;</span><br><span class="line">hashTb.each_value &#123; <span class="params">|value|</span> puts value &#125;</span><br><span class="line"></span><br><span class="line">hashTb.each <span class="keyword">do</span> <span class="params">|key , value|</span></span><br><span class="line">    puts <span class="string">"<span class="subst">#&#123;key&#125;</span> , <span class="subst">#&#123;value&#125;</span>"</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># if acess no exist key will get nil (fp? wwwwww)</span></span><br><span class="line"><span class="comment"># you can set default "nil" to other value</span></span><br><span class="line">my_hash = Hash.new(<span class="string">"no such key , sorry"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># select 用法，wow 有 database 的感覺呢。</span></span><br><span class="line"><span class="comment"># 等等，他就是 FP 的 filter 嘛...</span></span><br><span class="line">puts symTb.select&#123; <span class="params">|k , v|</span> v % <span class="number">2</span> == <span class="number">1</span> &#125;</span><br></pre></td></tr></table></figure><h2 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h2><p>這個資料型態也很潮，<br>跟字串不一樣，相同的字面值只佔一個空間。<br>（因為這個特性，所以做 hash 比較優秀嗎？)<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">puts <span class="string">"string"</span>.object_id</span><br><span class="line"><span class="comment"># 12886316620</span></span><br><span class="line">puts <span class="string">"string"</span>.object_id</span><br><span class="line"><span class="comment"># 12886316480</span></span><br><span class="line"></span><br><span class="line">puts <span class="symbol">:symbol</span>.object_id</span><br><span class="line"><span class="comment"># 801628</span></span><br><span class="line">puts <span class="symbol">:symbol</span>.object_id</span><br><span class="line"><span class="comment"># 801628</span></span><br><span class="line"></span><br><span class="line">sym = <span class="symbol">:my_symbol</span> <span class="comment"># : 後面要連起來</span></span><br><span class="line"></span><br><span class="line">s_sym = sym.to_s <span class="comment"># 轉成 string</span></span><br></pre></td></tr></table></figure></p><h2 id="Symbol-vs-String-in-Hash-from-Codecademy"><a href="#Symbol-vs-String-in-Hash-from-Codecademy" class="headerlink" title="Symbol vs String in Hash from Codecademy"></a>Symbol vs String in Hash from <a href="https://www.codecademy.com" target="_blank" rel="noopener">Codecademy</a></h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'benchmark'</span></span><br><span class="line"></span><br><span class="line">string_AZ = Hash[(<span class="string">"a"</span>..<span class="string">"z"</span>).to_a.zip((<span class="number">1</span>..<span class="number">26</span>).to_a)]</span><br><span class="line">symbol_AZ = Hash[(<span class="symbol">:a</span>..<span class="symbol">:z</span>).to_a.zip((<span class="number">1</span>..<span class="number">26</span>).to_a)]</span><br><span class="line"></span><br><span class="line">string_time = Benchmark.realtime <span class="keyword">do</span></span><br><span class="line">  <span class="number">100_000</span>.times &#123; string_AZ[<span class="string">"r"</span>] &#125;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">symbol_time = Benchmark.realtime <span class="keyword">do</span></span><br><span class="line">  <span class="number">100_000</span>.times &#123; symbol_AZ[<span class="symbol">:r</span>] &#125;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">puts <span class="string">"String time: <span class="subst">#&#123;string_time&#125;</span> seconds."</span></span><br><span class="line">puts <span class="string">"Symbol time: <span class="subst">#&#123;symbol_time&#125;</span> seconds."</span></span><br></pre></td></tr></table></figure><h2 id="Zen-of-Ruby-Improvement-of-Syntax"><a href="#Zen-of-Ruby-Improvement-of-Syntax" class="headerlink" title="Zen of Ruby (Improvement of Syntax)"></a>Zen of Ruby (Improvement of Syntax)</h2><p>one line 系列，不用 end。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">puts <span class="string">"She will accept me"</span> <span class="keyword">if</span> she_love_me</span><br><span class="line"></span><br><span class="line">puts <span class="string">"She will reject me"</span> <span class="keyword">unless</span> she_love_me</span><br></pre></td></tr></table></figure></p><p>swich case in c , select case in vb , case when in ruby!<br>非常之靈活。<br>注意 then and else(without then)。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基本用法，像 C</span></span><br><span class="line"><span class="keyword">case</span> lang</span><br><span class="line">    <span class="keyword">when</span> <span class="string">"java"</span> <span class="keyword">then</span> puts <span class="string">"so long..."</span>  <span class="comment"># add then if whole command in one line</span></span><br><span class="line">    <span class="keyword">when</span> <span class="string">"cpp"</span></span><br><span class="line">        puts <span class="string">"so powerful..."</span>           <span class="comment"># or omit then with a new line</span></span><br><span class="line">    <span class="keyword">when</span> <span class="string">"ruby"</span></span><br><span class="line">        puts <span class="string">"so fun!"</span></span><br><span class="line">    <span class="keyword">else</span> puts <span class="string">"I like the else!"</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> lang</span><br><span class="line">    <span class="keyword">when</span> <span class="string">"chinese"</span> , <span class="string">"english"</span>          <span class="comment"># 逗號</span></span><br><span class="line">        puts <span class="string">"I can"</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        puts <span class="string">"I can't"</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> num</span><br><span class="line">    <span class="keyword">when</span> <span class="number">1</span>..<span class="number">10</span> <span class="keyword">then</span> puts <span class="string">"1 to 10"</span>      <span class="comment"># GNU extension 也有</span></span><br><span class="line">    <span class="keyword">when</span> <span class="number">11</span>..<span class="number">20</span> <span class="keyword">then</span> puts <span class="string">"2 to 20"</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span>                                    <span class="comment"># 如果 case 沒給，甚至可以像 VB 用 expr</span></span><br><span class="line">    <span class="keyword">when</span> <span class="literal">false</span> <span class="keyword">then</span> puts <span class="string">"false"</span></span><br><span class="line">    <span class="keyword">when</span> <span class="number">1</span> + <span class="number">1</span> == <span class="number">2</span> <span class="keyword">then</span> puts <span class="string">"true"</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>magic operator! (for me)<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">contain = <span class="literal">nil</span></span><br><span class="line">puts contain</span><br><span class="line">contain <span class="params">||</span>= <span class="string">"not nil"</span>  <span class="comment"># re assignment if nil</span></span><br><span class="line">puts contain</span><br><span class="line">contain <span class="params">||</span>= <span class="string">"re assignment"</span> <span class="comment"># won't re assignment because it's not nil</span></span><br><span class="line">puts contain</span><br></pre></td></tr></table></figure></p><p>zen of iterations<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">object of num</span><br><span class="line"><span class="number">5</span>.times&#123; <span class="params">|n|</span> somthing.. &#125;</span><br><span class="line"></span><br><span class="line">object of list , map <span class="keyword">or</span> other</span><br><span class="line">obj.each&#123; <span class="params">|a , ... |</span> somthing... &#125;</span><br><span class="line"></span><br><span class="line">object which can enum (num , char ...)</span><br><span class="line"><span class="number">5</span>.upto(<span class="number">6</span>)&#123; <span class="params">|x|</span> puts x &#125;</span><br><span class="line"><span class="string">'a'</span>.upto(<span class="string">'z'</span>)&#123; <span class="params">|x|</span> puts x &#125;</span><br></pre></td></tr></table></figure></p><p>check if obj will response the method or not<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj.respond_to?(<span class="symbol">:func</span>) <span class="comment"># take care , it take a functino name(symbol) as param</span></span><br></pre></td></tr></table></figure></p><p>pushy ( <code>&lt;&lt;</code> operator )<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span> , <span class="number">2</span> , <span class="number">3</span> , <span class="number">4</span>].push(<span class="number">5</span>)</span><br><span class="line"><span class="comment"># equal to</span></span><br><span class="line">[<span class="number">1</span> , <span class="number">2</span> , <span class="number">3</span> , <span class="number">4</span>] &lt;&lt; <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="string">"asdf "</span> + <span class="string">"asdf"</span></span><br><span class="line"><span class="comment"># equal to</span></span><br><span class="line"><span class="string">"asdf "</span> &lt;&lt; <span class="string">"asdf"</span></span><br></pre></td></tr></table></figure></p><p>string interpolation<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">puts <span class="string">"list to string <span class="subst">#&#123;[<span class="number">1</span> , <span class="number">2</span> , <span class="number">3</span> , <span class="number">4</span>, <span class="number">5</span>]&#125;</span>"</span> <span class="comment"># eq to to_s function</span></span><br></pre></td></tr></table></figure></p><p>ternary operator<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span> ? <span class="number">1</span> : <span class="number">2</span> <span class="comment"># like c</span></span><br></pre></td></tr></table></figure></p><h2 id="Implicit-Return"><a href="#Implicit-Return" class="headerlink" title="Implicit Return"></a>Implicit Return</h2><p>Lisp 的感覺，當在 let 執行多個 expression 會回傳最後一個 expression。<br>Ruby 是將 function 看成 let 回傳最後一個 statement。</p><h2 id="Blocks-Procs-and-Lambdas"><a href="#Blocks-Procs-and-Lambdas" class="headerlink" title="Blocks , Procs , and Lambdas"></a>Blocks , Procs , and Lambdas</h2><p>前面看了這麼多東西，應該可以察覺 lambda 的概念在哪了吧，<br>沒錯，就是 <strong>block</strong> !（然而這不是 Ruby 真正的 lambda ，他還有個 lambda obj)<br><code>{ |x| x * 2 }</code> 和<br><code>\x -&gt; x * 2</code> in Haskell 和<br><code>lambda x : x * 2</code> in Python 和<br><code>(lambda (x) (* x 2))</code> in Scheme 和<br><code>function(x) { return x * 2 }</code> in JavaScript 都是 lambda。<br>不知不覺也學了好多 lambda 呢，不過我在思考可不可以直接拿來 apply 這件事。<br>Haskell 和 Scheme 不用說，Python 可，<s>JavaScript 和 Ruby 目前不會用。</s><br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lambda&#123; <span class="params">|x|</span> puts x &#125;.call(<span class="number">8</span>)         <span class="comment"># Ruby</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123; <span class="built_in">console</span>.log(x); &#125;)(<span class="number">8</span>) <span class="comment">// JavaScript</span></span><br></pre></td></tr></table></figure><p>High Order Function<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># collect 就是 FP 中常用的 map</span></span><br><span class="line">[<span class="number">1</span> , <span class="number">2</span> , <span class="number">3</span>].collect &#123; <span class="params">|n|</span> n % <span class="number">2</span> == <span class="number">0</span> &#125;</span><br><span class="line">[<span class="number">1</span> , <span class="number">2</span> , <span class="number">3</span>].map &#123; <span class="params">|n|</span> n % <span class="number">2</span> == <span class="number">0</span> &#125; <span class="comment"># 也有 map 這個 function</span></span><br></pre></td></tr></table></figure></p><hr><p>yield =&gt; 傳入的 lambda function 代名詞（變數名）。<br>一般我們 FP 在定義 High Order Function 時都要為 take 的 function 取變數名。<br>但 Ruby 在只有傳入一個 function 時，可以直接拿 yield 做關鍵字來 take function。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 我做一個簡單的 map</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myMap</span> <span class="title">li</span></span></span><br><span class="line">    rtn = []</span><br><span class="line">    li.each&#123; <span class="params">|e|</span> rtn &lt;&lt; <span class="keyword">yield</span>(e) &#125;</span><br><span class="line">    rtn <span class="comment"># Implicit return</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">puts <span class="string">"<span class="subst">#&#123;myMap [<span class="number">1</span> , <span class="number">2</span> , <span class="number">3</span> , <span class="number">4</span>] &#123; <span class="params">|x|</span> x ** <span class="number">2</span> &#125;</span>&#125;"</span></span><br><span class="line"><span class="comment"># 藉由 ruby 強大的 DSL 能力，括號少很多</span></span><br></pre></td></tr></table></figure></p><hr><p>Proc To DRY<br>感覺可以用 JavaScript 的 lambda fn 和其 name binding 體會一下差異<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ruby 要將 lambda(Proc) 綁到變數上，注意 P 大寫</span></span><br><span class="line">mul = Proc.new &#123; <span class="params">|a , b|</span> a * b &#125; <span class="comment"># create a block and =&gt; new proc object</span></span><br><span class="line">                                 <span class="comment"># proc obj 比 block obj 成熟</span></span><br><span class="line">                                 <span class="comment"># 且可以用 call method 重複呼叫</span></span><br><span class="line">                                 <span class="comment"># block 是一次性的</span></span><br><span class="line">puts mul.call <span class="number">1</span> , <span class="number">2</span></span><br><span class="line"><span class="comment"># 因為是物件導向 Proc 物件要當 Function 用要用 call</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mul = <span class="function"><span class="keyword">function</span>(<span class="params">x , y</span>)</span>&#123; <span class="keyword">return</span> x * y &#125;</span><br><span class="line"><span class="comment">// create lambda and bind it to a new name</span></span><br><span class="line"><span class="built_in">console</span>.log(mul(<span class="number">1</span> , <span class="number">2</span>));</span><br><span class="line"><span class="comment">// 剛好相反，因為物件都是 Function 模擬的 w</span></span><br></pre></td></tr></table></figure><hr><p>Proc to Block<br>可以體會到，把 Block 綁到 Proc 是常用的手段，<br>但要 Proc 如何用在 High Order Function 呢？<br>前面我們學到 Block 使用是在 function 後加 Block 然後使用 yield 關鍵字。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">用前面的 myMap 再加一個 double 為例子。</span><br><span class="line">double = Proc.new &#123; <span class="params">|x|</span> x * <span class="number">2</span> &#125;</span><br><span class="line">puts myMap([<span class="number">1</span> , <span class="number">2</span> , <span class="number">3</span>] , &amp;double) <span class="comment"># &amp; 號 做的就是把 Proc =&gt; Block</span></span><br><span class="line"><span class="comment"># equal to</span></span><br><span class="line">puts myMap([<span class="number">1</span> , <span class="number">2</span> , <span class="number">3</span>]) &#123; <span class="params">|x|</span> x * <span class="number">2</span> &#125;</span><br><span class="line"><span class="comment"># but</span></span><br><span class="line">puts myMap([<span class="number">1</span> , <span class="number">2</span> , <span class="number">3</span>] , &#123; <span class="params">|x|</span> x * <span class="number">2</span> &#125;) <span class="comment"># error</span></span><br><span class="line">puts myMap([<span class="number">1</span> , <span class="number">2</span> , <span class="number">3</span>]) &amp;double         <span class="comment"># error</span></span><br></pre></td></tr></table></figure></p><hr><p>Proc 應用在 map 上。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">num_s = [<span class="number">1</span> , <span class="number">2</span> , <span class="number">3</span>].map(&amp;<span class="symbol">:to_s</span>)</span><br><span class="line"><span class="comment"># 注意冒號，要用 symbol 轉 proc 來 call</span></span><br><span class="line"><span class="comment"># （其實我在想是不是 obj method 的關係）</span></span><br></pre></td></tr></table></figure></p><hr><p>補：Codecademy 上沒有講，但我覺得很奇怪的一點－難道我只能用 yield 嗎？<br>FP 上都可以把 function 傳進來用變數表示，Ruby 要怎麼做？<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 這樣做（重寫 myMap)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myMap</span> <span class="title">li</span> , <span class="title">&amp;</span><span class="title">fn</span> <span class="comment"># 記得傳進來要當 proc or lambda 物件來看了</span></span></span><br><span class="line">    rtn = []</span><br><span class="line">    li.each&#123; <span class="params">|e|</span> rtn &lt;&lt; fn.call(e) &#125; <span class="comment"># 所以要用 call method</span></span><br><span class="line">    rtn <span class="comment"># Implicit return</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">double = Proc.new&#123; <span class="params">|e|</span> e * <span class="number">2</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#以下兩種都可以過</span></span><br><span class="line">puts <span class="string">"<span class="subst">#&#123;myMap([<span class="number">1</span> , <span class="number">2</span> , <span class="number">3</span> , <span class="number">4</span>] , &amp;double&#125;</span>"</span></span><br><span class="line">puts <span class="string">"<span class="subst">#&#123;myMap([<span class="number">1</span> , <span class="number">2</span> , <span class="number">3</span> , <span class="number">4</span>])&#123; <span class="params">|e|</span> e * <span class="number">2</span> &#125;</span>&#125;"</span></span><br></pre></td></tr></table></figure></p><p>所以看起來 yield 的優勢是將它當成 function 看。<br>而這種方式則是當作 object 看。</p><hr><p>真正要介紹 Ruby 的 lambda 了，由於是 OO 語言，所以 lambda 是 obj。<br>用法基本和 proc 相似。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">proc_double = Proc.new &#123; <span class="params">|x|</span> x * <span class="number">2</span> &#125;</span><br><span class="line">lambda_double = lambda &#123; <span class="params">|x|</span> x * <span class="number">2</span> &#125;</span><br></pre></td></tr></table></figure></p><p>difference between lambda and Proc</p><ol><li>lambda 會檢查 param 數量，Proc 若沒吃夠直接當 nil</li><li>lambda 會返回控制權， Proc 回直接執行<br>（對 2. 我有一套自己的解釋法但不知對不對，詳見例）</li></ol><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ProcTst</span></span></span><br><span class="line">    proc_s = Proc.new&#123; <span class="keyword">return</span> <span class="string">"inner Proc"</span> &#125;</span><br><span class="line">                                    <span class="comment"># 我視 proc.call 為直接像 macro 炸開</span></span><br><span class="line">    proc_s.call                     <span class="comment"># 所以該行替換成 return "inner Proc"</span></span><br><span class="line">                                    <span class="comment"># 所以就直接 return 了</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"ProcTst"</span>                <span class="comment"># 不走這行</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">puts ProcTst <span class="comment"># ==&gt; "inner ProcTst"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">LbdaTst</span></span></span><br><span class="line">    lbda_s = lambda &#123; <span class="keyword">return</span> <span class="string">"inner Lbda"</span> &#125;</span><br><span class="line">                                    <span class="comment"># lambda 直接再進一個 stack</span></span><br><span class="line">    lambda.call                     <span class="comment"># 所以該行回傳結果是 "inner Lbda"</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"LbdaTst"</span>                <span class="comment"># 然後 return "LbdaTst"</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">puts LbdaTst <span class="comment"># ==&gt; "LbdaTst"</span></span><br></pre></td></tr></table></figure><p>應該只有我會這麼亂想吧…<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ReturnTst</span></span></span><br><span class="line">    <span class="keyword">yield</span>                           <span class="comment"># 所以該行回傳結果是 "inner Lbda"</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"ReturnTst"</span>                <span class="comment"># 然後 return "LbdaTst"</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">puts ReturnTst&#123; <span class="keyword">return</span> <span class="string">"rtn of block"</span> &#125;</span><br><span class="line">puts ReturnTst &amp;Proc.new&#123; <span class="keyword">return</span> <span class="string">"rtn of Proc"</span> &#125;</span><br><span class="line">puts ReturnTst &amp;lambda&#123; <span class="keyword">return</span> <span class="string">"rtn of lambda"</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># =&gt; 結果都是 unexpect return</span></span><br></pre></td></tr></table></figure></p><hr><p>結語，要用一次性且只有一個的 function 用 block + yield 就好<br>然後一次性多個 就傳 lambda or Proc object 加上 &amp; 吧。</p><h2 id="OOP"><a href="#OOP" class="headerlink" title="OOP"></a>OOP</h2><p>Capitalize your class name<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>                <span class="comment"># =&gt; 強制大寫，不然不給過，立意良善</span></span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">doge = Dog.new <span class="string">"lion"</span>    <span class="comment"># create a instance</span></span><br></pre></td></tr></table></figure></p><hr><p>constructor - initialize<br>他的建構子不是拿 class 的名字<br>不過說實在的，我覺得 initialize 有點冗長…<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize</span> <span class="title">name</span></span></span><br><span class="line">        @name = name     <span class="comment"># 詳見下例</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><hr><p>variable type - global , class , instance<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$animal_num = <span class="number">0</span>          <span class="comment"># 全域變數，帶 $ 字頭</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span></span><br><span class="line">    @@dog_count = <span class="number">0</span>      <span class="comment"># 屬於 class 的 var，就是 static 啦，帶 @@ 字頭</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize</span> <span class="title">name</span></span></span><br><span class="line">        @name = name     <span class="comment"># 帶 @代表成員變數，哼哼不用煩惱變數就是爽</span></span><br><span class="line">        @@dog_count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><hr><p>function belongs class -&gt; self.fn or ClassName.fn<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span></span><br><span class="line">    @@dog_count = <span class="number">0</span>      <span class="comment"># 屬於 class 的 var，就是 static 啦，帶 @@ 字頭</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize</span> <span class="title">name</span></span></span><br><span class="line">        @name = name     <span class="comment"># 帶 @代表成員變數，哼哼不用煩惱變數就是爽</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">                         <span class="comment"># class function 就是 static 的 function 啦</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">get_dog_num</span>;</span> @@dog_count <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">                         <span class="comment"># 意會一下用 ; 而不用換行（想一想為啥 end 前不用呢）</span></span><br><span class="line"><span class="comment">=begin 或者可以寫成</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    def Dog.get_dog_num</span></span><br><span class="line"><span class="comment">        @<span class="doctag">@dog</span>_count</span></span><br><span class="line"><span class="comment">    end</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">=end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><hr><p>inheritance with <code>&lt;</code></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize</span> <span class="title">sound</span></span></span><br><span class="line">        @sound = sound</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">howling</span></span></span><br><span class="line">        puts @sound</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> &lt; Animal</span></span><br><span class="line">    @@dog_count = <span class="number">0</span>      <span class="comment"># 屬於 class 的 var，就是 static 啦，帶 @@ 字頭</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize</span> <span class="title">name</span></span></span><br><span class="line">        @name = name     <span class="comment"># 帶 @代表成員變數，哼哼不用煩惱變數就是爽</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">get_dog_num</span>      <span class="comment"># 就是 static 的 function 啦</span></span></span><br><span class="line">        @@dog_count</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">doge = Dog.new <span class="string">"lion"</span></span><br><span class="line">doge.howling             <span class="comment"># 糟糕，doge 叫不出來，怎麼辦</span></span><br></pre></td></tr></table></figure><hr><p>需要 overriide ，因為 doge 叫不出來。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> &lt; Animal</span></span><br><span class="line">    @@dog_count = <span class="number">0</span>      <span class="comment"># 屬於 class 的 var，就是 static 啦，帶 @@ 字頭</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize</span> <span class="title">name</span></span></span><br><span class="line">        @name = name     <span class="comment"># 帶 @代表成員變數，哼哼不用煩惱變數就是爽</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#       <span class="doctag">@sound</span> = "Wolf!" # 除了 overriide，也可以將 sound 直接改掉</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">get_dog_num</span>      <span class="comment"># 就是 static 的 function 啦</span></span></span><br><span class="line">        @@dog_count</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">howling</span>          <span class="comment"># overriide howling</span></span></span><br><span class="line">        puts <span class="string">"Wolf!"</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">doge = Dog.new <span class="string">"lion"</span></span><br><span class="line">doge.howling             <span class="comment"># doge 叫出來了</span></span><br></pre></td></tr></table></figure></p><hr><p>super =&gt; 調用 parent 的 <strong>同名 function</strong>（不只是 initialize 喔）<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> &lt; Animal</span></span><br><span class="line">    @@dog_count = <span class="number">0</span>      <span class="comment"># 屬於 class 的 var，就是 static 啦，帶 @@ 字頭</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize</span> <span class="title">name</span></span></span><br><span class="line">        @name = name     <span class="comment"># 帶 @代表成員變數，哼哼不用煩惱變數就是爽</span></span><br><span class="line">        <span class="keyword">super</span> <span class="string">"Wolf!"</span>    <span class="comment"># 剛剛的直接取代不漂亮，直接調用 Animal 的 initialize</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">get_dog_num</span>      <span class="comment"># 就是 static 的 function 啦</span></span></span><br><span class="line">        @@dog_count</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">doge = Dog.new <span class="string">"lion"</span></span><br><span class="line">doge.howling             <span class="comment"># doge 叫出來了</span></span><br></pre></td></tr></table></figure></p><hr><h2 id="Ruby-不支援多重繼承，因為-so-ugly，他用-mixin-mod-class"><a href="#Ruby-不支援多重繼承，因為-so-ugly，他用-mixin-mod-class" class="headerlink" title="Ruby 不支援多重繼承，因為 so ugly，他用 mixin(mod + class)!"></a>Ruby 不支援多重繼承，因為 <strong>so ugly</strong>，他用 mixin(mod + class)!</h2><hr><p>public , private , protect<br>class var , instance var 預設都是 private<br>class function , instance function 預設都是 public<br>protect 就是繼承者可用嘛，不多說。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> &lt; Animal</span></span><br><span class="line">    @@dog_count = <span class="number">0</span>      <span class="comment"># 屬於 class 的 var，就是 static 啦，帶 @@ 字頭</span></span><br><span class="line"></span><br><span class="line">    public</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize</span> <span class="title">name</span>;</span> @name = name; <span class="keyword">super</span> <span class="string">"Wolf!"</span> <span class="keyword">end</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">get_dog_num</span>;</span> @@dog_count <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    private</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">any_fn_you_want_to_be_private</span>;</span> <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># or</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> &lt; Animal</span></span><br><span class="line">    @@dog_count = <span class="number">0</span>      <span class="comment"># 屬於 class 的 var，就是 static 啦，帶 @@ 字頭</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize</span> <span class="title">name</span>;</span> @name = name; <span class="keyword">super</span> <span class="string">"Wolf!"</span> <span class="keyword">end</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">get_dog_num</span>;</span> @@dog_count <span class="keyword">end</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">any_fn_you_want_to_be_public</span>;</span> <span class="keyword">end</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">any_fn_you_want_to_be_private</span>;</span> <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    public <span class="symbol">:any_fn_you_want_to_be_public</span>     <span class="comment"># 注意是用 symbol</span></span><br><span class="line">    private <span class="symbol">:any_fn_you_want_to_be_private</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 對 class fn 做 public , private 比較特別</span></span><br><span class="line">    <span class="comment"># 要使用 private_class_method 這個關鍵字</span></span><br><span class="line">    <span class="comment"># 在此略過不討論</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><hr><p>attr_reader , attr_writer , attr_accessor<br>我們常常在 OOP 使用 get 和 set ，但實在太冗了，<br>Ruby 給我們自動製造 function 的方法。用起來和 public 變數一樣。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span></span><br><span class="line">    <span class="keyword">attr_reader</span> <span class="symbol">:age</span>              <span class="comment"># 為 age 做 get 的 function</span></span><br><span class="line">    <span class="keyword">attr_writer</span> <span class="symbol">:food</span>             <span class="comment"># 抱歉，江郎才盡了</span></span><br><span class="line">    <span class="keyword">attr_accessor</span> <span class="symbol">:name</span>           <span class="comment"># get and set both</span></span><br><span class="line">    <span class="comment"># 注意後面是加 symbol</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize</span> <span class="title">name</span> , <span class="title">age</span> , <span class="title">food</span></span></span><br><span class="line">        @name = name</span><br><span class="line">        @age = age</span><br><span class="line">        @food = food</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">doge = Dog.new <span class="string">"lion"</span> , <span class="number">3</span> , <span class="string">"null"</span></span><br><span class="line">puts doge.name</span><br><span class="line">doge.name = <span class="string">"frog"</span></span><br><span class="line">puts <span class="string">"<span class="subst">#&#123;doge.name&#125;</span> : <span class="subst">#&#123;doge.age&#125;</span>"</span></span><br><span class="line">doge.food = <span class="string">"meat"</span></span><br></pre></td></tr></table></figure><h2 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h2><p>module Name =&gt; 一樣 Capitalized<br>module 只能有 Const（大寫的 name)<br>namespace 呼叫 （和 C++ 一樣可以用 <code>::</code>)<br>require ModuleName （就是 import in python 啦）<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">"date"</span> <span class="comment"># 可以使用 Date module 的東西，注意小寫及 string</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Rectangle</span></span></span><br><span class="line">    Edge = <span class="number">4</span>   <span class="comment"># 廢話</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Rectangle</span>.<span class="title">area</span> <span class="title">wid</span> , <span class="title">len</span></span></span><br><span class="line">        len * wid</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Rectangle</span>.<span class="title">perimeter</span> <span class="title">wid</span> , <span class="title">len</span></span></span><br><span class="line">        (len + wid) * <span class="number">2</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">shape</span></span></span><br><span class="line">        <span class="string">"Rectangle"</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">puts Rectangle::Edge</span><br><span class="line">puts Rectangle.area <span class="number">5</span> , <span class="number">10</span></span><br></pre></td></tr></table></figure></p><hr><p>include module in class<br>mixin -&gt; imitating multiple inheritance<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Paper</span> <span class="comment"># Ummm...</span></span></span><br><span class="line">    <span class="keyword">include</span> Rectangle</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize</span> <span class="title">len</span> , <span class="title">wid</span></span></span><br><span class="line">        @len = len</span><br><span class="line">        @wid = wid</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">puts m.shape   <span class="comment"># Rectangle</span></span><br></pre></td></tr></table></figure></p><p>但我在想 Rectangle 的 area 如果寫成 instance fn 的話<br>給 Paper inheritance ，area 怎麼直接用到 Paper 的 wid &amp; len 呢…</p><hr><p>extend -&gt; as class fn<br>拿 parent 的 <strong>instance fn</strong> 當自己的 <strong>class fn</strong><br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Rectangle</span></span></span><br><span class="line">    Edge = <span class="number">4</span>   <span class="comment"># 廢話</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">area</span> <span class="title">wid</span> , <span class="title">len</span>      <span class="comment"># 注意 area , class fn =&gt; instance fn</span></span></span><br><span class="line">        len * wid</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">shape</span></span></span><br><span class="line">        <span class="string">"Rectangle"</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Square</span>  <span class="comment"># class 也可以用 extend 喔，效果一樣</span></span></span><br><span class="line">    extend Rectangle</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">puts Square.area <span class="number">5</span> , <span class="number">5</span> <span class="comment"># 就是這樣</span></span><br></pre></td></tr></table></figure></p><hr><p>結語，其實我覺得還是有許多問題的，不過這真的是 OOP 面的問題。</p><h2 id="寫在後面"><a href="#寫在後面" class="headerlink" title="寫在後面"></a>寫在後面</h2><p>Ruby 還有一些比較特別的東西，記在最後面。</p><hr><p>單件方法 (singleton method)</p><p>就是 instance create 後，可以直接重新 def instName.func。<br>據說是從 prototype-based 來的。(JavaScript 就是 prototype-based)</p><hr><p>恩，有點 WTF 的東西…<br>感覺整個 obj_new 是個 lambda…<br>v 是 obj_new closure 裡的 name binding。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">obj_new</span></span></span><br><span class="line">    v = <span class="number">0</span></span><br><span class="line">    get = lambda&#123; v &#125;</span><br><span class="line">    set = lambda&#123; <span class="params">|x|</span> v = x &#125;</span><br><span class="line">    <span class="keyword">return</span> get , set</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">obj_r , obj_w = obj_new</span><br><span class="line"></span><br><span class="line">puts obj_r.call</span><br><span class="line">obj_w.call <span class="number">5</span></span><br><span class="line">puts obj_r.call</span><br></pre></td></tr></table></figure><p>恕我用癟腳的 Scheme 模擬一下。<br>最近剛好在教 FP 模擬 OOP :)<br><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">define</span></span> obj-new</span><br><span class="line">  (<span class="name"><span class="builtin-name">lambda</span></span> (v)</span><br><span class="line">    (<span class="name"><span class="builtin-name">list</span></span></span><br><span class="line">      (<span class="name"><span class="builtin-name">lambda</span></span> () v)</span><br><span class="line">      (<span class="name"><span class="builtin-name">lambda</span></span> (x) (<span class="name"><span class="builtin-name">set!</span></span> v x))</span><br><span class="line">      )</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="builtin-name">define</span></span> obj (<span class="name">obj-new</span> <span class="number">0</span>))</span><br><span class="line">(<span class="name"><span class="builtin-name">define</span></span> obj-r (<span class="name"><span class="builtin-name">car</span></span> obj))</span><br><span class="line">(<span class="name"><span class="builtin-name">define</span></span> obj-w (<span class="name"><span class="builtin-name">cadr</span></span> obj)) <span class="comment">; 沒有 pattern matching 真麻煩</span></span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="builtin-name">display</span></span> (<span class="name">obj-r</span>)) (<span class="name"><span class="builtin-name">newline</span></span>)</span><br><span class="line">(<span class="name">obj-w</span> <span class="number">5</span>)</span><br><span class="line">(<span class="name"><span class="builtin-name">display</span></span> (<span class="name">obj-r</span>)) (<span class="name"><span class="builtin-name">newline</span></span>)</span><br></pre></td></tr></table></figure></p><p>其實如果不要照 Ruby 的範例，我 scheme 是比較想寫成</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">define</span></span> obj-new</span><br><span class="line">  (<span class="name"><span class="builtin-name">lambda</span></span> (v)</span><br><span class="line">    (<span class="name"><span class="builtin-name">lambda</span></span> (sym . param)</span><br><span class="line">      (<span class="name"><span class="builtin-name">cond</span></span></span><br><span class="line">        ((<span class="name"><span class="builtin-name">equal?</span></span> sym <span class="symbol">'get</span>) v)</span><br><span class="line">        ((<span class="name"><span class="builtin-name">equal?</span></span> sym <span class="symbol">'set</span>) (<span class="name"><span class="builtin-name">set!</span></span> v (<span class="name"><span class="builtin-name">car</span></span> param)))</span><br><span class="line">        (<span class="name"><span class="builtin-name">else</span></span> <span class="symbol">'func-not-def</span>)</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line">(<span class="name"><span class="builtin-name">define</span></span> obj (<span class="name">obj-new</span> <span class="number">0</span>))</span><br><span class="line">(<span class="name"><span class="builtin-name">display</span></span> (<span class="name">obj</span> <span class="symbol">'get</span>)) (<span class="name"><span class="builtin-name">newline</span></span>)</span><br><span class="line">(<span class="name">obj</span> <span class="symbol">'set</span> <span class="number">5</span>)</span><br><span class="line">(<span class="name"><span class="builtin-name">display</span></span> (<span class="name">obj</span> <span class="symbol">'get</span>)) (<span class="name"><span class="builtin-name">newline</span></span>)</span><br></pre></td></tr></table></figure><hr><p>例外處理</p><p>對應 C++ ， Java 的 throw , catch ，Ruby 有著 begin , rescue 。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_file_first_line</span></span></span><br><span class="line">    err_try = <span class="number">0</span></span><br><span class="line">    print <span class="string">"&gt; "</span></span><br><span class="line">    fname = gets.chomp</span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        file = open(fname)</span><br><span class="line">        rtn = file.gets</span><br><span class="line">    <span class="keyword">rescue</span></span><br><span class="line">        <span class="keyword">if</span> err_try &lt; <span class="number">3</span></span><br><span class="line">            print <span class="string">"&gt; "</span></span><br><span class="line">            fname = gets.chomp</span><br><span class="line">            err_try += <span class="number">1</span></span><br><span class="line">            <span class="keyword">retry</span>               <span class="comment"># jump to begin</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">ensure</span>                      <span class="comment"># do ensure block no matter what</span></span><br><span class="line">        puts <span class="string">"Ensure close file"</span></span><br><span class="line">        file&amp;.close             <span class="comment"># &amp;. -&gt; safer func call</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    rtn</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">puts <span class="string">"&gt;&gt; <span class="subst">#&#123;get_file_first_line&#125;</span>"</span></span><br></pre></td></tr></table></figure><hr><p>inspect func — 自定義直接呼叫物件的回傳值。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Org</span></span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inspect</span></span></span><br><span class="line">        <span class="string">"It's a Object"</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">obj = Org.new</span><br><span class="line">obj           <span class="comment"># return "It's a Org" in irb</span></span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;
&lt;a href=&quot;https://www.codecademy.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Codecademy&lt;/a&gt; 之 Ruby 速記。&lt;br&gt;
原來 Ruby 和 DSL 很有淵源啊（喃喃）。&lt;br&gt;
剛學沒多久教授就提到了，Ruby 主要是 SmallTalk + Lisp 佐一點 C。&lt;br&gt;
On the path to enlightenment.&lt;br&gt;
wait to refer:&lt;br&gt;
  &lt;a href=&quot;http://guides.ruby.tw/ruby/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ruby Guides&lt;/a&gt; done!&lt;br&gt;
  &lt;a href=&quot;https://www.ruby-lang.org/zh_tw/documentation/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Lots of docs&lt;/a&gt;

&lt;/center&gt;
    
    </summary>
    
      <category term="Note" scheme="http://nobodyzxc.github.io/categories/Note/"/>
    
    
      <category term="oop" scheme="http://nobodyzxc.github.io/tags/oop/"/>
    
      <category term="ruby" scheme="http://nobodyzxc.github.io/tags/ruby/"/>
    
  </entry>
  
  <entry>
    <title>PHP Note</title>
    <link href="http://nobodyzxc.github.io/2017/03/26/PHP-Note/"/>
    <id>http://nobodyzxc.github.io/2017/03/26/PHP-Note/</id>
    <published>2017-03-25T20:01:35.000Z</published>
    <updated>2020-08-16T12:11:42.982Z</updated>
    
    <content type="html"><![CDATA[<center>這個世界上最好的語言，我學了很多次，但每次都是有需要才研究一下，感覺用完就生疏了，<br>在學完 OOP ，以及學了一些語言後，對這方面有些概觀，回來重新開始，<br>許多東西好像就合理了起來，但這次也只是複習基本語法罷了，期許能記得更牢。</center><a id="more"></a><h2 id="Basic"><a href="#Basic" class="headerlink" title="Basic"></a>Basic</h2><p>跟 Python 一樣是動態語言，所謂變數只是 name binding，<br>用法跟 Python 也一樣，要用之前先 assign 一個值。<br>變數前跟著一個 <script type="math/tex">`，跟 Shell Script 不一樣的是 assign 的時候也要跟著 `</script>。<br>但是學到 OO 的部分，事情有了些變化，const 的東西不用加 <code>$</code>，或許是不把它當變數看的緣故。<br>物件內的變數宣告，方法和 Python 蠻像的，但好像蠻強調 <code>public</code> 封裝。<br>子函數習慣上也是用 <code>$this</code> 來設定 member variable。<br>尚未探究子函數內是否有像 Cpp 用 scope 直接使用 member variable，但學到的是用 <code>$this</code>，<br>所以可以用的可能性不大。但子函式又不像 Python 會把 self 傳進去。<br>一般使用<code>.</code>作為字串 connect 的 operator，所以 object 呼叫底下的東西會用<code>-&gt;</code>。<br>object 底下的變數不用再加錢號。 ex: <code>$nobodyzxc-&gt;name</code> 而不是 <code>$nobodyzxc-&gt;$name</code>。<br>static 或 const 的東西可以用 <code>ClassName::Attr</code>呼叫，和 Cpp 一樣。</p><h2 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h2><p>簡單的 operator 略過。<br>PHP 想當然爾，對文本的操作應是相當強的，<br>但我也只學到 <code>strlen()</code> , <code>strpos()</code> , <code>str_replace()</code>，其他要用再查。<br>html 轉碼、正則等之前用過幾次用用也忘了。<br>自定義 function 寫法。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func_name</span><span class="params">($var)</span></span>&#123;</span><br><span class="line">    $rtn = blalala($var);</span><br><span class="line">    <span class="keyword">return</span> $rtn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在函數裡宣告的變數基本上都是區域變數，如要用全域，加上<code>global</code>關鍵字。</p><h2 id="Control-Flow"><a href="#Control-Flow" class="headerlink" title="Control Flow"></a>Control Flow</h2><p>基本的東西，稍微記一下。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(exp)&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">elseif</span>(exp)&#123; <span class="comment">// well , take care the key word</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(what)&#123;</span><br><span class="line">    <span class="keyword">case</span> cs0:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> cs1:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> cs2:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (what): <span class="comment">// syntax sugar , pythonic ?</span></span><br><span class="line">    <span class="keyword">case</span> cs0:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> cs1:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> cs2:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">endswitch</span>;</span><br></pre></td></tr></table></figure></p><h2 id="Loop"><a href="#Loop" class="headerlink" title="Loop"></a>Loop</h2><p>基本上和 C 系差不多，但有迭代器的用法 (Array 時再說），注意一下。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>($i = <span class="number">0</span> ; $i &lt; <span class="number">10</span> ; $i++)&#123;</span><br><span class="line">    <span class="keyword">echo</span> $i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(exp)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(exp): <span class="comment">// syntax sugar</span></span><br><span class="line"><span class="keyword">endwhile</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span>&#123;&#125;<span class="keyword">while</span>(<span class="number">0</span>);</span><br></pre></td></tr></table></figure></p><h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><p>物件化，沒有用符號下去載，直接拿一個物件名，注意 new。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$myArray = <span class="keyword">new</span> <span class="keyword">Array</span>(<span class="number">1</span> , <span class="number">2</span> , <span class="number">3</span>);</span><br><span class="line">array_push($myArray , <span class="number">4</span>);</span><br><span class="line"><span class="keyword">unset</span>($myArray , <span class="number">3</span>);       <span class="comment">// remove element 4</span></span><br><span class="line"><span class="keyword">unset</span>($myArray);           <span class="comment">// remove whole aray</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>($myArray <span class="keyword">as</span> $e)&#123;   <span class="comment">// iterator</span></span><br><span class="line">    <span class="keyword">echo</span> $e.<span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$twoDimAry = <span class="keyword">new</span> <span class="keyword">Array</span>(<span class="keyword">Array</span>() , <span class="keyword">Array</span>());</span><br><span class="line"></span><br><span class="line">$myAryMap = <span class="keyword">new</span> <span class="keyword">Array</span>(<span class="string">'keyOne'</span> =&gt; <span class="number">1</span> ,</span><br><span class="line">                    <span class="string">'keyTwo'</span>   =&gt; <span class="number">2</span> ,</span><br><span class="line">                    <span class="string">'keyThree'</span> =&gt; <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>($myAryMap <span class="keyword">as</span> $key =&gt; $val)&#123; <span class="comment">// array map iterator</span></span><br><span class="line">    <span class="keyword">echo</span> $key.<span class="string">' =&gt; '</span>.$val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="OOP"><a href="#OOP" class="headerlink" title="OOP"></a>OOP</h2><p>寫個物件來記最快。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">say</span><span class="params">($word)</span></span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> $word.<span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> die_age = <span class="number">30</span>; <span class="comment">// we don't need $</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age = $age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getOlder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$nobodyzxc = <span class="keyword">new</span> Person(<span class="number">20</span>);</span><br><span class="line"><span class="keyword">echo</span> $nobodyzxc-&gt;age;</span><br><span class="line">$nobodyzxc-&gt;getOlder();</span><br><span class="line">Person::say(<span class="string">"there , there"</span>);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;
這個世界上最好的語言，我學了很多次，但每次都是有需要才研究一下，感覺用完就生疏了，&lt;br&gt;
在學完 OOP ，以及學了一些語言後，對這方面有些概觀，回來重新開始，&lt;br&gt;
許多東西好像就合理了起來，但這次也只是複習基本語法罷了，期許能記得更牢。
&lt;/center&gt;
    
    </summary>
    
      <category term="Note" scheme="http://nobodyzxc.github.io/categories/Note/"/>
    
    
      <category term="php" scheme="http://nobodyzxc.github.io/tags/php/"/>
    
      <category term="oop" scheme="http://nobodyzxc.github.io/tags/oop/"/>
    
  </entry>
  
  <entry>
    <title>MySQL Note</title>
    <link href="http://nobodyzxc.github.io/2017/02/10/MySQL-Note/"/>
    <id>http://nobodyzxc.github.io/2017/02/10/MySQL-Note/</id>
    <published>2017-02-10T10:46:49.000Z</published>
    <updated>2020-08-16T12:11:34.142Z</updated>
    
    <content type="html"><![CDATA[<center>開篇謎之音：...... 寒假一直開坑，卻一直沒好好填。<br>之前想寫個 OJ 所以才接觸 MySQL，但一碰 MySQL 後 OJ 卻沒甚麼動力去玩了。<br>一切都靜止下來了。<br>一年後，突然想起，才在這裡慢慢填，主要是 <a href="http://www.w3schools.com/sql/default.asp" target="_blank" rel="noopener">w3school</a> 的筆記。<br>利益相關：老爸是寫 ERP 管理資料庫的，然後他表示現在都用 stored procedure 了。</center><a id="more"></a><h2 id="環境配置"><a href="#環境配置" class="headerlink" title="環境配置"></a>環境配置</h2><p>還是在 Cygwin 上，相關辦法可以參考不才的<a href="http://no8dyzxc.pixnet.net/blog/post/103827086" target="_blank" rel="noopener">這篇</a>。<br>練習的 database 就用 <a href="http://www.w3schools.com/sql/default.asp" target="_blank" rel="noopener">w3school</a> 教的 <a href="https://github.com/dalers/mywind" target="_blank" rel="noopener">northwind</a> 吧。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/dalers/mywind.git</span><br><span class="line">cat northwind.sql | mysql -u root -p</span><br><span class="line">cat northwind-default-current-timestamp.sql | mysql -u root -p</span><br><span class="line">cat northwind-data.sql | mysql -u root -p</span><br><span class="line"><span class="comment"># -u 引數看你的配置</span></span><br></pre></td></tr></table></figure></p><h2 id="筆-ㄉㄨㄟ-記-ㄐㄧ-開始"><a href="#筆-ㄉㄨㄟ-記-ㄐㄧ-開始" class="headerlink" title="筆 (ㄉㄨㄟ) 記 (ㄐㄧ) 開始"></a>筆 (ㄉㄨㄟ) 記 (ㄐㄧ) 開始</h2><ul><li><p>create , show</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- create database db_name;</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> <span class="keyword">test</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- create table tb_name (column_1 data_type [constraint], ...)</span></span><br><span class="line"><span class="comment">-- use test;</span></span><br><span class="line"><span class="comment">-- create table custs;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test.custs</span><br><span class="line">(</span><br><span class="line"> <span class="keyword">id</span> <span class="built_in">int</span> ,</span><br><span class="line"> <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">255</span>) ,</span><br><span class="line"> addr <span class="built_in">varchar</span>(<span class="number">255</span>) ,</span><br><span class="line"> city(<span class="number">255</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- add constraints</span></span><br><span class="line">// 1.</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tb_name</span><br><span class="line"><span class="keyword">add</span> <span class="keyword">constraint</span> constraint_var_name constraint_type (cond | col_x)</span><br><span class="line">[<span class="keyword">references</span> table_name(col_name)] <span class="comment">-- foreign key</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tb_name</span><br><span class="line">// <span class="number">2.</span></span><br><span class="line"><span class="keyword">add</span> constraint_type (col_x) <span class="comment">-- () is important</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- add default</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tb_name</span><br><span class="line"><span class="keyword">alter</span> col_x <span class="keyword">set</span> <span class="keyword">default</span> val</span><br><span class="line"></span><br><span class="line"><span class="comment">-- drop constraints</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tb_name</span><br><span class="line"><span class="keyword">drop</span> [<span class="keyword">index</span> constraint_var_name | <span class="keyword">index</span> col_x | primary_key |</span><br><span class="line">      <span class="keyword">foreign</span> <span class="keyword">key</span> col_x | <span class="keyword">check</span> col_x ]</span><br><span class="line"></span><br><span class="line"><span class="comment">-- drop default</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tb_name</span><br><span class="line"><span class="keyword">alter</span> col_x <span class="keyword">drop</span> <span class="keyword">default</span></span><br></pre></td></tr></table></figure></li><li><p>constraint list</p><ul><li><strong>not null</strong>      - col can’t be null</li><li><strong>unique</strong>        - row for col must be unique</li><li><strong>primary key</strong>   - not null union unique</li><li><strong>foreign key</strong>   - ensure the key must exist in other table<br>(ex: In order table have a foreign key customer , refers to customers table)</li><li><strong>check</strong> (cond)  - check the condtition</li><li><strong>default</strong> (val) - assign the default val to col</li></ul></li></ul><ul><li><p>comment</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- it's a comment , MySQL 3.23.3 supports ,</span></span><br><span class="line"><span class="comment">-- I like the style becuase it's like haskell</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  it's also a comment</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* inline comment */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">multiple line</span></span><br><span class="line"><span class="comment">comments</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>select [columns] from [database]</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> customers;</span><br><span class="line"><span class="keyword">select</span> city <span class="keyword">from</span> customers;</span><br></pre></td></tr></table></figure></li><li><p>distinct</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- distinct the entry</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> city <span class="keyword">from</span> customers;</span><br></pre></td></tr></table></figure></li><li><p>where [column] [value]</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> company <span class="keyword">from</span> customers <span class="keyword">where</span> <span class="keyword">id</span> &lt; <span class="number">10</span>;</span><br></pre></td></tr></table></figure></li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">op</th><th style="text-align:center">example</th><th style="text-align:center">note</th></tr></thead><tbody><tr><td style="text-align:center"><code>=</code></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><code>&lt;&gt;</code>[or<code>!=</code>]</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><code>&gt;</code></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><code>&gt;=</code></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><code>&lt;</code></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><code>&lt;=</code></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><code>between</code></td><td style="text-align:center">select id , company from customers where id between 3 and 9</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><code>like</code></td><td style="text-align:center">select id , city from customers where city like ‘M%’;</td><td style="text-align:center"><code>%</code> <a href="#wildcard">通配符</a></td></tr><tr><td style="text-align:center"><code>in</code></td><td style="text-align:center">select * from customers where id in (1 , 2 , 3 , 4)</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><code>not</code></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><code>and</code></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><code>or</code></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table></div><ul><li><p>order by [column] [asc|desc] , [column] [asc|desc]</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> , company <span class="keyword">from</span> customers <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">id</span> <span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure></li><li><p>insert into</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> strings <span class="keyword">values</span> (<span class="number">1</span> , <span class="string">"String for id 1"</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> strings (string_id) <span class="keyword">values</span> (<span class="number">115</span>)</span><br></pre></td></tr></table></figure></li><li><p>update</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- revise value in entry</span></span><br><span class="line"><span class="keyword">update</span> strings</span><br><span class="line"><span class="keyword">set</span> string_data = <span class="string">'revised string_data'</span></span><br><span class="line"><span class="keyword">where</span> string_id = <span class="number">1</span>;</span><br><span class="line"><span class="comment">-- 注意要下 where 條件，不然會都改，和 where 1 = 1 一樣啦。</span></span><br></pre></td></tr></table></figure></li><li><p>delete</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- delete entry</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> strings <span class="keyword">where</span> string_id = <span class="number">1</span>;</span><br><span class="line"><span class="comment">-- 注意要下 where 條件，不然會都刪，和 where 1 = 1 一樣啦。</span></span><br></pre></td></tr></table></figure></li><li><p>limit</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- MySQL</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> strings <span class="keyword">limit</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Oracle</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> strings <span class="keyword">where</span> <span class="keyword">rownum</span> &lt;= <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- MS Access</span></span><br><span class="line"><span class="keyword">select</span> top <span class="number">10</span> * <span class="keyword">from</span> strings</span><br></pre></td></tr></table></figure></li></ul><p><a name="wildcard" id="wildcard"></a></p><ul><li>wildcard</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">wildcard</th><th style="text-align:center">meaning</th></tr></thead><tbody><tr><td style="text-align:center"><code>%</code></td><td style="text-align:center">likes <code>*</code> in shell</td></tr><tr><td style="text-align:center"><code>_</code></td><td style="text-align:center">likes <code>?</code> in shell</td></tr><tr><td style="text-align:center"><code>[]</code></td><td style="text-align:center">likes the char set that scanf supports</td></tr><tr><td style="text-align:center"><code>[!]</code> or <code>[^]</code></td><td style="text-align:center">same as above</td></tr></tbody></table></div><ul><li><p>alias</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">as</span> sn <span class="keyword">from</span> customers;</span><br><span class="line"><span class="keyword">select</span> c.id <span class="keyword">from</span> customers <span class="keyword">as</span> c;</span><br></pre></td></tr></table></figure></li><li><p>join</p><ul><li>inner join — 要有關聯才 show</li><li>left join  — 左邊全都 show ， 右邊看關聯</li><li>right join — 右邊全都 show ， 左邊看關聯</li><li>full join  — 都 show , <a href="http://stackoverflow.com/questions/4796872/full-outer-join-in-MySQL" target="_blank" rel="noopener">MySQL gg</a></li><li>join       — same as join<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> o.id <span class="keyword">as</span> order_id , c.first_name <span class="keyword">as</span> customer</span><br><span class="line"><span class="keyword">from</span> orders <span class="keyword">as</span> o</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> customers <span class="keyword">as</span> c</span><br><span class="line"><span class="keyword">on</span> o.customer_id = c.id</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> o.id;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>union</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- union two select</span></span><br><span class="line"><span class="keyword">select</span> first_name <span class="keyword">from</span> suppliers</span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> first_name <span class="keyword">from</span> customers;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- union allow duplicate values</span></span><br><span class="line"><span class="keyword">select</span> first_name <span class="keyword">from</span> suppliers</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> first_name <span class="keyword">from</span> customers;</span><br></pre></td></tr></table></figure></li><li><p>select into , insert into</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- select entry insert to table [ in other db ] from origin_table</span></span><br><span class="line"><span class="comment">-- but sadly , the method is from SQL.</span></span><br><span class="line"><span class="comment">-- In mySQL , we should use</span></span><br><span class="line"><span class="keyword">create</span> test.xs <span class="keyword">select</span> * <span class="keyword">from</span> strings</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test.ss <span class="keyword">select</span> * <span class="keyword">from</span> strings</span><br></pre></td></tr></table></figure></li><li><p>create index</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- accelerate the speed of searching</span></span><br><span class="line"><span class="keyword">create</span> [<span class="keyword">unique</span>] <span class="keyword">index</span> idx_name <span class="keyword">on</span> tb_name (col_name)</span><br></pre></td></tr></table></figure></li><li><p>drop</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- index</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tb_name <span class="keyword">drop</span> <span class="keyword">index</span> idx_name</span><br><span class="line"></span><br><span class="line"><span class="comment">-- table</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> tb_name</span><br><span class="line"></span><br><span class="line"><span class="comment">-- database</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> db_name</span><br><span class="line"></span><br><span class="line"><span class="comment">-- clear the table</span></span><br><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> tb_name</span><br></pre></td></tr></table></figure></li><li><p>alter table</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- add col</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tb_name</span><br><span class="line"><span class="keyword">add</span> col_name data_type</span><br><span class="line"></span><br><span class="line"><span class="comment">-- del col</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tb_name</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">column</span> col_name</span><br><span class="line"></span><br><span class="line"><span class="comment">-- change type</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tb_name</span><br><span class="line"><span class="keyword">modify</span> <span class="keyword">column</span> col_name data_type</span><br></pre></td></tr></table></figure></li><li><p>auto_increment</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test.custs</span><br><span class="line">(</span><br><span class="line"> <span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment,</span><br><span class="line"> <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">255</span>) ,</span><br><span class="line"> addr <span class="built_in">varchar</span>(<span class="number">255</span>) ,</span><br><span class="line"> city(<span class="number">255</span>)</span><br><span class="line">);</span><br><span class="line">alert table test.custs auto_increment = 100;</span><br></pre></td></tr></table></figure></li><li><p>view</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- view is a virtual table , well , likes call by references</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> v_name <span class="keyword">as</span></span><br><span class="line">[ <span class="keyword">select</span> <span class="keyword">statement</span> ];</span><br><span class="line"></span><br><span class="line"><span class="comment">-- update</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">view</span> v_name <span class="keyword">as</span></span><br><span class="line">[ <span class="keyword">select</span> <span class="keyword">statement</span> ];</span><br><span class="line"></span><br><span class="line"><span class="comment">-- drop</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">view</span> v_name;</span><br></pre></td></tr></table></figure></li><li><p>date functions</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">now</span>() , <span class="keyword">curdate</span>() , <span class="keyword">curtime</span>() , <span class="built_in">date</span>(<span class="keyword">now</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">-- extract(unit_value from date)</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">extract</span>(<span class="keyword">hour</span> <span class="keyword">from</span> <span class="keyword">now</span>()) , <span class="keyword">extract</span>(<span class="keyword">minute</span> <span class="keyword">from</span> <span class="keyword">now</span>());</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">date_add</span>(<span class="keyword">now</span>() , <span class="built_in">interval</span> <span class="number">2</span> <span class="keyword">day</span>) , <span class="keyword">date_sub</span>(<span class="keyword">now</span>() , <span class="built_in">interval</span> <span class="number">2</span> <span class="keyword">day</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">datediff</span>(<span class="keyword">date_add</span>(<span class="keyword">now</span>() , <span class="built_in">interval</span> <span class="number">2</span> <span class="keyword">day</span>) , <span class="keyword">now</span>());</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">date_format</span>(<span class="keyword">now</span>() , <span class="string">"%Y-%M-%D-%a"</span>);</span><br></pre></td></tr></table></figure></li><li><p>null</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_name <span class="keyword">where</span> col_name <span class="keyword">is</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_name <span class="keyword">where</span> col_name <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ifnull or coalesce func let us def the rtn val when data is null</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">ifnull</span>(address , <span class="string">"NULL ADDRESS"</span>) <span class="keyword">from</span> tb_name;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">coalesce</span>(address , <span class="string">"NULL ADDRESS"</span>) <span class="keyword">from</span> tb_name;</span><br></pre></td></tr></table></figure></li><li><p>type</p><ul><li>text<ul><li>char(size &lt; 255) - const length</li><li>varchar(size &lt; 256) - var length , when over 255 -&gt; text</li><li>tinytext - a string whose length &lt; 256</li><li>text - a string whose length &lt; 65536</li><li>mediumtext - a string whose length = 16777215</li><li>mediumbolb - to store bin obj , max size = 16777215</li><li>longtext  - a string whose max length = 4,294,967,295</li><li>longbolb  - a binobj whose max  size  = 4,294,967,295</li><li>enum(elm , …) - a list with max length = 65535</li><li>set - likes enum. wait me to find out.</li></ul></li><li>number (can add <code>unsigned</code> prefix)<ul><li>tinyint(size)   - 1 byte</li><li>smallint(size)  - 2 bytes</li><li>mediumint(size) - 3 bytes</li><li>int             - 4 bytes</li><li>bigint          - 8 bytes</li><li>float           - omit</li><li>double          - omit</li><li>decimal         - float represented by string</li></ul></li><li>date<ul><li>date      - YYYY-MM-DD</li><li>datetime  - YYYY-MM-DD HH:MM:SS</li><li>time      - HH:MM:SS</li><li>year      - YYYY</li><li>timestamp - YYYY-MM-DD HH:MM:SS (UTC)</li></ul></li></ul></li></ul><ul><li><p>functions</p><ul><li>group by before order by</li><li><p>MySQL doesn’t support first() , last() , alternatively , you should use order by and limit</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ship_city <span class="keyword">from</span> orders</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> ship_city <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">id</span> <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li><li><p>having example:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ship_city  <span class="keyword">from</span> orders</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> ship_city <span class="keyword">having</span> <span class="keyword">count</span>(ship_city) = <span class="number">4</span>;</span><br></pre></td></tr></table></figure></li><li><p>mid(string , start from 1 , length)</p></li><li>MySQL doesn’t support len() , you should use length()</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;
開篇謎之音：...... 寒假一直開坑，卻一直沒好好填。&lt;br&gt;
之前想寫個 OJ 所以才接觸 MySQL，但一碰 MySQL 後 OJ 卻沒甚麼動力去玩了。&lt;br&gt;
一切都靜止下來了。&lt;br&gt;
一年後，突然想起，才在這裡慢慢填，主要是 &lt;a href=&quot;http://www.w3schools.com/sql/default.asp&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;w3school&lt;/a&gt; 的筆記。&lt;br&gt;
利益相關：老爸是寫 ERP 管理資料庫的，然後他表示現在都用 stored procedure 了。
&lt;/center&gt;
    
    </summary>
    
      <category term="Note" scheme="http://nobodyzxc.github.io/categories/Note/"/>
    
    
      <category term="sql" scheme="http://nobodyzxc.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>Haskell Note （Basic Syntax to Type）</title>
    <link href="http://nobodyzxc.github.io/2017/01/31/Haskell-Note/"/>
    <id>http://nobodyzxc.github.io/2017/01/31/Haskell-Note/</id>
    <published>2017-01-31T14:44:50.000Z</published>
    <updated>2020-08-16T12:11:26.145Z</updated>
    
    <content type="html"><![CDATA[<center>A world without loop , but recursion。<br>學校 PL 課程，及 <a href="https://learnyoua.haskell.sg/content/zh-tw/" target="_blank" rel="noopener">Haskell 趣學指南</a> 的一些心得筆記。<br><s>更新：戰場轉換到 scheme，scheme 新坑開完再回來。</s><br>更更新：我回乃了。</center><a id="more"></a><h2 id="Some-hints"><a href="#Some-hints" class="headerlink" title="Some hints"></a>Some hints</h2><ul><li>不像 PP , OOP 告訴電腦要做什麼，FP 的思考方式是描述問題。</li><li>function call 有最高優先順序。</li><li>if 在 haskell 裡是 exp 不是 statment</li><li>function name 字首必須小寫 (Type 為大寫）。</li><li>認清 <code>++</code> 和 <code>:</code> ，適時使用<code>:</code>，在<strong>前端</strong>插入元素。</li><li>List 的比較依照字典序。</li></ul><h2 id="Function-list"><a href="#Function-list" class="headerlink" title="Function list"></a>Function list</h2><div class="table-container"><table><thead><tr><th style="text-align:center">function</th><th style="text-align:center">Note</th></tr></thead><tbody><tr><td style="text-align:center"><code>+</code> , <code>-</code> , <code>*</code> , <code>/</code></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><code>mod</code> a b</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><code>&amp;&amp;</code> , &lt;/code&gt;&#124;&#124;&lt;/code&gt; , <code>not</code></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><code>==</code> , <code>/=</code></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><code>&gt;</code>, <code>&gt;=</code> , <code>&lt;</code> ,<code>&lt;=</code></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><code>max</code> a b</td><td style="text-align:center">(a &gt; b ? a : b)</td></tr><tr><td style="text-align:center"><code>min</code> a b</td><td style="text-align:center">(a &lt; b ? a : b)</td></tr><tr><td style="text-align:center"><code>succ</code> a</td><td style="text-align:center">return ++a;</td></tr><tr><td style="text-align:center">a <code>`</code>func<code>`</code> b</td><td style="text-align:center">func  a b</td></tr><tr><td style="text-align:center"><code>(</code>infixFunc<code>)</code> a b</td><td style="text-align:center">a infixFunc b</td></tr><tr><td style="text-align:center"><code>if</code> boolean <code>then</code> val <br><code>else</code> val</td><td style="text-align:center">boolean ? val : val</td></tr><tr><td style="text-align:center"><code>++</code></td><td style="text-align:center">connect list</td></tr><tr><td style="text-align:center"><code>:</code></td><td style="text-align:center">ins elm to list</td></tr><tr><td style="text-align:center"><code>!!</code></td><td style="text-align:center">elm in list at idx</td></tr><tr><td style="text-align:center"><code>head</code> [t]</td><td style="text-align:center">first elm in list</td></tr><tr><td style="text-align:center"><code>tail</code> [t]</td><td style="text-align:center">a list contains all elm in origin list except head</td></tr><tr><td style="text-align:center"><code>last</code> [t]</td><td style="text-align:center">last elm in list</td></tr><tr><td style="text-align:center"><code>init</code> [t]</td><td style="text-align:center">a list contains all elm in origin list except last</td></tr><tr><td style="text-align:center"><code>length</code> [t]</td><td style="text-align:center">the len of list</td></tr><tr><td style="text-align:center"><code>null</code> [t]</td><td style="text-align:center">check the list is null , better then [t] == null</td></tr><tr><td style="text-align:center"><code>reverse</code> [t]</td><td style="text-align:center">reverse a list</td></tr><tr><td style="text-align:center"><code>take</code> num [t]</td><td style="text-align:center">a list contains the first <code>num</code> elm in origin list</td></tr><tr><td style="text-align:center"><code>drop</code> num [t]</td><td style="text-align:center">a list which is <br>the origin list removes first <code>num</code> elms</td></tr><tr><td style="text-align:center"><code>maximum</code> [t]</td><td style="text-align:center">the max elm in a list</td></tr><tr><td style="text-align:center"><code>minimum</code> [t]</td><td style="text-align:center">the min elm in a list</td></tr><tr><td style="text-align:center"><code>sum</code>  [t]</td><td style="text-align:center">the sum of all elm in a list</td></tr><tr><td style="text-align:center"><code>product</code> [t]</td><td style="text-align:center">the product of all elm in a list</td></tr><tr><td style="text-align:center"><code>elem</code> [t]</td><td style="text-align:center">check if the elm is in a list</td></tr><tr><td style="text-align:center"><code>..</code></td><td style="text-align:center">range , [elm .. elm] , [elm , elm .. elm]<br>elm avoid using float</td></tr><tr><td style="text-align:center">(<code>cycle</code> [t])</td><td style="text-align:center">a list of cycling orign list</td></tr><tr><td style="text-align:center">(<code>repeat</code>  elm)</td><td style="text-align:center">a inf list made by a elm</td></tr><tr><td style="text-align:center"><code>replicate</code> num elm</td><td style="text-align:center">same as <code>take num (repeat elm)</code></td></tr><tr><td style="text-align:center">[ valOfFunc &lt;/code&gt;&#124;&lt;/code&gt; var* &lt;- [t] <code>, boolean(Guard)*</code> ]<br> <code>_</code> = anonymous var</td><td style="text-align:center">list comprehension</td></tr><tr><td style="text-align:center"><code>fst</code> (t , t)</td><td style="text-align:center">the first elm in tuple(pair)</td></tr><tr><td style="text-align:center"><code>snd</code> (t , t)</td><td style="text-align:center">the second elm in tuple(pair)</td></tr><tr><td style="text-align:center"><code>zip</code> [t] [t]</td><td style="text-align:center">make a list of tuple(pair)</td></tr><tr><td style="text-align:center">(\var -&gt; valOfFunc)</td><td style="text-align:center">lambda exp</td></tr><tr><td style="text-align:center"><code>zipWith</code> (t->t’->t’’) [t] [t’]</td><td style="text-align:center">zip two list by a func</td></tr><tr><td style="text-align:center"><code>flip</code> (t->t’’->t’’’)</td><td style="text-align:center">flip the param order of a func call</td></tr><tr><td style="text-align:center"><code>map</code> (t->t’) [t]</td><td style="text-align:center">like for_each , list comprehension</td></tr><tr><td style="text-align:center"><code>filter</code> (t->Bool) [t]</td><td style="text-align:center">like Guard in list comprehension</td></tr><tr><td style="text-align:center"><code>takeWhile</code> t->Bool [t]</td><td style="text-align:center">take elm to return a new list while …</td></tr><tr><td style="text-align:center"><code>foldl</code> (t->t’->t) t [t’]</td><td style="text-align:center">do … to acc while elm \= []</td></tr><tr><td style="text-align:center"><code>foldr</code> (t->t’->t) t’ [t]</td><td style="text-align:center">almost simialr to foldl</td></tr><tr><td style="text-align:center"><code>foldl1</code> (t->t->t) [t’]</td><td style="text-align:center">take head of list as init</td></tr><tr><td style="text-align:center"><code>foldr1</code> (t->t->t) [t’]</td><td style="text-align:center">almost simialr to foldl1</td></tr><tr><td style="text-align:center"><code>scanl</code> (t->t’->t) t [t’]</td><td style="text-align:center">acc operated val to list from left</td></tr><tr><td style="text-align:center"><code>scanr</code> (t->t’->t) t’ [t]</td><td style="text-align:center">acc operated val to list from right</td></tr><tr><td style="text-align:center"><code>scanl1</code> (t->t->t) [t]</td><td style="text-align:center">omit</td></tr><tr><td style="text-align:center"><code>scanr1</code> (t->t->t) [t]</td><td style="text-align:center">omit</td></tr></tbody></table></div><h2 id="Data"><a href="#Data" class="headerlink" title="Data"></a>Data</h2><h4 id="type"><a href="#type" class="headerlink" title="type"></a>type</h4><div class="table-container"><table><thead><tr><th style="text-align:center">Type</th><th style="text-align:center">Note</th></tr></thead><tbody><tr><td style="text-align:center">Bool</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Int</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Integer</td><td style="text-align:center">Big Num , operations are not efficient as Int</td></tr><tr><td style="text-align:center">Float</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Double</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Char</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Maybe</td><td style="text-align:center">Nothing or single elm</td></tr></tbody></table></div><h4 id="structure"><a href="#structure" class="headerlink" title="structure"></a>structure</h4><div class="table-container"><table><thead><tr><th style="text-align:center">Structure</th><th style="text-align:center">Note</th></tr></thead><tbody><tr><td style="text-align:center">List</td><td style="text-align:center">[]</td></tr><tr><td style="text-align:center">Tuple</td><td style="text-align:center">()</td></tr></tbody></table></div><h2 id="Typeclass"><a href="#Typeclass" class="headerlink" title="Typeclass"></a>Typeclass</h2><p>不禁讓我想到統計的三個 data Type , interval , odinal , categorical。</p><p><code>=&gt;</code>符號左邊是型態約束（表示此 Type Var 屬於哪個 Typeclass)，<br>右邊是引數和回傳值。用於描述函式原型 (?)。</p><p>例如將一般數字型態轉為更通用的 Integral 的函式 <code>fromIntegral</code><br>其定義為 <code>fromIntegral :: (Num b, Integral a) =&gt; a -&gt; b</code></p><div class="table-container"><table><thead><tr><th style="text-align:center">Typeclass</th><th style="text-align:center">Feature</th><th style="text-align:center">Example type</th><th style="text-align:center">support func</th><th style="text-align:center">Note</th></tr></thead><tbody><tr><td style="text-align:center">Eq</td><td style="text-align:center">可判斷相等</td><td style="text-align:center">Int …</td><td style="text-align:center">==</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Ord</td><td style="text-align:center">可排序</td><td style="text-align:center">Int …</td><td style="text-align:center">&gt; , &lt; , &gt;= , &lt;= , compare</td><td style="text-align:center">有 Eq 特性</td></tr><tr><td style="text-align:center">Show</td><td style="text-align:center">可轉字串</td><td style="text-align:center">Int …</td><td style="text-align:center">show</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Read</td><td style="text-align:center">可由字串轉</td><td style="text-align:center">Int …</td><td style="text-align:center">read</td><td style="text-align:center">注意聲明，否則型態推導可能沒辦法 work</td></tr><tr><td style="text-align:center">Enum</td><td style="text-align:center">順序可枚舉</td><td style="text-align:center">Int …</td><td style="text-align:center">.. , succ , pred</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Bounded</td><td style="text-align:center">有上下界</td><td style="text-align:center">Int …</td><td style="text-align:center">minBound , maxBound</td><td style="text-align:center">若 Tuple 內皆為 Bounded ， <br>則此 Tuple 亦有 Bounded 特性。</td></tr><tr><td style="text-align:center">Num</td><td style="text-align:center">數字類型</td><td style="text-align:center">Int …</td><td style="text-align:center">fromIntegral</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Integral</td><td style="text-align:center">整數類型</td><td style="text-align:center">Integer</td><td style="text-align:center">fromIntegral</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Floating</td><td style="text-align:center">浮點數類型</td><td style="text-align:center">Float</td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table></div><h2 id="Pattern-matching"><a href="#Pattern-matching" class="headerlink" title="Pattern matching"></a>Pattern matching</h2><ul><li>順序很重要</li></ul><ol><li>函式定義內對參數的 pattern matching<br>一開始提到的是可以在 .hs 中像 select case 全部啪出來，不用 if else，在 ghci <a href="http://stackoverflow.com/questions/15733266/pattern-matching-in-ghci" target="_blank" rel="noopener">需要用 guard</a>。<br>其實是 case of 的語法糖。</li><li>函式引數和參數的 pattern matching<br>其實就是參數可以將引數拆開（我用詞好<a href="http://no8dyzxc.pixnet.net/blog/post/290731567" target="_blank" rel="noopener">精準</a> >///&lt;)，好用。</li><li>List Comprehension 的 pattern matching<br>指南的例子 : <code>[a + b | (a , b) &lt;- xs]</code></li></ol><ul><li><p>以上前兩點是我亂叫的，意思知道就好。（奪門而出</p><p>還有一種 at pattern , xs@(a:as)，表示把 xs 拆成 (a:as)。</p></li></ul><h2 id="Guard-amp-Key-words"><a href="#Guard-amp-Key-words" class="headerlink" title="Guard &amp; Key words"></a>Guard &amp; Key words</h2><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">func</span> param</span><br><span class="line">    | [bool exp] = val</span><br><span class="line">    | [bool exp] = val</span><br><span class="line">    <span class="comment">--let keyword(can be anywhere)</span></span><br><span class="line">    | [bool exp] = <span class="keyword">let</span> [name binding;...;...] <span class="keyword">in</span> [exp]</span><br><span class="line">    ...</span><br><span class="line">    | otherwise = val</span><br><span class="line">    <span class="comment">--where keyword(must be the structure end)</span></span><br><span class="line">    <span class="keyword">where</span> [name binding]</span><br><span class="line">          [function def balala]</span><br><span class="line"></span><br><span class="line"><span class="comment">--let keyword in list comprehension</span></span><br><span class="line">[nameCanSee | nameCannotSee , <span class="keyword">let</span> [name binding]]</span><br><span class="line">[nameCannotSee | nameCannotSee , <span class="keyword">let</span> [name binding] <span class="keyword">in</span> [bool exp]]</span><br><span class="line"></span><br><span class="line"><span class="title">func</span> param = <span class="keyword">case</span> [exp] <span class="keyword">of</span> [pattern] -&gt; val</span><br><span class="line">                          [pattern] -&gt; val</span><br><span class="line">                          [pattern] -&gt; val</span><br></pre></td></tr></table></figure><h2 id="High-Order-Function"><a href="#High-Order-Function" class="headerlink" title="High Order Function"></a>High Order Function</h2><ul><li><p>Curried functions = 不完全的 function<br>ex:</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span> &gt; tkMaxCmpWithTen = max <span class="number">10</span></span><br><span class="line"><span class="title">ghci</span> &gt; tkMaxCmpWithTen <span class="number">9</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="title">ghci</span> &gt; addThree = (+<span class="number">3</span>)</span><br><span class="line"><span class="title">ghci</span> &gt; addThree <span class="number">10</span></span><br><span class="line"><span class="number">13</span></span><br></pre></td></tr></table></figure></li><li><p>High Order function = take function as parameter (<strong>Or return a function</strong>)</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span> &gt;  applyTwice func x = func (func x)</span><br><span class="line"><span class="title">ghci</span> &gt; applyTwice addThree <span class="number">10</span></span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="title">ghci</span> &gt; applyTwice (+<span class="number">3</span>) <span class="number">10</span></span><br><span class="line"><span class="number">16</span></span><br></pre></td></tr></table></figure></li><li><p><code>$</code> and <code>.</code></p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ comb to right</span><br><span class="line"></span><br><span class="line"><span class="title">f</span>(g(x)) = f . g $ x</span><br><span class="line"></span><br><span class="line"><span class="title">sum</span> . map (*<span class="number">3</span>) $ [<span class="number">1.</span><span class="number">.9</span>]</span><br><span class="line">(int)sum(list) . (list)map (*<span class="number">3</span>)(list) $ (list)[<span class="number">1.</span><span class="number">.9</span>]</span><br></pre></td></tr></table></figure></li></ul><h2 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h2><p>引入函式庫。<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--in .hs</span></span><br><span class="line"><span class="keyword">import</span> Data.List</span><br><span class="line"><span class="keyword">import</span> Data.List <span class="keyword">hiding</span> (<span class="title">nub</span>)  <span class="comment">--ignore nub in module</span></span><br><span class="line"><span class="keyword">import</span> Data.List (<span class="title">nub</span>，<span class="title">sort</span>)   <span class="comment">--only import num 'n sort</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">qualified</span> Data.Map      <span class="comment">--need use 'Data.Map.func' to call func</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">qualified</span> Data.Map <span class="keyword">as</span> M <span class="comment">--can alias 'Data.Map' to 'M'</span></span><br><span class="line"><span class="comment">--in ghci can also use</span></span><br><span class="line">:m <span class="type">Data</span>.<span class="type">List</span></span><br></pre></td></tr></table></figure></p><h2 id="Our-own-data-type"><a href="#Our-own-data-type" class="headerlink" title="Our own data type"></a>Our own data type</h2><blockquote><p>永遠不要在 data 聲明中加型別約束</p></blockquote><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- Object method</span></span><br><span class="line"><span class="comment">-- data Typename = valueConstructor param ...</span></span><br><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">Circle</span> = <span class="type">Circle</span> <span class="type">Float</span> <span class="type">Float</span> <span class="type">Float</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Enum method</span></span><br><span class="line"><span class="comment">-- data Typename = v0 | v1 | v2 ...</span></span><br><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">Day</span> = <span class="type">Mon</span> | <span class="type">Tue</span> | <span class="type">Wed</span> | <span class="type">Thu</span> | <span class="type">Fri</span> | <span class="type">Sat</span> | <span class="type">Sun</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">Point</span> = <span class="type">Point</span> <span class="type">Float</span> <span class="type">Float</span></span></span><br><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">Shape</span> = <span class="type">Circle</span> <span class="type">Point</span> <span class="type">Float</span> | <span class="type">Rectangle</span> <span class="type">Point</span> <span class="type">Point</span></span></span><br><span class="line"></span><br><span class="line"><span class="title">modlue</span> <span class="type">Shape</span></span><br><span class="line">( <span class="type">Point</span> (..) <span class="comment">-- export all value constructor</span></span><br><span class="line">, <span class="type">Shape</span> (<span class="type">Circle</span> , <span class="type">Rectangle</span>) <span class="comment">-- export Circle and Rectangle</span></span><br><span class="line">, surface <span class="comment">-- function name</span></span><br><span class="line">, baseCircle <span class="comment">-- auxilliary function , baseCircle :: Float -&gt; Float -&gt; Shape</span></span><br><span class="line">) <span class="keyword">where</span></span><br><span class="line"><span class="comment">-- 可以選擇不導出 value constructor，這樣強迫使用者使用 auxilliary function，</span></span><br><span class="line"><span class="comment">-- 避免使用者直接對 value constructor 做 pattern matching，一個封裝的概念。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- record syntax avoid writting boring "get functions"</span></span><br><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">Person</span> = <span class="type">Person</span> &#123; <span class="title">firstName</span> :: <span class="type">String</span></span></span><br><span class="line"><span class="class">                     , <span class="title">lastName</span> :: <span class="type">String</span></span></span><br><span class="line"><span class="class">                     , <span class="title">age</span> :: <span class="type">Int</span></span></span><br><span class="line"><span class="class">                     , <span class="title">height</span> :: <span class="type">Float</span></span></span><br><span class="line"><span class="class">                     , <span class="title">phoneNumber</span> :: <span class="type">String</span></span></span><br><span class="line"><span class="class">                     , <span class="title">secCrush</span> :: <span class="type">String</span></span></span><br><span class="line"><span class="class">                     &#125; <span class="keyword">deriving</span> (<span class="type">Show</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="title">ghci</span> &gt; secCrush me</span><br><span class="line"><span class="string">"\x4a\x79\x75\x6e\x2d\x59\x69\x20\x4a\x68\x61\x6e\x67"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- deriving</span></span><br><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">Day</span> = <span class="type">Mon</span> | <span class="type">Tues</span> | <span class="type">Wed</span> | <span class="type">Thur</span> | <span class="type">Fri</span> <span class="keyword">deriving</span> (<span class="type">Eq</span> , <span class="type">Ord</span> , <span class="type">Bounded</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- type key word to alias type</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="type">String</span> = [char]</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="type">IntMap</span> v = <span class="type">Map</span> <span class="type">Int</span> v</span></span><br><span class="line"><span class="comment">-- same as</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="type">IntMap</span> = <span class="type">Map</span> <span class="type">Int</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- operator</span></span><br><span class="line"><span class="comment">-- infix[lr] seq symbol</span></span><br><span class="line"><span class="keyword">infixr</span> <span class="number">5</span> ++</span><br><span class="line"></span><br><span class="line"><span class="comment">-- an example of binary search tree</span></span><br><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">Tree</span> a = <span class="type">EmptyTree</span> | <span class="type">Node</span> a (<span class="type">Tree</span> <span class="title">a</span>) (<span class="type">Tree</span> <span class="title">a</span>) <span class="keyword">deriving</span> (<span class="type">Show</span>, <span class="type">Read</span>, <span class="type">Eq</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="title">singleton</span> x = <span class="type">Node</span> x <span class="type">EmptyTree</span> <span class="type">EmptyTree</span></span><br><span class="line"></span><br><span class="line"><span class="title">treeInsert</span> x <span class="type">EmptyTree</span> = singleton x</span><br><span class="line"><span class="title">treeInsert</span> x (<span class="type">Node</span> a left right)</span><br><span class="line">      | x == a = <span class="type">Node</span> x left right</span><br><span class="line">      | x &lt; a  = <span class="type">Node</span> a (treeInsert x left) right</span><br><span class="line">      | x &gt; a  = <span class="type">Node</span> a left (treeInsert x right)</span><br><span class="line"></span><br><span class="line"><span class="title">treeElem</span> x <span class="type">EmptyTree</span> = <span class="type">False</span></span><br><span class="line"><span class="title">treeElem</span> x (<span class="type">Node</span> a left right)</span><br><span class="line">    | x == a = <span class="type">True</span></span><br><span class="line">    | x &lt; a  = treeElem x left</span><br><span class="line">    | x &gt; a  = treeElem x right</span><br><span class="line"></span><br><span class="line"><span class="title">mkTree</span> ls = foldr treeInsert <span class="type">EmptyTree</span> ls</span><br></pre></td></tr></table></figure><p>typeclass<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 先前有介紹過 TypeClass，在這裡我們為自己的資料型態加上 TypeClass</span></span><br><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">Day</span> = <span class="type">Monday</span> | <span class="type">Tuesday</span> | <span class="type">Wednesday</span> | <span class="type">Thursday</span> | <span class="type">Friday</span> | <span class="type">Saturday</span> | <span class="type">Sunday</span></span></span><br><span class="line">           <span class="keyword">deriving</span> (<span class="type">Eq</span>, <span class="type">Ord</span>, <span class="type">Show</span>, <span class="type">Read</span>, <span class="type">Bounded</span>, <span class="type">Enum</span>)</span><br><span class="line"><span class="comment">-- Eq 可比 , Ord 排序由左至右分別是小到大 , Show &amp; Read 提供 IO , Bounded 提供上下界 , Enum 順序枚舉</span></span><br><span class="line"><span class="comment">-- 因為 Enum 的特性，可以使用</span></span><br><span class="line">[minBound .. maxBound] :: [<span class="type">Day</span>]</span><br></pre></td></tr></table></figure></p><p>type key word and the type constructor<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- type 提供了一個對類別不錯的 alias 方法</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="type">String</span> = [<span class="type">Char</span>] <span class="comment">-- 最常見的</span></span></span><br><span class="line"><span class="comment">-- 我們寫 Function 在宣告可能會用到</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- type constructor</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="type">AssocList</span> k v = [(<span class="title">k</span>,<span class="title">v</span>)]</span></span><br><span class="line"><span class="comment">-- 用法嘛，宣告用（應該不只這樣，再想想）</span></span><br><span class="line">[(<span class="number">1</span>,<span class="number">2</span>),(<span class="number">4</span>,<span class="number">5</span>),(<span class="number">7</span>,<span class="number">9</span>)] :: <span class="type">AssocList</span> <span class="type">Int</span> <span class="type">Int</span></span><br></pre></td></tr></table></figure></p><h2 id="Questions"><a href="#Questions" class="headerlink" title="Questions?"></a>Questions?</h2><ul><li>tuple likes struct , while list likes array ?</li><li>那就是右摺疊可以處理無限長度的資料結構，而左摺疊不可以。<br>（因為 Lazy Eval 所以 foldr 可以跑出結果，foldl 會無窮）<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">head'</span> :: [a] -&gt; a</span><br><span class="line"><span class="title">head'</span> = foldr1 (\x _ -&gt; x)</span><br><span class="line"><span class="title">last'</span> :: [a] -&gt; a</span><br><span class="line"><span class="title">last'</span> = foldl1 (\_ x -&gt; x)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;
A world without loop , but recursion。&lt;br&gt;
學校 PL 課程，及 &lt;a href=&quot;https://learnyoua.haskell.sg/content/zh-tw/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Haskell 趣學指南&lt;/a&gt; 的一些心得筆記。&lt;br&gt;
&lt;s&gt;更新：戰場轉換到 scheme，scheme 新坑開完再回來。&lt;/s&gt;&lt;br&gt;
更更新：我回乃了。
&lt;/center&gt;
    
    </summary>
    
      <category term="Note" scheme="http://nobodyzxc.github.io/categories/Note/"/>
    
    
      <category term="fp" scheme="http://nobodyzxc.github.io/tags/fp/"/>
    
      <category term="haskell" scheme="http://nobodyzxc.github.io/tags/haskell/"/>
    
      <category term="lambda" scheme="http://nobodyzxc.github.io/tags/lambda/"/>
    
  </entry>
  
  <entry>
    <title>Vim Note （Basic Manipulation）</title>
    <link href="http://nobodyzxc.github.io/2017/01/22/vim-0/"/>
    <id>http://nobodyzxc.github.io/2017/01/22/vim-0/</id>
    <published>2017-01-22T15:32:56.000Z</published>
    <updated>2020-08-16T12:11:56.942Z</updated>
    
    <content type="html"><![CDATA[<center>結識 vim 一年多了，一切的一切算得上機緣巧遇。<br>想來不禁百感交集，意味悠遠。<br>這篇文章會不定期更新，隨著我的 vim skill。<br>這段旅途的終點，大概就是我不用 vim 的那天吧！<br>（可能是入 emacs 教，或是奔向 IDE 了吧～)<br>Chrome 有 Vimium ， Firefox 有 VimFx 加入我大 Vim 教吧。</center><a id="more"></a><h2 id="基本操作篇"><a href="#基本操作篇" class="headerlink" title="基本操作篇"></a>基本操作篇</h2><p>要編輯一個存在的文檔<code>tst.txt</code>時只要在 terminal 下 <code>vim tst.txt</code>。<br>如果要建立一個新檔，叫做<code>new.txt</code>，也只要下 <code>vim new.txt</code>，只是離開記得存。<br>如果還沒想到要存什麼名字，只要下<code>vim</code>就好了，離開再命名就好了。</p><p>vim 有三種模式 normal , insert , visual。一開始進到 vim 時即是 normal 模式。</p><p><code>&lt;ESC&gt;</code>進 normal mode ，<br>normal mode 下，<code>i</code>（注意是小寫），可以讓游標在<strong>原位</strong>進入 insert mode，<br>normal mode 下，<code>v</code>，可以進入 visual mode。</p><p>看起來，normal mode 是一切 mode 的橋樑。</p><p>敏銳的人可以發現， normal mode 左下並沒有特別的東西。<br>insert mode 會出現 <code>-- INSERT --</code>， visual mode 則是 <code>-- VISUAL --</code>。</p><h3 id="normal-mode"><a href="#normal-mode" class="headerlink" title="- normal mode"></a>- normal mode</h3><p>normal 模式主要有兩種功能，快速移動游標、簡易文檔操作和下指令。<br>其中離開指令就是在 normal mode 下的。<br>要切換 normal mode 只要按<code>esc</code>鍵就好了，vim script 會表示成<code>&lt;ESC&gt;</code>。<br>要下指令，只要在 normal mode 按<code>:</code>，再下指令。</p><ol><li><p>移動</p><p>要移動最簡單的就是按方向鍵，但是 vim 習慣上會使用 <code>jkhl</code> ， 分別對應上下左右。<br>（方向鍵在所有模式是通用的）</p><p>不想一格格移動的話可以先鍵入一個數字再移動，比如 <code>15j</code> 是向下移動十五行。<br>在很多操作下都有搭配數字的用法，有興趣不妨試一下。</p><p>要把游標移動到行首，可以直接按數字 <code>0</code>。<br>要把游標移動到行尾，可以直接按符號 <code>$</code>(shift + 4)。<br>要把游標移動到首行，可以直接按字母 <code>gg</code>。<br>要把游標移動到尾行，可以直接按字母 <code>G</code>(shift + g)。</p><p>vim 上某些建議是不要鎖住 caps lock 鍵，要大寫盡量用 shift 鍵。</p></li><li><p>文檔操作</p><ul><li>copy   : 整行 copy 按 <code>yy</code>，或是按<code>v</code>進入 visual mode 選取再按 <code>y</code>。</li><li>paste  : 按<code>p</code>。</li><li>delete : 用法跟 copy 很像，字母<code>d</code>和<code>x</code>，try 一下吧，帶有剪下的功能。</li><li>search : 按下 <code>/</code> ， 鍵入搜尋字串然後<code>enter</code>，<code>n</code>下一筆，<code>N</code>上一筆。</li><li>replace: <code>:%s/ 目標字串 / 取代成字串 /g</code>，<code>g</code>是對每行的目標字串替換，<br>沒加只會取代每行第一個。 （亦可進入 visual 進行取代，就不用使用<code>%</code>)<br> （關於 vim regex 請走<a href="http://vimregex.com/" target="_blank" rel="noopener">這</a>）</li></ul></li><li><p>指令</p><p>進到 vim 之後先講一下離開吧。<br>有句有名的話是這樣說的。</p><blockquote><p>要產生一個隨機字串，就是讓一個新手離開 vim</p></blockquote><p>離開的指令是<code>q</code>，所以假設我們不知道現在是什麼模式，</p><p>只要按下<code>&lt;ESC&gt;:q</code>，就能離開。<br>不過你可能會遇到這種情況</p><blockquote><p><code>E37: No write since last change (add ! to override)</code></p></blockquote><p>意思就是你對檔案有了改動， vim 不確定你是否要儲存再離開，所以詢問。<br>道理和用 Word 離開會跳出 msgbox 一樣。<br>如果沒有要儲存，照著提示，只要下<code>:q!</code>，即可。<br>若要儲存，只要下<code>:wq</code>。<br>到了這裡，有沒有發現一件事，所謂指令，好像有著某種組合關係。</p><blockquote><p>沒錯， vim 的精隨就在於<strong>組合</strong>！</p></blockquote><p>像是要把該行往下 shift 一行，就可以使用 <code>ddp</code>。</p><p><code>w</code>是儲存的指令，<code>:wq</code>，就是儲存後離開。<br>直接下<code>:w</code>當然就是儲存啊，養成隨時儲存的習慣， vim 因為斷線掛掉可是很折騰的。</p><blockquote><p>不要只會<code>:wq</code>啊，<code>:w</code>要舉一反三直接理解</p></blockquote><p>前面提到，若沒取檔名，只要在離開使用<code>:wq filename</code>即可存成該檔並離開。<br><code>filename</code> 這個參數主要是餵給 <code>w</code> 使用，所以單獨用<code>:w filename</code>也可以。</p><p>若 vim 在一開始就開檔了呢？這時此種用法就會變成另存新檔囉，很好理解吧。</p><p><code>!</code>是強制的意思，<code>:q!</code>，解釋為強制離開。<br>有時是文檔的擁有者，但是沒有給自己加上 w 權限，<br>這時 vim 左下角就會出現<code>[readonly]</code>。<br>normal mode 下 <code>:wq</code>時就會出現</p><blockquote><p><code>W10: Warning: Changing a readonly file</code></p></blockquote><p>這時也只要加個驚嘆號就可以了。（當然，不是文檔擁有者不管用）<br>那<code>:qw</code>可以執行嗎？很遺憾，所謂指令是有順序的，想想看，這合理嗎？<br>也是可以試試看，程序員鼓勵試錯精神。</p><blockquote><p><code>:wq</code> 有快捷，他等價於<code>:x</code>，但我覺得要按<code>&lt;ESC&gt;</code>的話，<br>計入移動手的成本，其實也沒快到哪裡。<br>還有個快捷是<code>ZZ</code>。</p></blockquote></li></ol><p>normal mode 已經說了個大概，更進階的之後會在 vimrc section 中討論。</p><h3 id="insert-mode"><a href="#insert-mode" class="headerlink" title="- insert mode"></a>- insert mode</h3><p>主要就是打字，沒什麼好說的，有幾種指令可以由 normal mode 進入 insert mode。</p><ul><li><code>i</code> : 由游標位置進入。</li><li><code>I</code> : 插入該行第一個字元位置。</li><li><code>a</code> : 游標位置往後一位插入。</li><li><code>A</code> : 插入行尾。</li><li><code>o</code> : 插入下一行。</li><li><code>O</code> : 插入上一行。</li><li><code>s</code> : 消除一字元並進入。</li><li><code>S</code> : 清除該行。</li></ul><h3 id="visual-mode"><a href="#visual-mode" class="headerlink" title="- visual mode"></a>- visual mode</h3><p>  一鍵縮排很實用，選起來再按 <code>=</code> 即可。<br>  所以要全文縮排就可以使用 <code>ggvG=</code> 或是 <code>gg=G</code>。</p><p>  還有值得一提的是 column 模式。<br>  按<code>v</code>進入 visual mode，往下選取需要的行。<br>  <code>ctrl-v</code>進入 column 模式。</p><p>  然後可以做啥咧？按<code>I</code>進入 insert mode，鍵入幾個字。<br>  <code>esc</code> 跳出。<br>  在每行插入剛剛打的字母。</p><p>參考資料：<a href="https://www.fprintf.net/vimCheatSheet.html" target="_blank" rel="noopener">vim cheat sheet</a></p>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;
結識 vim 一年多了，一切的一切算得上機緣巧遇。&lt;br&gt;
想來不禁百感交集，意味悠遠。&lt;br&gt;
這篇文章會不定期更新，隨著我的 vim skill。&lt;br&gt;
這段旅途的終點，大概就是我不用 vim 的那天吧！&lt;br&gt;
（可能是入 emacs 教，或是奔向 IDE 了吧～)&lt;br&gt;
Chrome 有 Vimium ， Firefox 有 VimFx 加入我大 Vim 教吧。
&lt;/center&gt;
    
    </summary>
    
      <category term="Note" scheme="http://nobodyzxc.github.io/categories/Note/"/>
    
    
      <category term="vim" scheme="http://nobodyzxc.github.io/tags/vim/"/>
    
      <category term="linux" scheme="http://nobodyzxc.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Memoir - Road</title>
    <link href="http://nobodyzxc.github.io/2016/12/31/MyRoad/"/>
    <id>http://nobodyzxc.github.io/2016/12/31/MyRoad/</id>
    <published>2016-12-31T12:49:55.000Z</published>
    <updated>2020-08-16T12:11:31.762Z</updated>
    
    <content type="html"><![CDATA[<center><strong><em>謹記我跌跌撞撞，那不成熟的過去。</em></strong></center><a id="more"></a><h3 id="路？"><a href="#路？" class="headerlink" title="路？"></a>路？</h3><p>元旦連假回家，老爸載著我，吃晚餐的路上。</p><p>“唸到現在，你還會想念電機嗎？”，爸提了個問題。</p><p>“還好，只是不知道念電機的話現在會怎樣”<br>“不過可能沒辦法像現在一樣方便，上個網找個方向就能充實專業”，我想想了後說。</p><p>“那樣就要像我一樣買單芯片機，一些材料，動手實作吧”，爸說。</p><p>“那樣很麻煩吧？”，我不禁嘆道。</p><h3 id="憶"><a href="#憶" class="headerlink" title="憶"></a>憶</h3><p>當初選志願時，對資訊甚是排斥，主要是因為高中有過挫折吧。</p><p>高中電腦課學 C++ ，當時適應非常不良。<br>對於<code>using namespace std</code>及<code>cin &gt;&gt;</code> , <code>cout &lt;&lt;</code>，感到沒有 sense。<br>這些老師僅是帶過，我是有聽沒有懂，由於沒有深入講解，我對整個架構觀念，建立不太起來。</p><blockquote><p>一切是如此的抽象。</p></blockquote><p>對於引入頭文件云云感覺都記不太起來，可能是不太熟練吧。</p><p>但畢竟住宿，也沒有電腦可以搞這些。</p><p>對於沒辦法操作的程式，要我光看課本複習，我是辦不到的。</p><p>而結果是每次上課，我都只能生硬的使用這些東西，對於這一切一切，我感到非常恐懼，<br>一種對陌生感到的恐懼。</p><p>一個段落寫完，運行不起來，底下錯誤訊息也不會看，老師好像也沒教。</p><p>總之，感覺要完成一段可以跑的東西，困難重重，一個不會就杵在那裏。</p><p>常常只能向老師求救，對自己的無能感到厭惡。</p><p>連 cout、cin 的 <code>&lt;&lt;</code> 及 <code>&gt;&gt;</code> 都常常寫反。</p><blockquote><p>每每使用這些東西，我都會感到痛苦。</p></blockquote><p>在這堂課中，我體會不到編程的樂趣，沒有成就，只有挫敗感。</p><p>記得曾向老爸抱怨聽不懂，他只是表示你現在只要把書讀好，不用去搞那些。</p><hr><p>就這樣渾渾噩噩了三年</p><hr><p>升大學的暑假，老爸教了我 VB6 ，我開始對程式開發產生了些興趣，<br>也終於能開始熟練的使用簡單的語法了。</p><p>比起那時 Dev C++ 視窗裡的天書般的除錯訊息，VB6 更是直接的標示出有問題的地方。</p><p>而且不用引入函式庫， syntax 的 support 感覺強很多。</p><p>物件都帶有各自的屬性，一切具體了起來，OBP 帶我看到更結構化的世界，<br>也為我鋪好了 OOP 的道路。</p><p>程式原來是嚴謹但不失彈性的，我深刻的體會到了這點。</p><blockquote><p>“你怎麼會這樣寫捏？”</p></blockquote><p>彷彿又回到了兩年前，老爸竟然說出了和電腦老師一模一樣的話。</p><p>但是這次我已可以好好說出我的想法，而不是當年的支支吾吾。</p><p>看著老爸拉著元件，加上程式碼，我好像可以了解到一些程式碼後的行為。</p><p>感覺經歷一兩年的沉澱，思路終於和這領域銜接上了，每個問題好像都能問到點上。</p><p>拉著表單，為各式各樣的元件加上程式碼，一切的一切如我所願的跑了起來。</p><blockquote><p>程式能終於照著我的想法去跑了。</p></blockquote><p>遇到 bug 我也終於看得懂錯誤訊息。</p><blockquote><p>更重要的是學會了設中斷點，逐行運行程式，學會調試。</p></blockquote><p>感覺 VB6 比 C++ 親切很多，語法檢查，錯誤提示，對我來說都點到了點上。</p><p>學習不再窒礙，我可以的，這是一個我可以掌握的世界。</p><p>上了大學學了 C 語言，感覺自己看了夠多，兩種語言間 (C/C++ , VB) 能互相輝映。<br>剛碰 C ，就深深感到他比 C++ 親切，感覺少了很多奇怪的東西。</p><p>有了先前的經驗，我覺得即使再複雜，只要能跟我說明其中含意，我就能好好記住他。</p><p>好，那就開始吐槽 C 和 C++ 吧，我覺得用 C 入門比 C++ 好的一些點。</p><p>雖然說總的來說是我高中時不認真成分居多。（其實 VB6 才是最好入門的啊）</p><ol><li><blockquote>`#include<stdio.h>` vs `#include<iostream>`</iostream></stdio.h></blockquote>恩，我覺得前者比較有 sense ， 標準的 io 嘛，那 stream 是什麼鬼 ( murmuring )</li><li><blockquote>`using namespace std;`</blockquote>這個我不知要怎麼說了，完全沒有頭緒啊。可能你跟我講沒有用的話，`cout`要改成`std::cout`，我就會有 sense 了。</li><li><blockquote>`scanf("%c%d") printf("%c%d")` vs `cin >> cout <<`< blockquote>前者可能會有`&`符號的問題。不過比起莫名其妙且老是記不起來的`>>`與`<<`， 我相信前者的 format string 和 `&` 對我比較有 sense 不要說為了打比賽啊，但說起來 c 是 c++ 子集，要用 ++ 的庫講一下應該就會知道了吧？ 況且`stdio.h`的東西比`iostream`的快啊，怎不教`cstdio`? < li><li><blockquote>`fopen` </blockquote>現在想起來怪怪的，如果有教 fopen 那當初是用甚麼寫入？`fputs` ? 那怎不教 `cstdio`?要再查一下，記憶模糊了。</li><li><blockquote>`'\n'` vs `<< endl;`</blockquote>換行，好像過了很久才明白 `endl` 是 end line 的意思，相形之下 `\n` new line 似乎比較有 sense。</li></`，></`<></blockquote></li></ol><p>而漸漸的，我從 VB6 回歸到 C，是種反璞歸真的感覺。<br>VB6 的視窗化，讓我覺得一切都太麻煩，而 Linux 簡單明瞭，深深的吸引了我。</p><p>在 VB6 中寫一段簡單的東西，都要拉一個元件出來，也許也是到了個瓶頸，感覺做不出甚麼東西出來，<br>開始想要追求功能性的我，投向了 C 語言的懷抱。</p><ul><li>大一期中，用 C 調 ncurses 寫了個俄羅斯方塊，<br>感覺能開始做複雜的東西，之後也寫了個多人聊天室。<br><s>儘管現在看了，那些 code 全都醜的要命。</s></li><li>回憶高中所學，用一招 fopen 開啟了更大的世界（壞笑）。</li><li>開始熟悉 script，寫了蠻多小東西（也是壞笑）。</li><li>學會了 system() 各種花式亂搞（反正主機不是我家的（逃。</li><li>學了很多語言，開了眼界，覺得學習新東西，是件有趣的事情。</li></ul><p>然而一切的一切在之後的之後，回來看這些事總覺得 too naive。</p><h3 id="？"><a href="#？" class="headerlink" title="？"></a>？</h3><p>雖然常常感嘆高中沒得引發興趣，踏入這領域，不過至少現在是在路上的。</p><blockquote><p>我浪費了太多時間在別人無意義的程式上了，從現在起，我要寫我自己的。</p></blockquote><p>上知乎，感覺看到的東西越來越多，只要我肯伸出手，就可以抓住這世界。</p><p>開始頻繁的上 GitHub ，雖然可能推的 repo 不夠入流，大多只是些小 script，</p><p>但是確實是有在累積的，屬於自己的某些東西。</p><p>在 zerojudge 刷了些題，看著排行上的那些高中學長同學等，不禁感嘆錯過了電研。</p><blockquote><p>想要刷到章魚的高度呢，不過還有距離呢，笑。</p></blockquote><h3 id="結"><a href="#結" class="headerlink" title="結"></a>結</h3><p>看起來好像是在吐槽高中電腦課，其實更多的是對自己的憾恨。<br>是當年那個找不到目標的自己，造成現在的碌碌無為，<br>總想著要做些好玩的事情逃離課業，卻一次次和計算機擦身而過，</p><blockquote><p>罷了，就讓過去的一切，都封存在這篇文章中吧。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;
&lt;strong&gt;&lt;em&gt;謹記我跌跌撞撞，那不成熟的過去。&lt;/em&gt;&lt;/strong&gt;
&lt;/center&gt;
    
    </summary>
    
      <category term="Memoir" scheme="http://nobodyzxc.github.io/categories/Memoir/"/>
    
    
  </entry>
  
</feed>
